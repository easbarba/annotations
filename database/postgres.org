#+TILE: PostgreSQL

* Summary
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#summary][Summary]]
- [[#progress][Progress]]
- [[#base][Base]]
  - [[#tables][Tables]]
    - [[#create][create]]
    - [[#drop][drop]]
    - [[#truncate][truncate]]
    - [[#delete][delete]]
    - [[#insert][insert]]
    - [[#update][update]]
    - [[#temporary][temporary]]
    - [[#update][update]]
    - [[#unlogged][unlogged]]
    - [[#null][null]]
    - [[#where][where]]
    - [[#like][like]]
    - [[#ilike][ilike]]
    - [[#distinct][distinct]]
    - [[#subqueries][subqueries]]
  - [[#operators][Operators]]
    - [[#or][or]]
    - [[#in][in]]
    - [[#not][not]]
    - [[#exist][exist]]
  - [[#functions][Functions]]
  - [[#clause][Clause]]
  - [[#types][Types]]
    - [[#null][null]]
    - [[#integer][integer]]
  - [[#databases][Databases]]
    - [[#create][create]]
    - [[#drop][drop]]
    - [[#copy][copy]]
    - [[#size][size]]
      - [[#via-psql][via psql]]
      - [[#via-sql][via sql]]
    - [[#query][query]]
  - [[#ddl---data-definition-language][DDL - Data Definition Language]]
  - [[#dml---data-manipulation-language][DML - Data Manipulation Language]]
    - [[#where][where]]
    - [[#in][in]]
    - [[#not-int][not int]]
    - [[#and][and]]
    - [[#or][or]]
    - [[#like][like]]
    - [[#between][between]]
    - [[#order-by][order by]]
  - [[#tablespace][Tablespace]]
  - [[#users--groups][Users & Groups]]
    - [[#role][role]]
      - [[#statements][Statements]]
- [[#commands][Commands]]
  - [[#pg_ctl][pg_ctl]]
  - [[#psql][psql]]
    - [[#commands-][commands (\)]]
    - [[#psql-prompt][psql prompt]]
    - [[#drop-role][drop role]]
    - [[#create-role][create role]]
    - [[#create-group][create group]]
    - [[#grant][grant]]
    - [[#inspect][inspect]]
  - [[#pstree][pstree]]
  - [[#initdb][initdb]]
  - [[#createdb][createdb]]
- [[#terms][Terms]]
- [[#errors][Errors]]
- [[#tips][Tips]]
  - [[#local-and-non-root-database][local and non-root database]]
  - [[#container-from-cli][container from cli]]
  - [[#container-compose][Container compose]]
:END:

* Progress
| book                   | chapter             | @              |
|------------------------+---------------------+----------------|
| Learn PostgreSQL 12/13 | Advanced Statements | Learning joins |

* Base
** Tables
| Types            |                                                                   |
|------------------+-------------------------------------------------------------------|
| Temporary tables | Very fast tables, visible only to the user who created them       |
| Unlogged tables  | Very fast tables to be used as support tables common to all users |
| Logged tables    | Regular tables                                                                  |

*** create
#+begin_src sql
CREATE TABLE dummytable (dummyfield integer not null primary key);

CREATE TABLE users (
, username text NOT NULL
, gecos text
, email text NOT NULL
, PRIMARY KEY(pk)
, UNIQUE(username)
);

INSERT INTO categories (title,description) values
('apple', 'fruits'), ('orange','fruits'),('lettuce','vegetable'), ('pataya', NULL);
#+end_src

#+begin_src sql
create table posts (pk int generated always as identity,
title text not null,
content text,
author integer not NULL,
category integer,
primary key(pk),
unique(author));

#+end_src

#+begin_src sql
create table new_categories as select * from categories limit 0;
#+end_src

*** drop
Deletes the table structure from the database, along with any data stored in the table.

#+begin_src sql
DROP TABLE tablename;
#+end_src

#+begin_src sql
DROP TABLE IF EXISTS users;
#+end_src
*** truncate
Deletes records from a table without removing table structure

- ddl

#+begin_src sql
TRUNCATE TABLE categories;
#+end_src
*** delete
- dml

delete all records

#+begin_src sql
DELETE FROM name_table;
#+end_src


delete a group of records

#+begin_src sql
DELETE FROM name_table WHERE col=value;
DELETE FROM product WHERE price<2.90;
#+end_src

*** insert
#+begin_src sql
INSERT INTO users (username,gecos,email) values
('myusername','mygecos','myemail');

INSERT INTO categories (title,description) values
('apple', 'fruits'), ('orange','fruits'),('lettuce','vegetable');
#+end_src
*** update
*** temporary
table visible only in the session where it was created

#+begin_src sql

forumdb=# create temp table if not exists temp_users
pk int GENERATED ALWAYS AS IDENTITY
,username text NOT NULL
,gecos text
,email text NOT NULL
,PRIMARY KEY( pk )
,UNIQUE ( username )
);

#+end_src

table visible only within our transaction

#+begin_src sql
forumdb=# begin work;
BEGIN

forumdb# create temp table if not exists temp_users (
pk int GENERATED ALWAYS AS IDENTITY
,username text NOT NULL
,gecos text
,email text NOT NULL
,PRIMARY KEY( pk )
,UNIQUE ( username )
) on commit drop;

forumdb=# commit work;
COMMIT

in this way :
forumdb=# \d temp_users;
Did not find any relation named "temp_users".

#+end_src


Creating a table starting from another table

#+begin_src sql
create temp table temp_categories as select * from categories;
#+end_src
*** update

#+begin_src sql
update temp_categories set title='peach' where pk = 14;
#+end_src

*** unlogged
- not crash-safe
- much faster than logged tables
*** null
display NULL values present in the tables

#+begin_src sql
\pset null NULL
Null display is "NULL".
#+end_src

Query null values

#+begin_src sql
SELECT title,description FROM categories WHERE description IS NULL;

select * from categories order by description NULLS first;

select * from categories order by description NULLS first;
#+end_src
*** where
#+begin_src sql
select * from categories where description ='vegetable';

select * from categories where description ='fruits' and title='orange';

select * from categories where description ='fruits' order by 2 desc;
#+end_src
*** like

#+begin_src sql
select * from categories where title like 'a%';
select * from categories where title like '%e';
select * from categories where title like '%ap%';
select * from categories where title like 'A%';
select * from categories where upper(title) like 'A%';  -- like case-insensitive search
#+end_src
*** ilike
Performs case-insensitive search

#+begin_src sql
select * from categories where title ilike 'A%';
#+end_src
*** distinct

*** subqueries
** Operators
*** or
*** in
#+begin_src sql
select * from categories where pk in (10,11);
#+end_src
*** not
#+begin_src sql
select * from categories where not (pk=10 or pk=11);
select * from categories where pk not in (10,11);
select pk,title,content,author,category from posts where category
       not in (select pk from categories where title ='orange');
#+end_src
*** exist
#+begin_src sql
select pk,title,content,author,category from posts where exists
       (select 1 from categories where title ='orange' and posts.category=pk);


select pk,title,content,author,category from posts where not
       exists (select 1 from categories where title ='orange' and
       posts.category=pk);
#+end_src
** Functions
*coalesce*

given two or more parameters, returns the first value that is not NULL.

#+begin_src sql
select coalesce(NULL,'test'); -- test
select coalesce('orange','test'); -- orange
select coalesce(description,'No description') as description from categories order by 1;
#+end_src
** Clause
*limit*
limit the number of rows returned by a query

#+begin_src sql
select * from categories order by pk limit 1;
select * from categories order by pk limit 2;
#+end_src

*offset*
skip a specific number of rows returned by the query

#+begin_src sql
select * from categories order by pk offset 1 limit 1;
#+end_src

** Types
*** null
#+begin_src sql
\pset null
\pset null (NULL) -- change how NULL is represented to (NULL)
#+end_src
*** integer
** Databases
*** create
#+begin_src sql
CREATE DATABASE dummydb;
#+end_src
*** drop
#+begin_src sqld
DROP DATABASE tablename;
#+end_src
*** copy
#+begin_src sql
CREATE DATABASE forumdb2 TEMPLATE forumdb;
#+end_src
*** size
**** via psql
#+begin_src conf
\x
\l+ databasename
#+end_src
**** via sql
#+begin_src sql
SELECT pg_database_size('forumdb');
SELECT pg_size_pretty(pg_database_size('forumdb'));
#+end_src
*** query
#+begin_src sql
select * from pg_database where datname='forumdb';
#+end_src
** DDL - Data Definition Language
commands are used to manage databases and tables
** DML - Data Manipulation Language
used to insert, delete, update, and select data inside databases
*** where
*** in
*** not int
*** and
*** or
*** like
*** between
*** order by

** Tablespace
pg_tblspc
pg_default
pg_global
** Users & Groups
*** role
- A role can be a single account, a group of accounts, or even both depending on how you configure it
- it should be either a single user or a single group, but not both.
- have a unique name or identifier, usually called the username.
- represents a collection of database permissions and connection properties.
**** Statements
|             |                             |
|-------------+-----------------------------|
| CREATE ROLE | create a role from scratch  |
| ALTER ROLE  | change some role properties |
| DROP ROLE   | remove an existing role     |

* Commands
** pg_ctl
|                          |                                                                                                                                          |
|--------------------------+------------------------------------------------------------------------------------------------------------------------------------------|
| start, stop, and restart | execute the corresponding actions on the cluster                                                                                         |
| status                   | reports the current status (running or not) of the cluster.                                                                              |
| initdb                   | executes the initialization of the cluster, possibly                                                                                     |
| reload                   | causes the PostgreSQL server to reload the configuration                                                                                 |
| promote                  |                                                                                                                                          |
| -d <database>            | Specifies the file system location of the database files                                                                                 |
| -m <mode>                | Specifies the shutdown mode. mode can be smart, fast, or immediate, or the first letter of one of these three. p, start, restart, reload |
| -U <user>                |                                                                                                                                          |
| -h <host>                | IPV4,IPV6 or hostname                                                                                                                    |
| -p                       | Specifies the location of the postgres executable.                                                                                       |
|                          |                                                                                                                                          |
** psql
a command-line client that allows you to interact with, connect, and administer
databases and the cluster itself.

|    |                                                         |
|----+---------------------------------------------------------|
| -l |                                                         |
| -d | The database name                                       |
| -U | The username                                            |
| -h | The host (either an IPv4 or IPv6 address or a hostname) |
|    |                                                         |

*** commands (\)
|                |                                                        |
|----------------+--------------------------------------------------------|
| \x             | expanded mode                                          |
| \l             | list all the databases that are present in the cluster |
| \c             | connect                                                |
| \l+ <database> |                                                        |
| \du            | list roles                                             |
| \du+           | same as above but more info                            |

*** psql prompt
|                                          |                |
|------------------------------------------+----------------|
| \i <file>                                | load file      |
| <statement> \g                           | same as ;      |
| \e <file> or \e <statement>              | open in editor |
| \h <command>                             | command doc    |
| \?                                       |                |
| \d                                       |                |
| postgresql://username@host:port/database |                |

*** drop role
#+begin_src sql
DROP ROLE [ IF EXISTS ] name [, ...]
#+end_src

#+begin_src sql

DROP ROLE IF EXISTS saitama;
#+end_src

*** create role
*** create group
*** grant
*** inspect

** pstree
    - checkpointer
    - background writer
    - walwriter
    - stats collector
    - logical replication launcher
** initdb
** createdb
* Terms
|              |                                                                                    |
|--------------+------------------------------------------------------------------------------------|
| session      |                                                                                    |
| transactions |                                                                                    |
| concurrency  |                                                                                    |
| ACID         | atomicity, consistency, isolation, and durability                                  |
| DMBS         | Database Management System                                                         |
| PID          | Process Identifier                                                                 |
| TableSpace   | tablespace is a storage space that can be outside the PGDATA directory             |
| PGDATA       |                                                                                    |
| postmaster   | prints out a few log lines before redirecting the logs to the appropriate log file |
| oid2name     |                                                                                    |
* Errors
#+begin_src shell
[error] Postgrex.Protocol (#PID<0.328.0>) failed to connect: ** (DBConnection.ConnectionError) tcp connect (localhost:5432): co
nnection refused - :econnrefused
#+end_src

* Tips
** local and non-root database
#+begin_src shell-script
initdb -D .postgres -A md5 -U $USER --pwprompt
# or
initdb -D .postgres -A md5 -U $USER --pwfile=/path/to/passfile

pg_ctl -D .postgres -w start
createdb -U $USER mydb
#+end_src
** container from cli
#+begin_src sh
docker run --name postin -e POSTGRES_PASSWORD=postgres -p 5433:5432 -v pgdata:/var/lib/postgresql/data -d postgres:13

docker exec -it postin psql -d postgres -U postgres
#+end_src
** Container compose
#+begin_src yaml
version: "3.9"

services:
  database:
    image: postgres:latest
    restart: always
    env_file:
      - .env/development/database
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5442:5432"

volumes:
  db_data:
#+end_src



#+begin_src sql
create unlogged table if not exists categories (
pk int GENERATED ALWAYS AS IDENTITY
,title text NOT NULL
,description text
,PRIMARY KEY( pk )
,UNIQUE ( title )
);
#+end_src
