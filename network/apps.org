#+TITLE: Network cli apps

* nslookup
* ping
* resolvectl
** status
* lsof
#+begin_src shell
lsof -i tcp:7889
#+end_src
* wget
* ngrep
* ssh
** --
end of command line flags

It tells ssh or any other valid shell command not to try to parse what comes after command line options

#+begin_src shell

ssh nixcraft@server1.cyberciti.biz -- command1 --arg1 --arg2

#+end_src

 This ensures that command1 will accept --arg1 and --arg2 (or -opt1) as command-line arguments.
* networkmanager
** radio
** device
*** wifi
#+begin_src shell
nmcli rescan
nmcli list
nmcli connect SSID-Name wireless-password
#+end_src

* ping
#+begin_src shell
ping 1.1
#+end_src
* ss
ss is used to dump socket statistics. It allows showing information similar to netstat.
It can display more TCP and state information than other tools.


|    |              |
|----+--------------|
| -s |              |
| -l |              |
| -p |              |
| -t | TCP sockets  |
| -u | UDP sockets  |
| -w | raw sockets  |
| -x | unix sockets |

Established connections

#+begin_src conf
ss -o state established '( dport = :smtp or sport = :smtp )'
ss -o state established '( dport = :http or sport = :http )'
#+end_src

IPv4/IPv6

#+begin_src shell
ss -tl -f inet

# ipv6 only
ss -tl6
#+end_src

* dig
* ip

Neighbor Discovery

|           |   |
|-----------+---|
| Stale     |   |
| Permanent |   |
| Reachable |   |
| Failed    |   |

#+begin_src shell
ip -6 neigh show
#+end_src
* ifconfig
configure a network interface
* whois
* host
* dig
* iwd
#+begin_src shell
iwctl device list
iwctl station device scan
iwctl station YOURDEVICE scan
iwctl --passphrase PASSPHRASE station DEVICE connect SSID

iwctl station device get-networks

iwctl station YOURDEVICE disconnect
#+end_src

#+begin_src shell
ip a
iw dev

ip link set wlp2s0 up

iwlist scan
#+end_src

** debian
add to /etc/network/interfaces (man interfaces) *Debian-only*

#+begin_src shell
iface wlp2s0 inet dhcp
      wpa-ssid ESSID
      wpa-psk PASSWORD
#+end_src

Bring up your interface and verify the connection:

#+begin_src shell
ifup wlp2s0
iw wlp2s0 link
ip a
#+end_src
* dhcpd
* iw
* wpa_supplicant
* nmap
* nmcli
|                               |                                                                |
|-------------------------------+----------------------------------------------------------------|
| radio wifi on                 | Enable Your Wi-Fi Device                                       |
| dev status                    | Status                                                         |
| dev wifi list                 | Lisit available SSID                                           |
| dev wifi connect <SSID>       | connect to SSID                                                |
| --ask dev wifi connect <SSID> | password is provided in a manager to avoid dirty shell history |
| con show                      | list saved connections                                         |
| con down <SSID>               | disconnect of SSID                                             |
| con up <SSID>                 | reconnect to SSID                                              |
|                               |                                                                |

network manager wont work if /etc/network/interface is set to any device, remove it and procced again

# nmcli radio
WIFI-HW  WIFI     WWAN-HW  WWAN    
enabled  enabled  enabled  enabled 
# nmcli device
DEVICE  TYPE      STATE         CONNECTION 
wlan0   wifi      disconnected  --         
eth0    ethernet  unavailable   --         
lo      loopback  unmanaged     --         

Then to actually connect to a wireless AP:

# nmcli device wifi rescan
# nmcli device wifi list
# nmcli device wifi connect SSID-Name --ask

* nslookup
* route
* netstat
|        |   |
|--------+---|
| -natp  |   |
| -tulpn |   |

* netcat
* tcpdump
Tcpdump  prints  out  a description of the contents of packets on a network interface that match the Boolean expres‐
sion; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and fractions of
a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for
later analysis, and/or with the -r flag, which causes it to read from a saved packet file rather than to read  pack‐
ets  from  a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet
files. In all cases, only packets that match expression will be processed by tcpdump.


** HTTP GET
tcpdump -i any -s 0 -A 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x47455420'
** HTTP POST:
tcpdump -i any -s 0 -A 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504F5354'
* ethtool
* telnet
The telnet command is used for interactive communication with another host using the TELNET protocol. It begins in
command mode, where it prints a telnet prompt ("telnet> "). If telnet is invoked with a host argument, it performs an
open command implicitly; see the description below.

* rlogin
* traceroute
traceroute tracks the route packets taken from an IP network on their way to a given host. It utilizes the IP protocol's time to live (TTL) field and attempts to elicit an ICMP TIME_EXCEEDED response from each gateway along the path to the host.
* ethtool
* arp
Arp manipulates or displays the kernel's IPv4 network neighbour cache. It can
add entries to the table, delete one or display the current content.

ARP stands for Address Resolution Protocol, which is used to find the
media access control address of a network neighbour for a given IPv4
Address.

- IPv4

|    |                                                                                             |
|----+---------------------------------------------------------------------------------------------|
| -a | Use alternate BSD style output format (with no fixed columns).                              |
| -n | shows numerical addresses instead of trying to determine symbolic host, port or user names. |

* socat
Socat  is  a  command line based utility that establishes two bidirectional byte streams and transfers data between them. Be‐
cause the streams can be constructed from a large set of different types of data sinks and sources (see address  types),  and
because lots of address options may be applied to the streams, socat can be used for many different purposes.

#+begin_src shell
socat tcp-listen:7889,bind=127.0.0.1 stdout &
#+end_src

* wireshark
* ngrep
* iftop
* nethogs
