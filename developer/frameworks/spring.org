#+TITLE: Spring Framework

* Progress
** Books
| name                  | chapter                                           | @                                    |
|-----------------------+---------------------------------------------------+--------------------------------------|
| FullStack Spring Boot | 3 Using JPA to Create and Access a Database       | Creating CRUD repositories           |
| Spring Up & Running   | 5 Configuring and Inspecting Your Spring Boot App |                                      |
| Spring in Action      | 2 Developing web applications                     | 2.5 Choosing a view template library |

** SLOC
| Source Code      | folder | file | @ |
|------------------+--------+------+---|
| spring framework |        |      |   |
| spring-boot      |        |      |   |

* Controller
Class that handles requests and responds with information of some sort.

*@Controller*

* View
** JSP
* Validation
#+begin_src java
import javax.validation.Valid;
import org.springframework.validation.Errors;
#+end_src

@notNully

#+begin_src java
@Size(min=5, message="Name must be at least 5 characters long")
#+end_src

#+begin_src java
@NotBlank(message="Zip code is required")
#+end_src

#+begin_src java
// hibernate
@CreditCardNumber(message="Not a valid credit card number")
#+end_src

#+begin_src java
@Pattern(regexp="^(0[1-9]|1[0-2])([\\/])([2-9][0-9])$", message="Must be formatted MM/YY")
#+end_src

#+begin_src java
@Digits(integer=3, fraction=0, message="Invalid CVV")
#+end_src
* Repository
*@repository*
Declares that it should be automatically discovered by Spring compo-
nent scanning and instantiated as a bean in the Spring application context.

*autowired*

- 4.3: single constructor classes require only one @autowire annotation

*CrudRepository*

*JPARepository*

* Services
*@Service*

** Database
*@Entity*
Entities in JPA are nothing but POJOs representing data that can be persisted to the database. An entity represents a table stored in a database. Every instance of an entity represents a row in the table.

Defined in javax.persistence




** JDBC
|             |                          |
|-------------+--------------------------|
| artifact-id | spring-boot-starter-jdbc |


#+begin_src java
private JdbcTemplate jdbcTemplate;
public Optional<Ingredient> findById(String id) {
  List<Ingredient> results =
      jdbcTemplate.query("select id, name, type from Ingredient where id=?",
                         this::mapRowToIngredient, id);
  return results.size() == 0 ? Optional.empty() : Optional.of(results.get(0));
}
private Ingredient mapRowToIngredient(ResultSet row, int rowNum)
    throws SQLException {
  return new Ingredient(row.getString("id"), row.getString("name"),
                        Ingredient.Type.valueOf(row.getString("type")));
}
#+end_src

*Templates*



** JPA
* Properties
- application.properties or application.yml

* Model
* Toolings
** Containers
*** In-line run book examples
#+begin_src shell
podman run --name taco2 -it -v $PWD:/app -w /app -p 8080:8080 openjdk:17-jdk ./mvnw spring-boot:run
#+end_src
* Mapping
** @RequestMapping
@RequestMapping
specifies that any request-handling methods in this controller
will handle requests whose path begins with /orders. When combined with the
method-level

#+begin_src java
@RequestMapping(value = "/coffees", method = RequestMethod.GET)
#+end_src

*@GetMapping*
#+begin_src java
    @GetMapping("/coffees")
    Iterable<Coffee> getCoffees() {
        return coffees;
    }

#+end_src

*@PostMapping*
*@PutMapping*
*@PatchMapping*
*@DeleteMapping*


@RequestMappingGeneral-purpose
 request handling
@GetMappingHandles
HTTP GET requests
@PostMappingHandles
HTTP POST requests
@PutMappingHandles
 HTTP PUT requests
@DeleteMappingHandles
 HTTP DELETE requests
@PatchMappingHandles
 HTTP PATCH requests

* Test
*@WebMvcTest*
* Annotations
*@SpringBootApplication*


*@SpringBootConfiguration*
Designates this class as a configuration class.

*@EnableAutoConfiguration*
Enables Spring Boot automatic configuration.

*@ComponentScan*
Enables component scanning.

*@Component*

*@ComponentScan*

*@Controller*

* Spring Landscape
** Spring Initializr
https://start.spring.io/
** Spring Framework
** Spring Boot
*** Test
*@SpringBootTest*
** Spring Data
** Spring Security
** Spring Integration
** Spring Batch
** Spring Cloud
** Spring Native
