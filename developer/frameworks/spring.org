#+TITLE: Spring Framework

* Progress
** Books
| name                  | chapter                                           | @                                    |
|-----------------------+---------------------------------------------------+--------------------------------------|
| Spring in Action      | 2 Developing web applications                     | 2.5 Choosing a view template library |
| Spring Up & Running   | 5 Configuring and Inspecting Your Spring Boot App |                                      |
| FullStack Spring Boot | 9 Useful Third-Party Components for React         |                                      |

** SLOC
| Source Code      | folder | file | @ |
|------------------+--------+------+---|
| spring framework |        |      |   |
| spring-boot      |        |      |   |

* Model
An object that ferries data between a controller and whatever view is charged with rendering that data.

Data that’s placed in Model attributes is copied into the servlet request attributes, where the
view can find them and use them to render a page in the user’s browser.

*@ModelAttribute*
Binds a method parameter or method return value to a named model attribute, and then exposes it to a web view.

* View
** JSP
* Controller
Class that handles requests and responds with information of some sort.

*@Controller*
Identify class as a controller and to mark it as a candidate for component scanning

** Mapping
*@RequestMapping*
Specifies that any request-handling methods in this controller
will handle requests whose path begins with /orders. When combined with the
method-level

#+begin_src java
@RequestMapping(value = "/coffees", method = RequestMethod.GET)
#+end_src

*@GetMapping*
#+begin_src java
@GetMapping("/coffees")
Iterable<Coffee> getCoffees() {
    return coffees;
}
#+end_src

*@PostMapping*

*@PutMapping*

*@PatchMapping*

*@DeleteMapping*

*@RestController*
Combines @Controller with @ResponseBody


@RequestMappingGeneral-purpose
 request handling
@GetMappingHandles
HTTP GET requests
@PostMappingHandles
HTTP POST requests
@PutMappingHandles
 HTTP PUT requests
@DeleteMappingHandles
 HTTP DELETE requests
@PatchMappingHandles
 HTTP PATCH requests



** Session
*@SessionAttributes*
Indicates that the object that is put into the model in the class should be maintained in session.

* Validation
#+begin_src java
import javax.validation.Valid;
import org.springframework.validation.Errors;
#+end_src

@notNully

#+begin_src java
@Size(min=5, message="Name must be at least 5 characters long")
#+end_src

#+begin_src java
@NotBlank(message="Zip code is required")
#+end_src

#+begin_src java
// hibernate
@CreditCardNumber(message="Not a valid credit card number")
#+end_src

#+begin_src java
@Pattern(regexp="^(0[1-9]|1[0-2])([\\/])([2-9][0-9])$", message="Must be formatted MM/YY")
#+end_src

#+begin_src java
@Digits(integer=3, fraction=0, message="Invalid CVV")
#+end_src
* Repository
*@repository*
Declares that it should be automatically discovered by Spring compo-
nent scanning and instantiated as a bean in the Spring application context.

*autowired*

- 4.3: single constructor classes require only one @autowire annotation

*CrudRepository*

#+begin_src java
public interface CarRepository extends CrudRepository
    <Car, Long> {
    // Fetch cars by brand
    List<Car> findByBrand(String brand);

    // Fetch cars by color
    List<Car> findByColor(String color);

    // Fetch cars by year
    List<Car> findByYear(int year);
}
#+end_src

*JPARepository*

*PagingAndSortingRepository*

*@Query*
#+begin_src java
public interface CarRepository extends CrudRepository
    <Car, Long> {
    // Fetch cars by brand using SQL
    @Query(“select c from Car c where c.brand = ?1")
}
#+end_src

*@OneToMany*
*@ManyToOne*
- It is recommended that you use FetchType.LAZY for all associations.
- the toMany relationships defaults to FetchType.LAZY , but the toOne relationships, should defined if needed.
- lazy strategy means that when it is fetched from the database,  will be fetched when needed.
- eager means that the it will be fetched immediately.

#+begin_src java
// Car.java
@ManyToOne(fetch=FetchType.LAZY)
@JoinColumn(name="owner")
private Owner owner;
#+end_src

#+begin_src java
@OneToMany(cascade=CascadeType.ALL, mappedBy="owner")
private List<Car> cars;
#+end_src

*Queries*
#+begin_src java
    List<Car> findByBrand(String brand);
    List<Car> findByColor(String color);
    List<Car> findByYear(int year);
    List<Car> findByBrandAndModel(String brand, String model);
    List<Car> findByBrandOrColor(String brand, String color);
    List<Car> findByBrandOrderByYearAsc(String brand);
#+end_src

* Services
*@Service*

** Database
*@Entity*
Entities in JPA are nothing but POJOs representing data that can be persisted to the database. An entity represents a table stored in a database. Every instance of an entity represents a row in the table.

Defined in javax.persistence




** JDBC
|             |                          |
|-------------+--------------------------|
| artifact-id | spring-boot-starter-jdbc |


#+begin_src java
private JdbcTemplate jdbcTemplate;
public Optional<Ingredient> findById(String id) {
  List<Ingredient> results =
      jdbcTemplate.query("select id, name, type from Ingredient where id=?",
                         this::mapRowToIngredient, id);
  return results.size() == 0 ? Optional.empty() : Optional.of(results.get(0));
}
private Ingredient mapRowToIngredient(ResultSet row, int rowNum)
    throws SQLException {
  return new Ingredient(row.getString("id"), row.getString("name"),
                        Ingredient.Type.valueOf(row.getString("type")));
}
#+end_src

*Templates*



** JPA
* Properties
- application.properties or application.yml

* Toolings
** Containers
*** In-line run book examples
#+begin_src shell
podman run --name taco2 -it -v $PWD:/app -w /app -p 8080:8080 openjdk:17-jdk ./mvnw spring-boot:run
#+end_src
* Mapping
* Test
*@WebMvcTest*
* Annotations
*@SpringBootApplication*


*@SpringBootConfiguration*
Designates this class as a configuration class.

*@EnableAutoConfiguration*
Enables Spring Boot automatic configuration.

*@ComponentScan*
Enables component scanning.

*@Component*

*@ComponentScan*

*@Controller*

* Spring Landscape
** Spring Initializr
https://start.spring.io/
** Spring Framework
** Spring Boot
*** Test
*@SpringBootTest*
** Spring Data
** Spring Security
** Spring Integration
** Spring Batch
** Spring Cloud
** Spring Native
* Commands
#+begin_src shell
mvn spring-boot:run -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000"
#+end_src

#+begin_src yaml

application-production.yml
#+end_src

* Ops
** dockerfile
#+begin_src conf
# RUN mvn clean package -DskipTests
# FROM openjdk:17 AS runstage
# COPY --from=buildstage /app/target/pita-0.0.1-SNAPSHOT.jar /app/pita-0.0.1-SNAPSHOT.jar
# # EXPOSE 9966
# ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "pita-0.0.1-SNAPSHOT.jar"]
#+end_src
** compose
#+begin_src yaml
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/${DATABASE_NAME}
      SPRING_DATASOURCE_USERNAME: ${DATABASE_USER}
      SPRING_DATASOURCE_PASSWORD: ${DATABASE_PASSWORD}
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: create # switch from update to create at the initial start
  # profiles:
    # active: production


#+end_src
** compose-mysql
#+begin_src yaml
version: "3"

services:
  database:
    image: mysql:8
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_ROOT_PASSWORD=$DATABASE_PASSWORD
      - MYSQL_DATABASE=$DATABASE_NAME
    ports: 3307:$3306
    volumes: db:/var/lib/mysql

  backend:
    build: .
    env_file: .env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysqldb:3306/${DATABASE_NAME}?useSSL=false
      - SPRING_DATASOURCE_USERNAME=${DATABASE_USER}
      - SPRING_DATASOURCE_PASSWORD=${DATABASE_PASSWORD}
      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=org.mariadb.jdbc.Driver
    ports: 8081:8080
    depends_on: database
    restart: on-failure
    volumes:
      - ./src:/app/src
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  # frontend:
  #   build: .
  #   ports:
  #     - 8081:8080
  #   depends_on: backend

volumes:
  dbdata:

#+end_src
