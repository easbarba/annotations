#+TITLE: Vue.js

* Progress
** Books
| Books                           | Cap                         | @                                |
|---------------------------------+-----------------------------+----------------------------------|
| Vue.js by Example               |                             |                                  |
| Front-end development w/ Vue.js | 2                           | Deep Watching Concepts           |
| Fullstack Vue                   | II - Single-file components | Breaking the app into components |

** SLOC
| SLOC  | folder | file | @ |
|-------+--------+------+---|
| vuejs |        |      |   |
* Base
** Directives
*** v-bind
#+begin_src html
<article v-for="submission in submissions" v-bind:key="submission.id"
  class="media">
  <!-- Rest of the submission template -->
</article>
#+end_src

#+begin_src html
<!-- // the full syntax -->
<img v-bind:src="submission.submissionImage" />
<!-- // the shorthand syntax -->
<img :src="submission.submissionImage" />
#+end_src

*** v-for
#+begin_src html
<article v-for="submission in submissions" class="media">
  <!-- Rest of the submission template -->
</article>
#+end_src
*** v-on
create event listeners within the DOM.

#+begin_src html
<div class="media-right">
  <span class="icon is-small" v-on:click="upvote(submission.id)">
    <i class="fa fa-chevron-up"></i>
    <strong class="has-text-info">{{ submission.votes }}</strong>
  </span>
</div>
#+end_src

#+begin_src html
<!-- // the full syntax -->
<span v-on:click="upvote(submission.id)"></span>
<!-- // the shorthand syntax -->
<span @click="upvote(submission.id)"></span>
#+end_src
*** v-if
** Data Properties (Props)

#+begin_src html
<template>
    <div>{{color}}</div>
</template>
<script>
    export default {
        data() {
          return {
            color: 'red'
          }
        }
    }
</script>
#+end_src
** Components
Vue components are Vue instances.

-  create a Vue component calling the app.component() method.

*** props
*** hooks
*beforeCreate*

*created*

*beforeMount*

*mounted*

*beforeUpdate*


*updated*

*** Single-File Components
** Templates
** Data Binding
** Directives
*v-text*

*v-once*

*v-html*

#+begin_src html
<template>
  <div>
    <h1 v-once v-text="text">Loading...</h1>
    <h2 v-html="html" />
  </div>
</template>
<script>
export default {
  data() {
    return {
      // v-text
      text: 'Directive text',
      // v-html
      html: 'Stylise</br>HTML in<br/><b>your data</b>',
    }
  },
}
</script>
#+end_src

*v-bind*

*v-if*

*v-else*

*v-else-if*

#+begin_src html
<template>
  <div>
    <h1 v-if="false" v-once v-text="text">Loading...</h1>
    <h2 v-else-if="false" v-html="html" />
    <a
      v-else
      :href="link.url"
      :target="link.target"
      :tabindex="link.tabindex"
      v-text="link.title"
    />
  </div>
</template>
#+end_src

*v-show*

#+begin_src html
<template>
  <div>
    <h1 v-show="true" v-once v-text="text">Loading...</h1>
    <h2 v-show="false" v-html="html" />
    <a
      :href="link.url"
      :target="link.target"
      :tabindex="link.tabindex"
      v-text="link.title"
    />
  </div>
</template>
#+end_src

*v-for*

#+begin_src html
<ul>
    <li v-for="n in 5" :key="n">{{ n }}</li>
</ul>
#+end_src

#+begin_src html
<template>
  <div>
    <h1>Looping through arrays</h1>
    <ul>
      <li v-for="(item, n) in interests" :key="n">
        {{ item }}
      </li>
    </ul>
  </div>
</template>
<script>
export default {
  data() {
    return {
      interests: ['TV', 'Games', 'Sports'],
    }
  },
}
</script>
#+end_src

*v-model*

#+begin_src html
<template>
    <input v-model="name" />
</template>
<script>
      export default {
        data() {
          return {
            name: ''
          }
        }
      }
</script>
#+end_src
** Computed Properties
** Computed Setters
** Watchers

* Commands
** create
#+begin_src
vue create meh
#+end_src
** serve
* Ops
** Container
*New Vue 3 project*
#+begin_src shell
podman run --rm -it -w /app -p 8081:5173 node:18 bash
npm init vue@latest
#+end_src

#+begin_src shell
#+end_src


#+begin_src shell
podman run --rm -v $(pwd):/app/ -v /app/node_modules -w /app -p 8081:5173 node:18 bash -c 'npm install && npm run lint && npm run dev --host'
#+end_src

#+begin_src shell
podman run --rm -d -v $(pwd):/app/ -v /app/node_modules -w /app -p 8081:8080 node:18 bash -c 'yarn && yarn && yarn serve'
#+end_src
* Carrer
** Jobs
*** Xteam
Most Important

    Expert level experience with Vue.js
    Strong overall experience with JavaScript
    Solid experience with Vuex, TypeScript, and/or Nuxt.js and/or Vuetify
    Write high-performance, reusable code for UI components
    Experience with JavaScript testing frameworks
    Experience with unit testing
    Solid HTML/CSS/JavaScript basis
    Passionate about writing beautiful and clean code

Nice to have

    Experience with continuous integration and deployment (CI/CD) environment
    Experience working remotely
    Familiar/involved with open source projects
* Instruction
#+begin_src markdown
This template should help get you started developing with Vue 3 in Vite.

## Recommended IDE Setup

[VSCode](https://code.visualstudio.com/) + [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) (and disable Vetur) + [TypeScript Vue Plugin (Volar)](https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin).

## Type Support for `.vue` Imports in TS

TypeScript cannot handle type information for `.vue` imports by default, so we replace the `tsc` CLI with `vue-tsc` for type checking. In editors, we need [TypeScript Vue Plugin (Volar)](https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin) to make the TypeScript language service aware of `.vue` types.

If the standalone TypeScript plugin doesn't feel fast enough to you, Volar has also implemented a [Take Over Mode](https://github.com/johnsoncodehk/volar/discussions/471#discussioncomment-1361669) that is more performant. You can enable it by the following steps:

1. Disable the built-in TypeScript Extension
    1) Run `Extensions: Show Built-in Extensions` from VSCode's command palette
    2) Find `TypeScript and JavaScript Language Features`, right click and select `Disable (Workspace)`
2. Reload the VSCode window by running `Developer: Reload Window` from the command palette.

## Customize configuration

See [Vite Configuration Reference](https://vitejs.dev/config/).

## Project Setup

```sh
npm install
```

### Compile and Hot-Reload for Development

```sh
npm run dev
```

### Type-Check, Compile and Minify for Production

```sh
npm run build
```

### Run Unit Tests with [Vitest](https://vitest.dev/)

```sh
npm run test:unit
```

### Run End-to-End Tests with [Cypress](https://www.cypress.io/)

```sh
npm run build
npm run test:e2e # or `npm run test:e2e:ci` for headless testing
```

### Lint with [ESLint](https://eslint.org/)

```sh
npm run lint
```
#+end_src
