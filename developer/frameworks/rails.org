#+TITLE: Ruby On Rails

* Progress
** Books
|                         |                           |                                 |
|-------------------------+---------------------------+---------------------------------|
| Sustainable Rails       | 8 Helpers                 |                                 |
| Agile WebDev w/ Rails 6 | 19 Active Record          | Subsetting the Records Returned |
| Ruby on Rails tutorial  | 6                         | Finding user objects            |
| Beginning Rails 6       | 11 Action Text            | Updating the Article View       |
| Rails Guides            | Active Record Validations | 2.12 validates_with             |
** Videos
|               |    |    |
|---------------+----+----|
|               |    |    |
| Paulo - Rails | 12 | 9m |

** SLOC
|       |                                      |                 |
|-------+--------------------------------------+-----------------|
| rails | actioncable/lib/action_cable/channel | broadcasting.rb |
* Cli
** about
** assets:
*assets:precompile*

*assets:clobber*

Clears public/assets completely

*assets:clean*

Allows for rolling deploys that may still be linking to an old
asset while the new assets are being built.

** console
- let access the app and helper instances.

*app*

#+begin_src ruby
app.root_path
app.get _
#+end_src

*helper*

#+begin_src ruby
helper.time_ago_in_words 30.days.ago # "about 1 month"
helper.my_custom_helper # "my custom helper"
#+end_src

*-e*

#+begin_src sh
bin/rails console -e staging
#+end_src

*--sandbox*

*examples*
                                                                                                                                       |
#+begin_src ruby
create(title: "foo", body: "bar", published_at: '2020-01-31')
a.save  / a.save!
a.new
A.count
A.find(3) / A.find([4,5])
A.first   / A.first.title
A.last
A.all / A.all.size / A.all.each { \a\ puts a.title }
A.order(:order) / A.order(:order :desc)
A.where(title: 'foo')
update_attributes(title: "foo", published_at: 1.day.ago)

a.x << x                                                          A.destroy(1) / .destroy([3,4])                                    rors                                                                                  |
                                                                                                                                                        |
a.errors.any? / a.errors.full_messages / a.errors.messages[:title]                                                                                      |
a.valid?
#+end_src

*** reload!
reloads the Rails application environment within your console session. You need
to call it when you make changes to existing code.
** database
| cmd                             | desc                                                                          |
|---------------------------------+-------------------------------------------------------------------------------|
| db-console                       |                                                                               |
| console                         |                                                                               |
| db:create                       |                                                                               |
| db:create:all                   | create test,production and development database                               |
| db:migrate                      | create schema                                                                 |
| db:rollback                     | rollback recently created schema                                              |
| db:load_config                  |                                                                               |
| db:check_protected_environments |                                                                               |
| db:truncate_all                 |                                                                               |
| db:system:change                | switch databases                                                              |
| db:seed                         |                                                                               |
| db:seed:replant                 | truncates tables of each database for current environment and loads the seeds |
| db:setup                        | recreate database and adds the seed data as you may expect.                   |
| db:reset                        | drop database, recreates it, loads the schema, and seeds your database        |
y
** dbconsole
*--db, [--database=DATABASE]*

Specifies the database to use.

#+begin_src sh
bin/rails dbconsole --database=animals
#+end_src
** db:
*db:migrate*
 VERSION=0
*db:create*
*db:truncate*
*db:version*
*db:schema_migrations*
** destroy

#+begin_src sh
destroy model Oops
destroy controller articles
destroy model Artile
#+end_src

** generate
*** resource
*** scaffold
full set of model, database migration for that model, controller to manipulate
it, views to view and manipulate the data, and a test suite

#+begin_src sh
generate scaffold Article <options>
#+end_src

*** models
| what   | how                                                                    | desc |
|--------+------------------------------------------------------------------------+------|
| models | generate model <Name>                                                  |      |
|        | destroy controller articles                                            |      |
|        | destroy model Artile                                                   |      |
| a      |                                                                        |      |
|        | generate scaffold Article title:string body:text published_at:datetime |      |
|        |                                                                        |      |

*** channels
#+begin_src
generate channels <name>
#+end_src
** new
| how               | desc                                              |
+-------------------+---------------------------------------------------|
| –d or --database= | use the database management system of your choice |
| new <name>        |                                                   |


#+begin_src shell
rails _6.1.5.1_ new app --database=postgresql
#+end_src

** test
*test:controllers*

** routes
*-g GROUP, --grep=GROUP*
*-E, --expanded*
*-c CONTROLLER, --controller=CONTROLLER*

** server
*-e*

#+begin_src shell
bin/rails server -e development
bin/rails server -e test
bin/rails server -e production
#+end_src

|                               |   |
|-------------------------------+---|
| --binding=[PORT] or -b [PORT] |   |

** misc
| what       | how         | desc |
|------------+-------------+------|
| destroy    | destroy / d |      |
| belongs_to |             |      |

** notes
Searches through your code for comments beginning with a specific keyword.

*--annotations*
#+begin_src sh
notes --annotations FIXME RELEASE
#+end_src

*tags*
*directories*

** tasks
Rails 6 uses rake as task runner

|              |                         |
|--------------+-------------------------|
| --task or -T | list all task available |
|              |                         |

** tmp:
The Rails.root/tmp directory is, like the *nix /tmp directory, the holding place
for temporary files like process id files and cached actions.

*tmp:cache:clear*
clears tmp/cache.

*tmp:sockets:clear*
clears tmp/sockets.

*tmp:screenshots:clear*
 clears tmp/screenshots.

*tmp:clear*
 clears all cache, sockets, and screenshot files.

*tmp:create*
 creates tmp directories for cache, sockets, and pids.

** log
|                  |   |
|------------------+---|
| :clear LOGS=test |   |

** migration
|                    |   |
|--------------------+---|
| AddXXXToTABLE      |   |
| RemoveXXXFromTABLE |   |

** initializers
** middleware
** stats
** secret
** time:zones:all
** webpacker
#+begin_src sh
webpacker:compile
#+end_src
** rake tasks

#+begin_src sh
bin/rails generate task
#+end_src


** runner
runs ruby code in the context of rails non-interactively.

#+begin_src sh
bin/rails runner "Model.long_running_method"
#+end_src
* bin
Useful personal scripts

- brakeman
- bundle-audit
- lograge

** run
correctly forward port in a docker/wm setup
#+begin_src shell
#!/usr/bin/env bash
set -e

# We must bind to 0.0.0.0 inside a
# Docker container or the port won't forward
bin/rails server --binding=0.0.0.0
#+end_src
** setup
** rails
** ci
run tests and quality checks.

- check `bin/setup` idempodency by running that script twice to check.
-

#+begin_src shell
bin/setup # perform the actual setup
bin/setup # ensure setup is idempotent
bin/ci # perform all checks
#+end_src

* Controller

#+begin_src ruby
rails g controller ControllerName [action action] [options]
#+end_src

- name its controller as CamelCase, MixedCase or snake_case
- every specified actions generates an empty method in the controller and a template in app/views/#{controller_name}.

** Concerns

- any module that extends ActiveSupport::Concern module
- share common code (even as little as a single method!)

#+begin_src ruby
# app/models/concerns/trashable.rb

module Trashable
  extend ActiveSupport::Concern

  included do
    scope :existing, -> { where(trashed: false) }
    scope :trashed, -> { where(trashed: true) }
  end

  def trash
    update_attribute :trashed, true
  end
end
#+end_src

** methods
*layout*

#+begin_src ruby
layout 'my_layout' # Will use a layout in app/views/layouts/my_layout.
#+end_src

rescue_from

#+begin_src ruby
rescue_from ActiveRecord::RecordNotFound, with: :invalid_cart
#+end_src

* Views
** HTML Templates
*Guidelines*

- Mark up all content and controls using semantic HTML; use div and span to solve layout and styling problems.
- Build templates around the controller’s resource as a single instance variable.
- Extract shared components into partials
- ERB is fine.


Ideally, Expose One Instance Variable Per Action

Name the Instance Variable After the Resource

*<% %>*
evaluation embedding tags
execute code inside

*<%= %>*
output embedding tags
execute code inside and insert the result into the template

*image_tag*

- returns an HTML image tag for the source. The source can be a full path, a file, or an Active Storage attachment.

#+begin_src html
<%= image_tag article.cover_image.variant(resize_to_limit: local_assigns.fetch(:cover_image_options, [200, 200])) %>
#+end_src

*cycle*

- toggling between names on successive lines

#+begin_src html
<tr class="<%= cycle('list_line_odd', 'list_line_even') %>">
#+end_src

*truncate*

- display the first N characters

#+begin_src html
<%= truncate(strip_tags(product.description), length: 80) %>
#+end_src

*provide*

#+begin_src ruby
<% provide :title, "Home" %>
#+end_src

*yield*

#+begin_src ruby
<% yield :title %>
#+end_src

*strip_tags*

- remove the HTML tags

*link_to*

- defaults to using HTTP GET

#+begin_src html
<li><%= link_to 'Show', product %></li>
#+end_src

*sanitize*

#+begin_src html
<%= sanitize(product.description) %>
#+end_src

*button_to*

- POST

#+begin_src ruby
#+end_src

*csrf_meta_tags*

*javascript_pack_tag*

*stylesheet_link_tag*

*sprintf*

*number_to_currency*

Formats a number into a currency string (e.g., $13.65). You can customize the
format in the options hash.


*partials*
- look for _* files

#+begin_src html
<%= render 'header', title: 'My Blog' %>
<%= render @article %>
<%= render 'articles/article', article: @article %>
#+end_src

*Collections*

- automatically loops across this collection and renders the partial of every object inside that array accordingly.

#+begin_src html
<%= render @articles
<!-- Same as, but w/ better perf than -->

<% @articles.each do |object| %>
  <%= render object %>
<% end %>

#+end_src
** partials
- meant to re-usable elements not code organization

*locals variables*

#+begin_src html
<%= render partial: "rating", locals: { widget: @widget } %>

# app/views/widgets/_rating.html.erb

<%= button_to rating,
    widget_ratings_path,
    params: {
    widget_id: widget.id,
    rating: rating
}
%>
#+end_src

* Models
|                   |                            |
|-------------------+----------------------------|
| naming convention | CamelCased or snake_cased  |


*Generators*

#+begin_src ruby
bin/rails generate model Product name:string description:text
#+end_src

#+begin_src ruby
class CreateProducts < ActiveRecord::Migration[7.0]
  def change
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end
end
#+end_src

*Passing Modifiers*

#+begin_src sh
bin/rails generate migration AddDetailsToProducts 'price:decimal{5,2}' supplier:references{polymorphic}
#+end_src

#+begin_src ruby
class AddDetailsToProducts < ActiveRecord::Migration[7.0]
  def change
    add_column :products, :price, :decimal, precision: 5, scale: 2
    add_reference :products, :supplier, polymorphic: true
  end
end
#+end_src

** validations
make sure a user has entered something into a field.

#+begin_src ruby
valdates :teacher_id, uniqueness: { scope: [:semester_id, :class_id] }
#+end_src

*length*

#+begin_src ruby
validates :email, length: { in: 5..50 }
#+end_src

*:presence*

#+begin_src ruby
class Person < ApplicationRecord
  validates :title, :body, presence: true
  validates :name, length: { minimum: 2 }
  validates :bio, length: { maximum: 500 }
  validates :password, length: { in: 6..20 }
  validates :registration_number, length: { is: 6 }
end
#+end_src

*:uniqueness*
validates whether the value of the specified attribute is unique across the system.

#+begin_src ruby
validates :email, uniqueness: true
valdates :teacher_id, uniqueness: { scope: [:semester_id, :class_id] }
#+end_src

*:length*

#+begin_src ruby
validates :email, length: { in: 5..50 }
#+end_src

*:format*
Validates the attributes' values by testing whether they match a given regular expression


#+begin_src ruby
validates :email, format: { with:  /\A[^@][\w.-]+@[\w.-]+[.][a-z]{2,4}\z/i }
#+end_src

*:confirmation*

#+begin_src ruby
validates :password, confirmation: true
validates :email_confirmation, presence: true

# views
<%= text_field :person, :email %>
<%= text_field :person, :email_confirmation %>


validates :email, confirmation: { case_sensitive: false }

#+end_src

*:acceptance*

*validates_associated*

#+begin_src ruby
class Library < ApplicationRecord
  has_many :books
  validates_associated :books
end
#+end_src

*exclusion*

#+begin_src ruby
class Account < ApplicationRecord
  validates :subdomain, exclusion: { in: %w(www us ca jp),
    message: "%{value} is reserved." }
end
#+end_src

*inclusion*
Validates that the attributes' values are included in a given set.

#+begin_src ruby
class Coffee < ApplicationRecord
  validates :size, inclusion: { in: %w(small medium large),
    message: "%{value} is not a valid size" }
end
#+end_src

*numericality*

#+begin_src ruby
class Player < ApplicationRecord
  validates :points, numericality: true
  validates :games_played, numericality: { only_integer: true }
end
#+end_src

*absence*

*validates_with*

** methods
*create_table*

no

#+begin_src ruby
create_table :products do |t|
  t.string :name
end
#+end_src


** concerns
- any module that extends ActiveSupport::Concern module
- share common code (even as little as a single method!)

** best practices
*Fat Models*

An intelligent model like this is often called fat. Instead of performing model-related logic in
other places (i.e., in controllers or views), you keep it in the model, thus making it fat. This
makes your models easier to work with and helps your code stay DRY.
* Helpers
help views by providing a convenient location to encapsulate code that would
otherwise clutter the view and violate the terms of the MVC. They offer a middle
ground between controllers and views and help to keep your application organized
and easy to maintain.

- export methods to be available to a view.
- can also be added via the helper method in a controller
- methods in app/helpers/application_helper.rb will be included and available to all your views.
- exist in a single global namespace

** FormHelper
*label*
#+begin_src html
<label for="article_title">Title</label>
#+end_src

*text_field*

#+begin_src html
<input type="text" name="article[title]" id="article_title" />
<input class="large" type="text" name="article[title]" id="article_title" />
#+end_src

*text_area*

#+begin_src html
<textarea name="article[body]" id="article_body"></textarea>
#+end_src

*datetime_select*

#+begin_src html
<input type="submit" name="commit" value="Create Article" data-disable-with="Create Article" />
#+end_src

** FormTagHelper
** Number helpers
** Text helpers

#+begin_src ruby
simple_format
#+end_src
** URL helpers
*link_to*(name, options={}, html_options={})

#+begin_src ruby
link_to 'New', new_article_path, id: 'new_article_link'
link_to 'New', {controller: 'articles', action: 'new'}, class: 'large'
link_to 'New', {controller: 'articles', action: 'new'}, {class: 'large'}
#+end_src

*ajax*

#+begin_src ruby
<%= link_to "new comment", new_article_comment_path(@article), remote: true, id: 'new_comment_link' %>
#+end_src
* Session
- implemented as a hash
- flash is a session

#+begin_src ruby
session[:account_id] = @account.id
session[:account_id] # => 1

session['message'] = "Hello world!"
session['message'] # => "Hello world!"
#+end_src

* Routes
The Rails router recognizes URLs and dispatches them to a controller's action,
or to a Rack application. It can also generate paths and URLs, avoiding the need
to hardcode strings in your views.

- localhost:xxxx/rails/info/routes

*Named routes*

#+begin_src ruby
get '/teams/search/:query', to: 'teams#search', as: 'search' #search_url and search_path
#+end_src

*only*

#+begin_src ruby
resources :articles, only: [:index, :show]
#+end_src

*Except*

Create all of the standard routes except those listed

#+begin_src ruby
resources :articles, except: [ :destroy ]
#+end_src

*Redirect*

#+begin_src ruby
get "/amazing", to: redirect("/widgets")
#+end_src

*Inline variable* (:foo)

#+begin_src ruby
# :query as an inline variable
get '/teams/search/:query', to: 'teams#search' # http://example.com/teams/search/toronto
#+end_src

#+begin_src ruby
get '/teams/home', to: 'teams#index' # http://example.com/teams
#+end_src

*Named routes*

#+begin_src ruby
get '/teams/search/:query', to: 'teams#search', as: 'search'
#+end_src

*Root*

#+begin_src ruby
root to: "articles#index"
#+end_src

*Nested resources*

- resources should never be nested more than 1 level deep.

#+begin_src ruby
resources :articles do
  resources :comments
end
#+end_src

*Resource* (single)

- no index (6 paths)

#+begin_src ruby
resource :session
#+end_src

*Namespacing*

#+begin_src ruby
namespace :customer_service do
  resources :widgets, only: [ :show, :update, :destroy ]
end
#+end_src

# Don’t Create Custom Actions, Create More Resources

*scope block*

#+begin_src ruby
scope module: 'admin' do
  resources :articles, :comments
end

# or
resources :articles, module: 'admin'

# route /admin/articles to ArticlesController
scope '/admin' do
  resources :articles, :comments
end
#same
resources :articles, path: '/admin/articles'
#+end_src

*member*

#+begin_src ruby
resources :articles do
  member do
    post :notify_friend
  end
  resources :comments
end
#+end_src

*More*

#+begin_src ruby
get 'profile', action: :show, controller: 'users'

resource :geocoder
resolve('Geocoder') { [:geocoder] }
#+end_src

* Parameters
- hash-like

*Permit*

- specify which parameters are acceptable

#+begin_src ruby
params.require(:user).permit(:email, :password, :password_confirmation
#+end_src

* Hook
- a method that Rails calls automatically at a given point in an object’s life.

*before_destroy*

* Errors
- can be associated with individual attributes

#+begin_src ruby
errors.add(:base, 'Line Items present') # associated error with the base object.
#+end_src

* Environment
|                      |                                                |
|----------------------+------------------------------------------------|
| RAILS_ENV=production |                                                |
| DATABASE_URL         | database credentials                           |
| SECRET_KEY_BASE      | general secret key used for encrypting cookies |

* Logger
- live log feed: tail -f log/development.log
-  Every controller has a logger attribute.
** Methods
|       |   |
|-------+---|
| error |   |
| debug |   |
| warn  |   |

#+begin_src ruby
Rails.logger.debug "This will only show in development"
Rails.logger.warn "This will show in all environments"
#+end_src

* Debugging
** Views

** <% console %>
 abre um console na página que vc coloca <% console %> aí vc pode chamar as variáveis daquela página pra entender o que tá Rolando
#+begin_src ruby
<% console %>
#+end_src

* Action Cable
- create a channel, broadcast some data, and receive the data.
- use the two-way WebSocket protocol
- support multiple streams
- its safe to disable request forgery if it will be sending only data over this channel, and not processing commands,
* Active Record
- Single-Table Inheritance
- maps tables to classes, table rows to objects, and table columns to object attributes.
- Class names are singular; table names are plural.
- Tables contain an identity column named id.

** Methods

#new | #create

#+begin_src ruby
# new
Article.new(title: "Introduction to Active Record",
body: "Active Record is Rails's default ORM..", published_at: Time.zone.now)

# create
Article.create(title: "RubyConf 2020", body: "The annual RubyConf will
take place in..", published_at: '2020-01-31')

# then save
article.save
#+end_src

- Inspecting

#+begin_src ruby
article.new_record?
article.attributes
article.id
#+end_src

- Order

#+begin_src ruby
Article.order(:title)
Article.order(published_at: :desc)
Article.order(published_at: :asc)
#+end_src

- Conditions

#+begin_src ruby.
Article.where(title: 'RailsConf').first
#+end_src

- Updating

#+begin_src ruby
article.update(title: "RailsConf2020", published_at: 1.day.ago)
article.update!(title: "RailsConf2020", published_at: 1.day.ago)
#+end_src

- Deleting

- destroy style works on the instance
- delete style operates on the class
- delete must be supplied with an array object explicitly

#+begin_src ruby
Article.last.destroy
Article.destroy(2)
Article.destroy([2,3])

article.destroy

# Remove the row immediately from the database

Article.delete(4) # don’t instantiate or perform callbacks on the object they’re deleting
Article.delete_all
Article.delete_by("published_at < '2011-01-01'") # with conditions
Article.delete([5, 6])
#+end_src

- more

#+begin_src ruby
article.valid?
article.errors.size
article.errors.messages[:title]
article.errors.full_messages

articles.size
Article.count
#+end_src

- #find

#+begin_src ruby
Article.find 3
Article.find [2,4]
Article.first
Article.last
Article.all
#+end_src

- #errors

#+begin_src ruby
article.errors.any?
article.errors.full_messages
article.errors.messages[:title]
article.errors.messages(:nonexistent) # []
article.errors.size
article.valid?
#+end_src

- #column_names

#+begin_src ruby
Order.column_names # ["id", "name", "address", "email", "pay_type", "created_at", "updated_at"]
#+end_src

-  #columns_hash

#+begin_src ruby
>> Order.columns_hash["pay_type"]
=> #<ActiveRecord::ConnectionAdapters::Column:0x000055afb7266a58
@name="pay_type", @sql_type_metadata=#<
ActiveRecord::ConnectionAdapters::SqlTypeMetadata:0x000055afb7266b98
@sql_type="integer", @type=:integer, @limit=nil, @precision=nil,
@scale=nil>, @null=true, @default=nil, @default_function=nil,
@collation=nil, @comment=nil>
#+end_src

- #before_type_cast

#+begin_src ruby
Order.first.pay_type
 #=> "Check", a string
Order.first.pay_type_before_type_cast
 #=> 0, an integer
#+end_src

** Default Columns
- created_at, created_on, updated_at, updated_on

Rails applications conventionally use the _on suffix for date columns and the
_at suffix for columns that include a time.

- id
- xxx_id
- xxx_count

** Associations
*one-to-zero-or-one*

Implemented using a foreign key in one row in one table to reference
at most a single row in another table.

#+begin_src ruby
class Order < ActiveRecord::Base
  has_one :invoice
  # . . .
end

class Invoice < ActiveRecord::Base
  belongs_to :order
  # . . .
end
#+end_src

*one-to-many*

#+begin_src ruby
# parent object
class Order < ActiveRecord::Base
  has_many :line_items
# . . .
end

class LineItem < ActiveRecord::Base
  belongs_to :order
# . . .
end
#+end_src

*many-to-many*
- symmetrical

#+begin_src ruby
class Category< ActiveRecord::Base
  has_and_belongs_to_many :products
  # . . .
end

class Product< ActiveRecord::Base
  has_and_belongs_to_many :categories
  # . . .
end
#+end_src

*more examples*

#+begin_src ruby
class Message < ApplicationRecord
  has_many :attachments
end

class Attachment < ApplicationRecord
  belongs_to :message
end

user = User.create(email: "user@example.com", password: "secret"
profile = Profile.create(name: "John Doe", bio: "Ruby developer trying to learn Rails")
profile.user = user
user.profile.destroy
user.create_profile name: 'Jane Doe', color: 'pink'
user.build_profile(bio: 'eats leaves')
#+end_src

** exceptions
|                |                                             |
|----------------+---------------------------------------------|
| RecordNotFound | couldn’t find any record with the id given. |

** Validations
** Callbacks
*** before_create
*** after_create
*** before_save
*** after_save
*** before_destroy
*** after_destroy

** Migration
*drop_table*

drop existing migration table
#+begin_src
ActiveRecord::Migration.drop_table :articles
#+end_src

JoinTable

#+begin_src sh
bin/rails generate migration CreateJoinTableCustomerProduct customer product
#+end_src

#+begin_src ruby
class CreateJoinTableCustomerProduct < ActiveRecord::Migration[7.0]
  def change
    create_join_table :customers, :products do |t|
      # t.index [:customer_id, :product_id]
      # t.index [:product_id, :customer_id]
    end
  end
end
#+end_src

CreateXXX

** Filters
- before_create
- after_create
- before_save
- after_save
- before_destroy
- after_destroy

:only :except

#+begin_src ruby
before_action :authenticate, only: :destroy
#+end_src

skip

#+begin_src ruby
class ApplicationController < ActionController::Base
  before_action :authenticate_with_token
end

class PublicController < ApplicationController
  # We don't want to check for a token on this controller
  skip_before_action :authenticate_with_token
end
#+end_src

** Query Interface
** Finding
*** SQL Syntax
#+begin_src ruby
Obj.where(title: 'AwesomeWM is really awesome')
#+end_src
*** Array Condition Syntax
#+begin_src ruby
Article.where("published_at < ?", Time.now)
Article.where("published_at < ?", Time.now).to_sql # inspect the issued SQL statement

Article.where("title LIKE :search OR body LIKE :search", {search: '%association%'})
Article.where("created_at > '2020-02-04' AND body NOT LIKE '%model%'")
#+end_src

*** Association Proxies
- Chain together multiple calls to Active Record

#+begin_src ruby
User.first.articles.all
current_user.articles.find(1)
# creates a new article for the current_user.
current_user.articles.create(title: 'Private', body: ‘Body here..’)
#+end_src
*** more
#+begin_src ruby
Article.order("published_at DESC")
Article.limit(1)
Article.joins(:comments)
Article.includes(:comments)
Article.order("title DESC").limit(2)

#+end_src
*** methods
**** where
Specifies the conditions in which the records are returned as a WHERE SQL
fragment.
#+begin_src ruby
Article.where("title = 'Advanced Active Record'")
#+end_src

**** find
**** findby
**** order
Specifies the order in which the records are returned as an ORDER BY SQL
fragment.

#+begin_src ruby
Article.order("published_at DESC")
#+end_src
**** limit
Specifies the number of records to be returned as a LIMIT SQL fragment.
#+begin_src ruby
Article.limit(1)
#+end_src
**** joins
Specifies associated tables to be joined in as a JOIN SQL fragment.
#+begin_src ruby
Article.joins(:comments)
#+end_src
**** includes
Specifies associated tables to be joined and loaded as Active Record objects in a JOIN SQL fragment.
#+begin_src ruby
Article.includes(:comments)
#+end_src
** Default Scope
Use this macro in your model to set a default scope for all operations on the model.

- will reset order everytime, costly.

#+begin_src ruby
default_scope { order :name }
#+end_src

** Named Scope
#+begin_src ruby
scope :published, -> { where.not(published_at: nil) }
scope :draft, -> { where(published_at: nil) }
scope :recent, -> { where('articles.published_at > ?', 1.week.ago.to_date) }
scope :where_title, -> (term) { where("articles.title LIKE ?", "%#{term}%") }
#+end_src
** Seeds
*** methods
#+begin_src ruby
.create({})
.create({})
.find_or_create_by({})
#+end_src
* Action Text

Include Action Text’s JavaScript and CSS in the application.

#+begin_src ruby
rails action_text:install
#+end_src

* Active Storage

* Action Pack
- controller and the view
* Action Controller
Action Controller is the C in MVC. After the router has determined which
controller to use for a request, the controller is responsible for making sense
of the request and producing the appropriate output. Luckily, Action Controller
does most of the groundwork for you and uses smart conventions to make this as
straightforward as possible.

- unless otherwise stated, when an action is finished firing, it renders a view.
* Action View
* Action Dispatch
- handles routing
- decides which controller should handle a given request
* Cache
|                      |                                                                          |
|----------------------+--------------------------------------------------------------------------|
| dev:cache            | toggle caching on and off in the development environment(restart server) |
* Tests
*assert_select*

#+begin_src ruby

#+end_src

*assert_response*

* Traits
- Active Records: Ruby object-relational mapping (ORM) library
- root_path
** REST
** JSON
** Terms
- accepts_nested_attributes_for
- validates_presence_of
- content_tag
- stylesheet_tag bootstrap_url @ application_html.erb
- HTTP status codes: Rack::Atolls::HTTP_STATUS_CODES
* Internationalization
** methods
- i18n.t()
- i18n.l()
- i18n.locale
- i18n.available_locales
* Rails Files
** config.ru
configures the Rack Webserver Interface,
** gemfile/lock
** Rakefile
* Rails Structure
** app
*** controllers
*** models
*** views
*** javascript
*** helpers
** lib
- a good place to put code that’s shared among models,views, or controllers.
- require directly by name. eg: require 'recepits'

to explicitly enable.
#+begin_src ruby
config.autoload_paths += %W(#{Rails.root}/lib)
#+end_src
*** tasks
*** assets
** log
*** development.log
*** test.log
*** production.log
** public
static  files, generally related to the running of the server.
** bin
** tmp
** vendor
where third-party code lives.
*** cache
** config
*** environment.rb
*** application.rb

* Toolings
** Direnv

Guix + Direnv example file
#+begin_src shell
use guix --ad-hoc nss-certs gawk git \
    ruby@3.0 libyaml \
    libsass gcc-toolchain \
    node sqlite
# ===================================================

# * GUIX
# Direnv do not set $GUIX_ENVIRONMENT
export GUIX_ENVIRONMENT="$(echo $LIBRARY_PATH | gawk -F '/lib' '{print $1}')"

# * RUNTIME LIBRARIES
# needed by Rails toolings.
# gcc-toolchain complains if $LD_LIBRARY_PATH is set
# export LD_LIBRARY_PATH="$GUIX_ENVIRONMENT/lib"

# SSL AUTH
# gems need this.
export SSL_CERT_FILE="$GUIX_ENVIRONMENT/etc/ssl/certs/ca-certificates.crt"
# ===================================================

# * GEM
# Install gems locally
export GEM_HOME=$PWD/.gems
export GEM_PATH=$GEM_HOME:$GEM_PATH
export PATH=$GEM_HOME/bin:$PATH
# ===================================================

# * NPM
# Install npm packages locally
export NPM_CONFIG_PREFIX="$PWD/.npm"
export NPM_CONFIG_USERCONFIG="$PWD/.npm/config"
export NPM_CONFIG_CACHE="$PWD/.npm/cache"
export NPM_CONFIG_TMP="$PWD/.npm/tmp"
export NPM_HOME="$NPM_CONFIG_PREFIX"
export NPM_BIN="$NPM_HOME/bin"
export PATH="$NPM_BIN":$PATH
# ===================================================


# * GUIX ANNOTATIONS
# ** FFI:
# install ffi w/: gem install ffi -- --disable-system-libffi

# ** GCC-TOOLCHAIN:
# libsass need it to compile files

# ** SQLITE
#+end_src
** Heroku
#+begin_src shell
heroku run DISABLE_DATABASE_ENVIRONMENT_CHECK=1 bin/rails db:{migrate,seed
#+end_src
** Dockerfile
#+begin_src dockerfile
FROM ruby:2.5.1-alpine

ENV BUNDLER_VERSION=2.0.2

RUN apk add --update --no-cache \
      binutils-gold \
      build-base \
      curl \
      file \
      g++ \
      gcc \
      git \
      less \
      libstdc++ \
      libffi-dev \
      libc-dev \
      linux-headers \
      libxml2-dev \
      libxslt-dev \
      libgcrypt-dev \
      make \
      netcat-openbsd \
      nodejs \
      openssl \
      pkgconfig \
      postgresql-dev \
      python \
      tzdata \
      yarn

RUN gem install bundler -v 2.0.2

WORKDIR /app

COPY Gemfile Gemfile.lock ./

RUN bundle config build.nokogiri --use-system-libraries

RUN bundle check || bundle install

COPY package.json yarn.lock ./

RUN yarn install --check-files

COPY . ./

ENTRYPOINT ["./entrypoints/docker-entrypoint.sh"]
#+end_src

alpine

#+begin_src dockerfile
FROM alpine:3.2

MAINTAINER CenturyLink Labs <innovationslab@ctl.io>

ENV BUILD_PACKAGES="curl-dev ruby-dev build-base" \
    DEV_PACKAGES="zlib-dev libxml2-dev libxslt-dev tzdata yaml-dev sqlite-dev postgresql-dev mysql-dev" \
    RUBY_PACKAGES="ruby ruby-io-console ruby-json yaml nodejs" \
    RAILS_VERSION="4.2.3"

RUN \
  apk --update --upgrade add $BUILD_PACKAGES $RUBY_PACKAGES $DEV_PACKAGES && \
  gem install -N bundler

RUN gem install -N nokogiri -- --use-system-libraries && \
  gem install -N rails --version "$RAILS_VERSION" && \
  echo 'gem: --no-document' >> ~/.gemrc && \
  cp ~/.gemrc /etc/gemrc && \
  chmod uog+r /etc/gemrc && \

  # cleanup and settings
  bundle config --global build.nokogiri  "--use-system-libraries" && \
  bundle config --global build.nokogumbo "--use-system-libraries" && \
  find / -type f -iname \*.apk-new -delete && \
  rm -rf /var/cache/apk/* && \
  rm -rf /usr/lib/lib/ruby/gems/*/cache/* && \
  rm -rf ~/.gem

EXPOSE 3000
#+end_src

#+begin_src dockerfile
FROM ruby:3.1.1-bullseye

MAINTAINER EAS Barbosa <easbarba@outlook.com>

ENV SYSTEM_PACKAGES='apt-transport-https' \
    PROJECT_PACKAGES='imagemagick' \
    FRONT_PACKAGES='nodejs'

# Front-end tooling
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -

RUN apt-get update -yqq && \
    apt-get install -yqq --no-install-recommends $SYSTEM_PACKAGES $PROJECT_PACKAGES $FRONT_PACKAGES

# Create a rails user and group with /app as its home directory
RUN useradd --user-group --create-home --system --skel /dev/null --home-dir /app rails

ENV XDG_CONFIG_HOME="$HOME/.config" \
    XDG_CACHE_HOME="$HOME/.cache" \
    XDG_DATA_HOME="$HOME/.local/share" \
    XDG_RUNTIME_DIR='/tmp/rails'

WORKDIR /app

ENV GEM_HOME="$HOME/.local/gem"
ENV PATH="$GEM_HOME/bin:$PATH"


# Rails dependencies
COPY --chown=rails:rails Gemfile* ./
RUN gem install bundler --conservative && bundle check || bundle install

ENV NPM_CONFIG_PREFIX="$HOME/.local/npm" \
    NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/config" \
    NPM_CONFIG_CACHE="$XDG_CACHE_HOME/npm" \
    NPM_CONFIG_TMP="$XDG_RUNTIME_DIR/npm"
ENV PATH="$NPM_CONFIG_PREFIX/bin:$PATH"


# Front-end dependencies
COPY --chown=rails:rails package.json yarn.lock ./
RUN npm i -g yarn

# All files
COPY --chown=rails:rails . ./

# Ensure all further commands run as the local user
USER rails:rails

ENV HOME='/app'

EXPOSE 3000

CMD ["bin/rails", "s", "-b", "0.0.0.0"]
#+end_src

** docker-compose
#+begin_src shell
docker-compose up -d
docker-compose build app
docker-compose exec
#+end_src


#+begin_src yml
version: '3.4'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - database
      - redis
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/app/node_modules
    env_file: .env
    environment:
      RAILS_ENV: development

  database:
    image: postgres:12.1
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:5.0.7

  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - app
      - database
      - redis
    volumes:
      - .:/app
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/app/node_modules
    env_file: .env
    environment:
      RAILS_ENV: development
    entrypoint: ./entrypoints/sidekiq-entrypoint.sh

volumes:
  gem_cache:
  db_data:
  node_modules:
#+end_src
