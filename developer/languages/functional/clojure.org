#+title: Clojure

* Progress
** Books
| books           | chapter                    | @ |
|-----------------+----------------------------+---|
| Getting Clojure | 3 Maps, Keywords, and Sets |   |
** SOC
| Source Code | folder                  | file     | @ |
|-------------+-------------------------+----------+---|
| clojure     | clojure/src/clj/clojure | core.clj |   |
| lein        |                         |          |   |
| clojure-lsp |                         |          |   |
* Base
** Types
*** Strings
*** Keywords
- sequence of characters
- label-like

#+begin_src clojure
:title
:author
:published
:word-count
:preface&introduction
:chapter-1-and-2
#+end_src
*** Numerals
*** Symbols
*** Booleans
#+begin_src clojure
true
false
#+end_src
** Collections
*** Lists
#+begin_src clojure
'(1 2 3 "four" 5 "six")
'(1 2.0 2.9999 "four" 5.001 "six")
'([1 2 ("a" "list" "inside a" "vector")] "inside" "a" "list")
(list 1 2 3 "four" 5 "six")
#+end_src

#+begin_src clojure
(def novels '("Emma" "Coma" "War and Peace"))
(def more-novels (conj novels "Jaws")) ; ("Jaws" "Emma" "Coma" "War and Peace")
#+end_src

*** Vectors
- preferred over to lists
- transformed to list at runtime

#+begin_src clojure
[1 "two" 3 "four"]
[1 [true 3 "four" 5] 6]
#+end_src

#+begin_src clojure
(vector true 3 "four" 5)
#+end_src

#+begin_src clojure
(def meh ["Emma" "Coma" "War and Peace"])
(count meh) ; Returns 3.
(first meh) ; "Emma"
(rest meh)  ; ("Coma" "War and Peace")
(first (rest (rest meh))) ; "War and Peace"
(nth meh 2) ; "War and Peace"
#+end_src

#+begin_src clojure
(def meh ["Emma" "Coma" "War and Peace"])
(conj meh "Carrie") ; ["Emma" "Coma" "War and Peace" "Carrie"]
(cons "Carrie" meh) ; ("Carrie" "Emma" "Coma" "War and Peace")
#+end_src

*** Arrays
*** Maps
- returns nil if key is not found

#+begin_src clojure
{"title" "Oliver Twist" "author" "Dickens" "published" 1838}
#+end_src

#+begin_src clojure
(hash-map "title" "Oliver Twist"
          "author" "Dickens"
          "published" 1838)
#+end_src

#+begin_src clojure
(def book {"title" "Oliver Twist"
           "author" "Dickens"
           "published" 1838})

(get book "published") ; Returns 1838.
(book "published"); Returns 1838. Same as with (get ...)
#+end_src

#+begin_src clojure
(def book {:title "Oliver Twist" :author "Dickens" :published 1838})
(println "Title:" (book :title))
(println "By:" (book :author))
(println "Published:" (book :published))

(book :title) ; same as
(:title book)
#+end_src

destructive

#+begin_src clojure
(assoc book :page-count 362)
(assoc book :page-count 362 :title "War & Peace")

(dissoc book :published)
(dissoc book :title :author :published)
#+end_src

#+begin_src clojure
(keys book) ; (:title :author :published)
(vals book) ; ("Oliver Twist" "Dickens" 1838)
#+end_src

*** Sequences
** Functions
*defn*

#+begin_src clojure
(defn -main
  "meh"
  [& args]
  (println "Hello World"))
#+end_src

#+begin_src clojure
(defn chatty-average [a b]
  (println "chatty-average function called")
  (println "** first argument:" a)
  (println "** second argument:" b)
  (/ (+ a b) 2.0))
#+end_src

** Bindings
*** def
*def*
#+begin_src clojure
(def author "Dickens")
#+end_src
* Commands
** clj
*-M[aliases]*
Use concatenated aliases to modify classpath or supply main opts

#+begin_src shell
clj -Mtest
clj -Muberjar
clj -Moutdated
#+end_src

*-m, --main ns-name*
Call the -main function from namespace w/args

#+begin_src shell
clj -m com.tomekw.cdeps.core 2 + 2 is 4 4 / 2 is 2
#+end_src

*-A[aliases]*
Use concatenated aliases to modify classpath

- deprecated

#+begin_src shell
clj -Atest #
clj -Auberjar
#+end_src

*-X[aliases]*
Use concatenated aliases to modify classpath or supply exec fn/args
