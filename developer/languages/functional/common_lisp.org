#+TITLE: Common Lisp

* Progress
** Books
| Books            | Capitulo | em            |
|------------------+----------+---------------|
| ANSI Common Lisp |          | 2.7 Recursion |

** SLOC
| Source Code | folder | file | @ |
|-------------+--------+------+---|
| sbcl        |        |      |   |
| asdf        |        |      |   |
| alexandria  |        |      |   |
* Base
** Types
*** char
|           |   |
|-----------+---|
| char-code |   |
** Collections
*** array
**** eg
      #+begin_src lisp
      (setf *print-array* t) ;; display form

      (setf arr (make-array '(2 3) : initial-element nil)) ;; make
      (aref arr 0 0) ;; retrieve
      (setf (aref arr 0 0) 'b) ;; replace
      #2a((b nil nil) (nil nil nil))
      (vector "a" 'b 3)
      #+end_src
**** annnotaion
      - multiple dimensions
      - zero indexed
      - one-dimensional array is also called a vector

*** lists
*listp*

#+begin_src lis
(listp ( a b c))

(if ( l i s t p ' ( a b c))
    (+ 1 2)
    (+ 5 6))
#+end_src

*null*

returns true empty list

#+begin_src lisp
(null nill)
(null '())
#+end_src

*dotted (proper) list*
- is either nil, or a cons whose cdr is a proper list
- dot notation
- separated by a period

*assoc lists (alist)*
- mapping
- are slow
- good for prototyping
- assoc retrieves the pair associated with a given key else nil
- assoc-if

*cons*

- cons builds lists
- if its second argument is a list, it returns a new list with the first argument added to the front.

#+begin_src lisp
(cons 'a '(b c d)) ;; (A B C D
(cons 'a (cons 'b nil)) ;; (A B)
(list  'a 'b) ;; (A B)
#+end_src

*car*
- first element of a list

*cdr*
- all elements after the first element

#+begin_src lisp
(car (cdr (cdr '( a b c d ))))
(third '(a b c d))
#+end_src

*** Sets
**** union
**** intersection
**** set-difference
**** adjoin
**** member
** Operators
*** quote
#+begin_src lisp
(quote (a b))
(quote (+ 3 5))
'( + 3 5)
#+end_src
*** and
*** or
*** member
*** member-if
*** every
*** some
*** keywords (:test)
** Conditionals
*** if
- takes three arguments: a test expression, a then expression, and an else expression.
- everything but nil counts as true

#+begin_src lisp
(if (listp '(a b c))
    (+ 1 2)
    (+ 5 6))

(if (listp 27)
  (+ 1 2)
  (+ 5 6))

(if 27 1 2)
#+end_src

*** cond
*** when
*** unless
*** >
#+begin_src lisp
(> (+ 1 4) 3) ; T
#+end_src


** Assignment
*** let
*** let*
*** defparameter
*** defvar
** Comparable
*** equal
*** eql
*** nth
*** sort
      - destructive
** Functions
- a name, a list of parameters, and one or more expressions that will make up the body of the function.

#+begin_src lisp
(defun our-third (x)
       (car (cdr (cdr x ))))
(our-third '(a b c d)) ;; C

(defun sum-greater (x y z)
  (> (+ x y) z))
#+end_src
** Short Notations
*** #'
*** '
*** `(,)
*** '()
** Predicates
*** evenp
*** null
- returns true of the empty list.

#+begin_src lisp
(null nil)
#+end_src
*** not
- returns true if its argument is false

#+begin_src lisp
(not nil)
#+end_src

*** oddp
*** consp
*** atom
** Sequences
*** length
*** subseq
*** reverse
