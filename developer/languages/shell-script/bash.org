#+TITLE: GNU Bash

* Progress
| book                            | chapter                         | @          |
|---------------------------------+---------------------------------+------------|
| Bash Reference Manual           |                                 |            |
| Shell Scripting Hwo to Automate |                                 | File Types |
| Advanced Bash-Scripting Guide   | Chapter 6. Exit and Exit Status |            |

* Base
** Redirection
*** File descriptors
https://www.gnu.org/software/bash/manual/html_node/Redirections.html
https://tldp.org/LDP/abs/html/io-redirection.html
** Collection Types
*** Array
#+begin_src shell
arr=() 	    # Create an empty array
arr=(1 2 3)   # Initialize array
${arr[2]} 	# Retrieve third element
${arr[@]} 	# Retrieve all elements
${!arr[@]} 	# Retrieve array indices
${#arr[@]} 	# Calculate array size
arr[0]=3 	    # Overwrite 1st element
arr+=(4) 	    # Append value(s)
str=$(ls) 	# Save ls output as a string
arr=( $(ls) ) # Save ls output as an array of files
${arr[@]:s:n} # Retrieve n elements starting at index s
#+end_src

#+begin_src shell
meh=(foo bar)
echo ${meh[1]} # bar
meh+='forevis'

for m in ${meh[@]}; do
  echo "$m"
done
#+end_src

** exit
*no argument*
 returns last command result

** Variables
*** undeclared vars
Use :- if you want to test variables that could be undeclared. For instance: if
[ "${NAME:-}" = "Kevin" ] will set $NAME to be empty if it's not declares.
*** IFS
field separator

** shift
    shift: shift cli args to next right
** <<<
    here-string, give a pre-made string of text to a program
** >&2
** >
    echo 'asd' > temp  | create a file or overwrite existent one
** >>
    echo 'asd' >> temp | create a file or append to end of existent one
** << EOF > OEF
    here documents
** <<<
    here-string
** unicode

PS: remove + sign as shell does not what is.

#+begin_src shell

# U+f026

echo -e "\Uf026"

#+end_src
** Group Commands
*** subshell (...)
     Placing a list of commands between parentheses causes a subshell
     environment to be created (see Command Execution Environment), and
     each of the commands in list to be executed in that subshell.
     Since the list is executed in a subshell, variable assignments do
     not remain in effect after the subshell completes.

     The parentheses are operators, and are recognized as separate
     tokens by the shell even if they are not separated from the list
     by whitespace.
     #+begin_src shell-script
     ()
     #+end_src
*** subshell {...}
     Placing a list of commands between curly braces causes the
     list to be executed in the current shell context. No subshell
     is created. The semicolon (or newline) following list is
     required.

     The braces are reserved words, so they must be separated from the
     list by blanks or other shell metacharacters.
     #+begin_src shell-script
     {...}
     #+end_src
** Symbols
*** $#
length or the number of arguments passed
#+begin_src sh
bash -c “echo $#” hello world again # 2
#+end_src

*** #
commentary
*** &>
redirects both the standard output and the standard error

#+begin_src shell
bash -c ‘ls -la &> file.txt’
#+end_src

*** \< and \>
compare the string length or character lengths
#+begin_src shell
a=”cat”

b=”lynx”

if [ a \< b ]

then

echo “a is shorter than b”

else

echo “a is longer than b”

fi
#+end_src

*** ^^, ^ and ,,

^^ — to turn all characters to uppercase

^ — to turn the first letter to uppercase

,, — to turn all characters to all lowercase

#+begin_src shell
a=”cat”

b=”lynx”

c=”DRAGON”

echo ${a^^}

echo ${b^}

echo ${c,,}
#+end_src

*** $@ or $*
$@ is equivalent to $* which is equivalent to $1 $2 $3 $4

*** $?
get the exit status of the command previously passed.

*** $$
PID of the current shell
*** 2>&1
redirects both the standard output and the standard error to the standard output.

#+begin_src shell
ls 2>&1 > file.txt
#+end_src
*** ( Single Parentheses )
Run commands inside in a subshell

- does not return result

#+begin_src shell
a='This string'
( a=banana; mkdir $a )

echo $a
# => 'This string'

ls
# => ...
# => banana/
#+end_src
*** $( Dollar Single Parentheses )
*** $( Dollar Single Parentheses Dollar Q )$?
 interpolates a command, but only the exit code and not the value,
*** (( Double Parentheses ))
Arithmetic expansion allows the evaluation of an arithmetic expression and the substitution of the result.

- does not return result
*** $(( Dollar Double Parentheses ))
Arithmetic Interpolation

- returns result

#+begin_src shell
$(( expression ))
#+end_src

*** <( Angle Parentheses )
Process substitution allows a process’s input or output to be referred to using a filename.

#+begin_src shell
<(list)
>(list)
#+end_src
*** [ Single Square Brackets ]
alternate version of the built-in test.
*** [ [ Double Square Brackets ]]
*** { Single Curly Braces }
grouping commands or globbing
*** ${dollar braces}
*** {...}
Execute the commands in the braces as a group.

#+begin_src shell
false || { echo "We failed"; exit 1; }
#+end_src

** Environments Vars
*** $DIRSTACK
*** $BASH_ENV
*** $?
returns the exit status of the last executed command
** Redirection
- > : add or overwrite
- >>: add or append
- < : get input from file to program

#+begin_src shell

ls >filelist
cat f1 f2 >temp
echo "use guix" >>.bashrc

who >temp
wc -l <temp

#+end_src
** Pattern Matching
*** glob
|     |                                     |
|-----+-------------------------------------|
| ch* | select all files that begin w/ 'ch' |
|     |                                     |


#+begin_src shell
ls ch.*

#+end_src

*** any
|         |                                                               |
|---------+---------------------------------------------------------------|
| Do[cw]* | match any file that begins w/ 'Do' and followed by 'c' or 'w' |
|         |                                                               |


#+begin_src shell

echo Do[cw]* # Documents Downloads
echo ch[1-46-9] # all numbers up to 9 but not 5

#+end_src

*** any single char
#+begin_src shell

ls ? # a
ls -l ch?.1 # ch1.1 ch2.1

#+end_src

*** substring
Wildcard(*) is a symbol used to represent zero, one or more characters.

#+begin_src shell
[[ 'GNU/Linux is an operating system' == *'gnu'* ]] && echo yep
#+end_src
** Brace Expansion
#+begin_src shell
mkdir /usr/local/src/bash/{old,new,dist,bugs}
#+end_src

** regular expression

**

* utilities
** read
** echo
** set
display all environment variables and Shell functions

|             |                                                                                                                                    |
|-------------+------------------------------------------------------------------------------------------------------------------------------------|
| -e          | exit immediately if it returns a non-zero status                                                                                   |
| -x          | Print commands and their arguments as they are executed.                                                                           |
| -u          | Treat unset variables and parameters other than the special parameters ‘@’ or ‘*’ as an error when performing parameter expansion. |
| -o          |                                                                                                                                    |
| -f          | disable filename expansion (globbing).                                                                                             |
| -b          | Cause the status of terminated background jobs to be reported immediately,                                                         |
| -n          | Read commands but do not execute them.                                                                                             |
| -p          | Turn on privileged mode.                                                                                                           |
| -t          | Exit after reading and executing one command.                                                                                      |
| -o pipefail |                                                                                                                                    |
| --          | the positional parameters are set to the arguments                                                                                 |
| +           | options to be turned off.                                                                                                          |

** shopt
** test
-b FILE - True if the FILE exists and is a special block file.
-c FILE - True if the FILE exists and is a special character file.
-d FILE - True if the FILE exists and is a directory.

#+begin_src shell
[ -d /etc/docker ] && echo "$FILE is a directory."
#+end_src

-e FILE - True if the FILE exists and is a file, regardless of type (node, directory, socket, etc.).

-f FILE - True if the FILE exists and is a regular file (not a directory or device).

#+begin_src shell
test -f /etc/resolv.conf && echo "$FILE exists."

# multiple checks
if [ -f /etc/resolv.conf -a -f /etc/hosts ]; then
    echo "Both files exist."
fi
#+end_src

-G FILE - True if the FILE exists and has the same group as the user running the command.
-h FILE - True if the FILE exists and is a symbolic link.
-g FILE - True if the FILE exists and has set-group-id (sgid) flag set.
-k FILE - True if the FILE exists and has a sticky bit flag set.
-L FILE - True if the FILE exists and is a symbolic link.
-O FILE - True if the FILE exists and is owned by the user running the command.
-p FILE - True if the FILE exists and is a pipe.
-r FILE - True if the FILE exists and is readable.
-S FILE - True if the FILE exists and is a socket.
-s FILE - True if the FILE exists and has nonzero size.
-u FILE - True if the FILE exists, and set-user-id (suid) flag is set.
-w FILE - True if the FILE exists and is writable.
-x FILE - True if the FILE exists and is executable.

* cli
** options
*** --init-file
     use alternative init file
*** -c
     run command and arguments
* Tips
#+begin_src shell-script
#  get word after $char in string $var
${var##*char}

# return s
${var%sub}

# variable inline assignment
var=$(test && echo "A" || echo "B")

# variable inline assignment numeric    |
(( a = b==5 ? c : d )) or let a=b==5?c:d;

# return arguments of function as array |
$@
#+end_src
