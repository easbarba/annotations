#+TITLE: Rust

* Progress
** Books
| name              | chapter             | @              |
|-------------------+---------------------+----------------|
| Command-line Rust | 2 Test for Echo     | How echo Works |
| Programming Rust  | 3 Fundamental Types |                |

** SLOC
| Source Code | folder | file | @ |
|-------------+--------+------+---|
| rust        |        |      |   |
* Base
** Types
*** Integers
- usize and isize matches the size of the address space on the target machine

| unsigned |                                                                 |
|----------+-----------------------------------------------------------------|
| u8       | 0 to 28–1 (0 to 255)                                            |
| u16      | 0 to 216−1 (0 to 65,535)                                        |
| u32      | 0 to 232−1 (0 to 4,294,967,295)                                 |
| u64      | 0 to 264−1 (0 to 18,446,744,073,709,551,615, or 18 quintillion) |
| u128     | 0 to 2128−1 (0 to around 3.4✕1038)                              |
| usize    | 0 to either 232−1 or 264−1                                      |

| signed |                                                                         |
|--------+-------------------------------------------------------------------------|
| i8     | −27 to 27−1 (−128 to 127)                                               |
| i16    | −215 to 215−1 (−32,768 to 32,767)                                       |
| i32    | −231 to 231−1 (−2,147,483,648 to 2,147,483,647)                         |
| i64    | −263 to 263−1 (−9,223,372,036,854,775,808 to 9,223,372,036,854,775,807) |
| i128   | −2127 to 2127−1 (roughly -1.7✕1038 to +1.7✕1038)                        |
| isize  | Either −231 to 231−1, or −263 to 263−1                                  |

*** Float
#+begin_src rust
1.61803, 3.14f32, 6.0221e23f64
#+end_src
*** Boolean
#+begin_src rust
true
false
#+end_src
*** Char
- characters are distinct from the numeric types

#+begin_src rust
'*', '\n', '字', '\x7f', '\u{CA0}'
#+end_src
*** Enum
*** String
#+begin_src rust
"ラーメン: ramen".to_string()
#+end_src
*** &str
#+begin_src rust
"そば: soba", &s[0..12]
#+end_src
*** Box
*** Trait Objects
*** Option
*** Result
*** Pointer
*** Closure
#+begin_src rust
|a, b| { a*a + b*b }
#+end_src
** Collection Types
*** Array
*** Vector
#+begin_src rust
vec![0.367, 2.718, 7.389]
#+end_src
*** Slice
*** Struct
#+begin_src rust
S { x: 120.0, y: 209.0 }
#+end_src
** Bindings
*** let
** Access
*** mut
Let variables be mutable
** Functions
#+begin_src rust
fn main() {
    println!("Hello, World!");
}
#+end_src
** Macros
** Test
*assert_eq*
Expects an certain value

#+begin_src rust
#[test]
fn say_hello() {
    let hello: &str = "hello world";
    assert_eq!(hello.to_uppercase(), floss::yell(hello));
}
#+end_src

*assert*

#+begin_src rust
#[test]
fn runs() {
    let mut cmd = Command::new("zae");
    let res = cmd.output();
    assert!(res.is_ok());
}
#+end_src

*assert_cmd*
#+begin_src shell
use assert_cmd::Command;
#+end_src

* Standard Library

** misc

*println!*
#+begin_src rust
println!("Hello, World!");
#+end_src
** assert
** std::process
*::abort*

*::exit*
** Command
#+begin_src rust
#[test]
fn runs() {
    let mut cmd = Command::cargo_bin("hello").unwrap();
    cmd.assert().success().stdout("Hello, world!\n");
}
#+end_src

* Command line
** rust
*** test
*** run
*** build
*** install
*** update
** cargo
*** run
*** build
*--quite*
*--bin*
name of the binary target to run.
#+begin_src shell
cargo run --quiet --bin
#+end_src

*** help
#+begin_src shell
cargo help build
#+end_src
*** test
#+begin_src shell
cargo test -- --test-threads=1
#+end_src
* Ops
