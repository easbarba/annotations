#+TITLE: Ruby Packages

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 3 :ignore this
  :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
  - [[#packages][Packages]]
    - [[#gem][gem]]
    - [[#bundle][bundle]]
      - [[#outdated][outdated]]
      - [[#gem][gem]]
      - [[#install][install]]
      - [[#update][update]]
    - [[#irb][irb]]
      - [[#cli][cli]]
      - [[#inside][inside]]
    - [[#rspec][rspec]]
    - [[#unit-test][unit test]]
    - [[#pry][pry]]
  - [[#features][Features]]
    - [[#project-structure][project structure]]
    - [[#system-errors][System Errors]]
      - [[#usage][usage]]
    - [[#exceptions][exceptions]]
      - [[#errors][Errors]]
      - [[#usage][usage]]
    - [[#writable-object-attribute][writable object attribute]]
    - [[#multithreading][Multithreading]]
      - [[#usage][usage]]
    - [[#modules][modules]]
    - [[#continuation][continuation]]
    - [[#fibers][Fibers]]
      - [[#errors][errors]]
      - [[#usage][usage]]
    - [[#delimited-input][delimited input]]
    - [[#rake][rake]]
      - [[#usage][usage]]
    - [[#gem][gem]]
    - [[#variables][Variables]]
      - [[#class-variables][class variables]]
      - [[#global-variables][global variables]]
    - [[#self][self]]
    - [[#commentary][commentary]]
    - [[#defined][defined?]]
    - [[#iterators][iterators]]
    - [[#block-local-variables][block-local variables]]
    - [[#loops][loops]]
    - [[#statement-modifiers][statement modifiers]]
    - [[#comparison][comparison]]
    - [[#conditional][conditional]]
    - [[#class][class]]
      - [[#class][class]]
    - [[#append-][append <<]]
    - [[#blocks][blocks]]
    - [[#lambda][lambda]]
      - [[#how][How]]
      - [[#usage][Usage]]
    - [[#methods][methods]]
    - [[#yield][yield]]
    - [[#procs][procs]]
    - [[#operators][operators]]
    - [[#enumerable][enumerable]]
    - [[#enumerator][enumerator]]
      - [[#lazy][lazy]]
      - [[#each_car][each_car]]
      - [[#each][each]]
      - [[#to_enumenum_for][to_enum/enum_for]]
    - [[#inject][inject]]
    - [[#select][select]]
    - [[#succ][succ]]
    - [[#collect][collect]]
    - [[#freeze][freeze]]
    - [[#dup][dup]]
    - [[#dig][dig]]
    - [[#fetch][fetch]]
    - [[#tap][tap]]
    - [[#map][map]]
    - [[#pluck][pluck]]
    - [[#quoting][Quoting]]
    - [[#here-documents][here documents]]
    - [[#proc][proc]]
    - [[#do-end-as-param][do end as param]]
    - [[#array][array]]
    - [[#datetime][date/time]]
    - [[#lambda][lambda]]
    - [[#begin-rescue][begin rescue]]
    - [[#hash][hash]]
    - [[#range][range]]
    - [[#sets][sets]]
    - [[#gsub][gsub]]
    - [[#find][find]]
    - [[#map][map]]
    - [[#each_slice][each_slice]]
    - [[#lazy][lazy]]
    - [[#with_index][with_index]]
    - [[#enum_for][enum_for]]
    - [[#more][more]]
    - [[#concepts][Concepts]]
      - [[#iterator][Iterator]]
      - [[#methods][Methods]]
      - [[#enumerator][Enumerator]]
    - [[#instructions][Instructions]]
      - [[#rbenv][Rbenv]]
      - [[#misc][misc]]
  - [[#toolings][Toolings]]
  - [[#videos][Videos]]
  - [[#tests][Tests]]
    - [[#rspec][RSpec]]
    - [[#unit][Unit]]
  :END:
* Progress
** Books
| Books                      | Chapter                          | late |
|----------------------------+----------------------------------+------|
| Effective Testing - RSpec3 | Testing in Isolation: Unit Specs |      |

** SLOC
| Project    | folder | file           | @ |
|------------+--------+----------------+---|
| rspec      |        |                |   |
| rake       |        | application.rb |   |
| solargraph |        | api_map.rb     |   |

* Packagement
** bundle
*** outdated
*** gem
     |                   |                                                    |
     |-------------------+----------------------------------------------------|
     | <name>            | Generate a project skeleton for creating a rubygem |
     | list              |                                                    |
     | which <name>      |                                                    |
     | gem search <name> |                                                    |
*** add

*** install
     bundle config set --local deployment 'true'
*** binstubs
*** update
*all*
update all gems

*--group=<name>, -g=[<name>]*
 Only update the gems in the specified group.

*--source=<name>*
The name of a :git or :path source used in the Gemfile(5).

*--quiet*

*--redownload*

*--minor*
Prefer updating only to next minor version.

*--major*
Prefer updating to next major version (default).

*--ruby*

* Testing
** [[https://rspec.info/][RSpec]]
Behaviour Driven Development for Ruby

*** base
**** it
***** metadata
****** :aggregate_failures
record the first failure, but continue to try the second expectation
**** describe
#+begin_src ruby
describe Array.new([1,2,3]), 'Array awesomeness' do
  it '#include' do
    expect(subject).to include(2)
  end
end
#+end_src

***** metadata
****** :aggregate_failures
record the first failure, but continue to try the second expectation
**** specify
**** example
**** metadata
     |                               |   |
     |-------------------------------+---|
     | context 'foobar', focus: true |   |
     |                               |   |

*** metadata / tags
*:aggregate_failures*

continue to try the next expectation

*pending*

*** varibles
*let*

#+begin_src ruby
let(:expense) { { 'some' => 'data' } }
#+end_src

*let!*

#+begin_src ruby

#+end_src

*subject*

#+begin_src ruby
subject(:pak) { pak.new }
#+end_src

*** setting up
*before*

#+begin_src ruby
before do
  allow(ledger).to receive(:record)
   .with(expense)
   .and_return(RecordResult.new(false, 417, 'Expense incomplete'))
end
#+end_src

*** matchers

*eq*

*contain_exactly*

*a_kind_of*

*include*

*be_success*


*expect/to*

expect() and to() check a result in order to signal success or failure.
They compare a value using a matcher.


*be_success*

*a_hash_including*


#+begin_src ruby
expect(DB[:expenses].all).to match [a_hash_including(
id: result.expense_id,
payee: 'Starbucks',
amount: 5.75,
date: Date.iso8601('2017-06-10')
)]
#+end_src

*instance_of*

*respond_to*

*be_an* *be_a*

*have_attributes*
*** matches
*match*

*** Terms
 - Example group defines what you’re testing—in this case, a sandwich—and keeps related specs together.
 - Arrange/Act/Assert pattern

*** Cli
| cmd       | desc                                             |
|-----------+--------------------------------------------------|
| folder    | run allfolders specs                             |
| spec      | run just one spec                                |
| -e <name> | run spec(s) begins w/ name                       |
| <file>:N  | run examples in lineN of file                    |
| describe  | creates an example group (set of related tests). |
| expect    | verifies an expected outcome (assertion)         |
| example   | individual test                                  |

**** --options

--init

Initialize your project with RSpec.

--bisect

repeatedly run subsets of your suite in order to isolate the minimal set of
examples that reproduce the same failures.

--seed

--backtrace or -b

display backtrace

--tag focus

--tag last_run_status:failed

--next-failure

--only-failures

--format <type>

--profile
test time

*** Doubles
**** Mocks
**** Stubs
*** Hooks

*around*

#+begin_src ruby
c.around(:example, :db) do |example|
  DB.transaction(rollback: :always) { example.run }
end
#+end_src


**** suite-level
*** Methods
- instance_double
*** Config
- by default, RSpec aborts the test on the first failure

**** .rspec
Default command-line flags
**** spec/support/*.rb
“partially shared” code goes here

- runs just once

#+begin_src ruby
RSpec.configure do |c|
  c.before(:suite) do
    Sequel.extension :migration
    Sequel::Migrator.run(DB, 'db/migrations')
    DB[:expenses].truncate
  end
end
#+end_src
**** spec/spec_helper.rb

*filter_gems_from_backtrace*

*when_first_matching_example_defined*



***** Options
       - ENV['RACK_ENV'] = 'test'
*** Terms
- slimming the test
*** external toolings
**** pry

#+begin_src ruby
it 'sadsa' do
  binding.pry
end
#+end_src

* Console
** pry
* Runners
** rake
*** options
*-T*
 list avaiable tasks

*spec*
 run spec tests

*-D*
complete description of a specific task.
*** task
#+begin_src ruby
# desc:
# task:

desc "Remove Unix and Windows backup files"
task :delete_backups => [ :delete_unix_backups, :delete_windows_backups ] do # depends on two other tasks
  puts "All backups deleted"
end
#+end_src

*rails task*

#+begin_src ruby
namespace :db do
  desc "Prints the migrated versions"
  task :schema_migrations => :environment do
    puts ActiveRecord::Base.connection.select_values(
      "select version from schema_migrations order by version"
    )
  end
end
#+end_src

* Serialization
* Web Applications
** [[http://sinatrarb.com/][Sinatra]]
    Sinatra is a DSL for quickly creating web applications
** [[https://rubyonrails.org/][Ruby On Rails]]
    A web-application framework that includes everything needed to create database-backed web applications

* HTTP
** Rack
* Documentation
** Rdoc
    - nodoc: [all]


** console
    |        |   |
    |--------+---|
    | --all  |   |
    | --fmt  |   |
    | --main |   |

* Formatter
** Rufo
*** [[https://github.com/ruby-formatter/rufo/blob/master/docs/settings.md][Settings]]
* System
** FFI
- Foreign Function Interface
- gives you access to external libraries

#+begin_src ruby
require 'ffi'

module A
  extend FFI::Library
  ffi_lib 'c'
end
#+end_src
* Currency
   - Money: A Ruby Library for dealing with money and currency conversion.
* Profiling
   - ruby-prof
* Web-server
  - rack: A modular Ruby web server interface.
