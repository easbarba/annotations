#+TITLE: Elixir

* Progress
** Books
| Books                   | Chapter                         | late |
|-------------------------+---------------------------------+------|
| Learn Functional Elixir | CHAPTER 4 Diving into Recursion |      |
| Elixir in Action        |                                 |      |

** SLOC
| Project | folder      | file | @ |
|---------+-------------+------+---|
| elixir  | eex/lib/eex |      |   |

* Base
** Literals
|         |                          |
|---------+--------------------------|
| string  | "meh"                    |
| integer | 4                        |
| float   | 10.8                     |
| boolean | true, false              |
| atom    | :ok, :error              |
| tuple   | {:ok, "Hello"}           |
| list    | [1,23,4]                 |
| map     | %{id: 123, name: "anna"} |
| nil     | nil                      |
** Types
*** Strings
#+begin_src elixir
"meh"
#+end_src

*<>*
Join strings

#+begin_src elixir

"Hello, " <> name <> "!"

#+end_src

*#{}*
Interpolation

#+begin_src elixir

"Hello, #{name}!"

"1 + 1 = #{1+1}"
#+end_src

Matching Parts of a String

#+begin_src elixir
"Authentication: " <> credentials = "Authentication: Basic dXNlcjpwYXNz"
credentials # "Basic dXNlcjpwYXNz"
#+end_src
*** Integers
*** Floats
*** Atoms
- may end with an exclamation point or a question mark.
#+begin_src elixir
:fred :is_binary? :var@2 :<> :=== :"func/3"
:"long john silver" :эликсир :mötley_crüe
#+end_src
*** Ranges

*** RegExp
#+begin_src elixir
iex> Regex.run ~r{[aeiou]}, "caterpillar"
["a"]
iex> Regex.scan ~r{[aeiou]}, "caterpillar"
[["a"], ["e"], ["i"], ["a"]]
iex> Regex.split ~r{[aeiou]}, "caterpillar"
["c", "t", "rp", "ll", "r"]
iex> Regex.replace ~r{[aeiou]}, "caterpillar", "*"
"c*t*rp*ll*r
#+end_src

*** DateTime
*** Time
#+begin_src elixir
{:ok, t1} = Time.new(12, 34, 56) # {:ok, ~T[12:34:56]}
#+end_src
*** Date
- DateTime
- NaiveDateTime

** Collections Types
*** Tuples
Collections that are stored contiguously in memory, allowing fast access to their elements by index.

- stored contiguously in memory
 - represents a few items

#+begin_src elixir
{:ok, 42}
{:error, :not_found}

iex> {a, b, c} = {4, 5, 6}
{4, 5, 6}
iex> a
4
iex> b
5
iex> c
6
#+end_src
*** Lists
- linked-lists

#+begin_src elixir
[ 1, 2, 3 ] ++ [ 4, 5, 6 ] # [1, 2, 3, 4, 5, 6]
[1, 2, 3, 4] -- [2, 4] # [1, 3]
1 in [1,2,3,4] # true
"wombat" in [1, 2, 3, 4] # false
#+end_src

**** | operator
#+begin_src elixir

[ head | tail ] = [1,2,3]
head # 1
tail # [2,3]

#+end_src

*** Keyword Lists
data-structure used to pass options to functions.

- 2-item tuples
- first element (the key) is an atom
- second element can be any value.
- allows duplicated keys but they must be atoms

#+begin_src elixir
[b, c] = [a: 1, a: 12]
b # {:a, 1}
c # {:a, 12}
#+end_src
*** Maps
Structured in key/value pairs

- allow any value to be the key
- key must be unique

#+begin_src elixir
user_signup = %{email: "johndoe@mail.com", password: "12345678"}
user_signup = %{:email => "johndoe@mail.com", :password => "12345678"}

%{
  name: "John Doe",
  age: 20,
  programming_languages: ["Ruby", "Elixir", "JavaScript", "Java"],
  location: %{city: "São Paulo", country: "Brazil", state: "SP"}
}
#+end_src

#+begin_src elixir
abilities = %{strength: 16, dexterity: 12, intelligence: 10}
%{strength: strength_value} = abilities
strength_value
16
%{ String.downcase(name) => name }
#+end_src

Acessing Maps

#+begin_src elixir
states["AL"] # "Alabama"
colors[:red] # 16711680
colors.green # 65280
#+end_src

#+begin_src elixir
iex> %{intelligence: 10, dexterity: dexterity_value} = abilities
iex> dexterity_value
12
#+end_src

Check and bind at the same time w/ =

#+begin_src elixir
iex> %{strength: strength_value = 16 } = abilities
iex> strength_value
16
#+end_src
*** Struct
Structs are extensions built on top of maps that provide compile-time checks and default values.

#+begin_src elixir

defmodule DungeonCrawl.Character do
  defstruct name: nil,
    description: nil,
    hit_points: 0,
    max_hit_points: 0,
    attack_description: nil,
    damage_range: nil
end

%DungeonCrawl.Character{name: "Warrior"}


#+end_src
*** Binary
#+begin_src elixir
bin = << 1, 2 >> # <<1, 2>>
byte_size bin # 2
#+end_src

#+begin_src elixir
bin = <<3 :: size(2), 5 :: size(4), 1 :: size(2)>> # <<213>>
:io.format("~-8.2b~n", :binary.bin_to_list(bin)) # 11010101 :ok
byte_size bin
#+end_src
** System Types
*** PID
** Modules
- like a namespace
- uppercase letter
- CamelCase style
- every function belongs to a module

#+begin_src elixir
defmodule Geometry do
  def rectangle_area(a, b) do
    a * b
  end
end
#+end_src

#+begin_src elixir
defmodule Geometry.Rectangle do
...
end
defmodule Geometry.Circle do
...
end
#+end_src

** Arithmetic
|    |                                       |                      |
|----+---------------------------------------+----------------------|
| +  |                                       |                      |
| -  |                                       |                      |
| /  |                                       |                      |
| *  |                                       |                      |
| == |                                       |                      |
| != |                                       |                      |
| <  |                                       |                      |
| >  |                                       |                      |
| ++ | Concatenating two lists               | [1, 2] ++ [3, 4]     |
| <> | Concatenating two strings or binaries | "Hello, " <> "World" |
** Binding
#+begin_src elixir
x = y
#+end_src

*Pin operator* - Prevent rebindig

#+begin_src elixir
iex> x = 2
2
iex> ^x = 2
2
iex> ^x = 1 # (MatchError) no match of right hand side value: 1
#+end_src

** Logical
- left side of the operators and and or must be Boolean values

|     |   |
|-----+---|
| and |   |
| or  |   |
| not |   |

- accept truthy and falsy values on their left side.
- works with Booleans and values

|    |   |   |
|----+---+---|
| && |   |   |
| \\ |   |   |
| !  |   |   |

** Functions
#+begin_src elixir

def total(current) do
  "Total is #{current}"
end

#+end_src

*Function clauses*
- must be defined in sequence

capture syntax

#+begin_src elixir

t = &(&1 * &2)
t.(2,3)

divrem = &{ div(&1,&2), rem(&1,&2) }
divrem.(13, 5) # {2, 3}

s = &"bacon and #{&1}"
s.("custard") # "bacon and custard"

match_end = &~r/.*#{&1}$/
"cat" =~ match_end.("t")

l = &length/1
l.([1,3,5,7]) # 4
#+end_src

- parens are optional

private functions

Control acessibiltity from outside.

#+begin_src elixir

defmodule Meh do
  defp foo do
    "meh"
  end
end

#+end_src

*default values \\*

#+begin_src elixir

defmodule Check do
  def total(price, quantity \\ 10), do: price * quantity
end

#+end_src

*Guard clauses*

run func only if guard match

#+begin_src elixir

defmodule Check do
    def greater(number, other_number) when number >= other_number, do: number
end

number_compare = fn
  number, other_number when number >= other_number -> number
  _, other_number -> other_number
end

number_compare.(1, 2) # returns 2
#+end_src

*defguard*

#+begin_src elixir
defguard is_rate(value) when is_float(value) and value >= 0 and value <= 1
defguard is_cents(value) when is_integer(value) and value >= 0
#+end_src

*Tail-call*

*Body recursive*

*Unbounded recursion*

** Sigil
#+begin_src elixir
~D[2018-01-01]
~w(chocolate jelly mint) # ["chocolate", "jelly", "mint"]
~w(meh foo bar) # list without worrying about double quotes and commas
#+end_src

** Control Flow
*** case
allows us to compare a value against many patterns until we find a matching one:

#+begin_src elixir

user_input = IO.gets "Write your ability score:\n"
 case Integer.parse(user_input) do
  :error -> IO.puts "Invalid ability score: #{user_input}"
  {ability_score, _} ->
    ability_modifier = (ability_score - 10) / 2
IO.puts "Your ability modifier is #{ability_modifier}"
end


#+end_src

#+begin_src elixir
result =
  case Integer.parse(user_input) do
    :error ->
      "Invalid ability score: #{user_input}"

    {ability_score, _} when ability_score >= 0 ->
      ability_modifier = (ability_score - 10) / 2
      "Your ability modifier is #{ability_modifier}"
  end
#+end_src

*** cond

is useful when you need to match against different values. However, in many
circumstances, we want to check different conditions and find the first one that
does not evaluate to nil or false.

#+begin_src elixir

result = cond do
  age < 13 -> "kid"
  age <= 18 -> "teen"
  age > 18 -> "adult"
end

#+end_src

** Alias
Any word that starts with a capital letter,

** Comprehensions
#+begin_src elixir

iex> for a <- ["dogs", "cats", "flowers"], do: String.upcase(a)
["DOGS", "CATS", "FLOWERS"]

# filter
iex> for n <- [1, 2, 3, 4, 5, 6, 7], n > 3, do: n
[4, 5, 6, 7]

#+end_src

** Lazy

*** Partial Application

** Pipe / Capture operators
#+begin_src elixir

"Corinthians" |> String.first |> String.downcase

#+end_src
** Pattern matching


*Unpacking*

#+begin_src elixir
#+end_src

Binary pattern-matching

** Anonymous Functions
#+begin_src elixir

hello = fn name -> "Hello, " <> name <> "!" end
hello.("Foo")  # Hello Foo


greet = fn name ->
  greetings = "Hello, #{name}"
  "#{greetings}! Enjoy your stay."
end

fn -> 1 + 1 end.()

fair_price = fn price, quantity -> price * quantity end
fair_price.(5, 6)

#+end_src

Use the capturing feature to use named-function references like anonymous functions:

#+begin_src elixir

iex> c("factorial.ex")
iex> factorial = &Factorial.of/1
iex> factorial.(5)

#+end_src
** Protocols
- works with structs
- modules. Protocols create a function interface to work with several data type
#+begin_src elixir
defprotocol DungeonCrawl.Display do
  def info(value)
end

defimpl DungeonCrawl.Display, for: DungeonCrawl.Room.Action do
  def info(action), do: action.label
end

defimpl DungeonCrawl.Display, for: DungeonCrawl.Character do
  def info(character), do: character.name
end
#+end_src
** Behaviors/Callback
- works with modules
- defines a list of functions that a module should implement

#+begin_src elixir
defmodule DungeonCrawl.Room.Trigger do
  @callback run(Character.t, Action.t) :: {Character.t, atom}
end

defmodule DungeonCrawl.Room.Triggers.Enemy do
  @behaviour DungeonCrawl.Room.Trigger

  def run(character, %DungeonCrawl.Room.Action{id: :forward}) do
    "..."
  end
end
#+end_src
** Specifications
** Type Specifications
- provide documentation (for example, tools such as ExDoc show type specifications in the documentation)
- used by tools such as Dialyzer, that can analyze code with typespec to find type inconsistencies and possible bugs

** High Order Functions
** Macros
** Introspection

*** __info__(atom)
Provides runtime information about functions, macros, and other information defined by the module.

#+begin_src elixir
Ecto.Changeset.__info__(:functions)
#+end_src

*** exports
*** help
#+begin_src elixir
iex> h Ecto.Changeset.cast
#+end_src

** Pipe

* Library Modules
** Kernel
 Automatically imported in all environments.
** System
*** halt
System.halt
** Streams
|         |   |
|---------+---|
| cycle   |   |
| iterate |   |
| chunk   |   |

** String
** Enum
*** each
*** map
*** reduce
*** filter
** Integer
** Float
** IO

* Files
** *.exs
Elixir scripts that don’t need to generate a compiled version.
** *.ex
* Packages
** Mix
Run multiple tasks
#+begin_src shell-script
mix do deps.get, deps.compile
#+end_src
** Iex
|                   |                              |
|-------------------+------------------------------|
| c(<filename.iex>) | compile file and load module |
| -S <script>       | run a script on launch       |

* Read late
** links
- https://hexdocs.pm/elixir/master/Kernel.html
- https://dashbit.co/blog/nx-numerical-elixir-is-now-publicly-available
