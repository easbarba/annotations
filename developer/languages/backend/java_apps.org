#+TITLE: Java - Applications

* Progress
** Books
| name  | chapter                | @                |
|-------+------------------------+------------------|
| Junit | 2 Exploring Core Junit | 2.2 Nested tests |
** SLOC
| Source Code | folder                                                | file          | @ |
|-------------+-------------------------------------------------------+---------------+---|
| JUnit5      | junit-jupiter-api/src/main/java/org/junit/jupiter/api | AfterAll.java |   |
* JUnit
** Test Classes
- may be a top-level class,
- may be a static member class,
- may be a inner class annotated as @Nested that contains one or more test methods.
- cannot be abstract
- must have a single constructor
- its constructor must have no arguments, or arguments that can be dynamically resolved at runtime through dependency injection.
- allowed to be package-private as a minimum requirement for visibility.
- 5: no longer required that test classes be public


 Test only Execute one class
#+begin_src java
mvn -Dtest=SUTTest.java clean install.
#+end_src


** Test Methods
- must not be abstract
- must not return a value (the return type should be void).
- annotated with @Test, @Repeated-Test, @ParameterizedTest, @TestFactory, or @TestTemplate.

** Life Cycle
@TestInstance(Lifecycle.PER_CLASS)

** Life cycle Methods
- annotated with @BeforeAll, @AfterAll, @BeforeEach, or @AfterEach.
** Annotations

*@Test*

#+begin_src java
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

@Test
public void testAdd() {
   Calculator calculator = new Calculator();
   assertEquals(60, result, 0);
}
#+end_src

*@BeforeEach*

*@BeforeAll*

*@AfterEach*

*@AfterAll*

*@Before*

*@BeforeClass*

*@After*

*@AfterClass*

*@Nested*

*@DisplayName*
- declares display name for an annotated test class or test method.
- can be used over classes and test methods

*@Disabled*

- class disabled

#+begin_src java
@Disabled("Feature is still under construction.")
class DisabledClassTest {
    private SUT systemUnderTest= new SUT("Our system under test");
    @Test
     void testRegularWork() {
         boolean canReceiveRegularWork = systemUnderTest.
         canReceiveRegularWork();
        assertTrue(canReceiveRegularWork);
    }

    @Test
    void testAdditionalWork() {
        boolean canReceiveAdditionalWork =
                systemUnderTest.canReceiveAdditionalWork();
        assertFalse(canReceiveAdditionalWork);
    }
}
#+end_src

- method disable

#+begin_src java
class DisabledMethodsTest {
    private SUT systemUnderTest= new SUT("Our system under test");
    @Test
    @Disabled
    void testRegularWork() {
       boolean canReceiveRegularWork =
                 systemUnderTest.canReceiveRegularWork ();
        assertTrue(canReceiveRegularWork);
    }
    @Test
    @Disabled("Feature still under construction.")
    void testAdditionalWork() {
        boolean canReceiveAdditionalWork =
                systemUnderTest.canReceiveAdditionalWork ();
        assertFalse(canReceiveAdditionalWork);
    }
}
#+end_src
* Lombok
** Annotations
*@Value*
 annotation provided by Lombok groups some other annotations in this library that we could also use
separately. Each of the following annotations instructs Lombok to generate code blocks before the Java build phase:

*@AllArgsConstructor*
creates a constructor with all the existing fields.

 *@FieldDefaults*
 makes our fields private and final.

 *@Getter*
 generates getters for factorA and factorB.

 *@ToString*
 includes a simple implementation concatenating fields.

 *@EqualsAndHashCode*
 generates basic equals() and hashCode() methods using all fields by default, but we could also
 customize it.

* Maven
version: JDK7
** phases
- includes many goals
*** package
Take the compiled code and package it in its distributable format, such as a JAR.

- requires manifest

#+begin_src xml
<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-jar-plugin</artifactId>
      <version>2.4</version>
      <configuration>
        <archive>
          <manifest>
            <addClasspath>true</addClasspath>
            <mainClass>com.meh.Main</mainClass>
            <Automatic-Module-Name>com.meh</Automatic-Module-Name>
          </manifest>
        </archive>
      </configuration>
    </plugin>
  </plugins>
</build>
#+end_src

#+begin_src shell
mvn package
mvn -B package --file pom.xml
#+end_src

*** compile
- maven-compiler-plugin
- defaults to ./target folder

compile the source code of the project

#+begin_src shell
mvn compile
#+end_src

*** test-compile
Compiles tests too

*** test
test the compiled source code using a suitable unit testing framework.
These tests should not require the code be packaged or deployed

*** clean

-U | force update

#+begin_src shell
mvn clean install -U
#+end_src

*** install*
Install package to local repository

*** deploy
Make package result available to others, typically run from CI environment

*** validate*
Validates the project is correct and all necessary information is available

integration-test: process and deploy the package if necessary into an environment where integration tests can be run
verify: run any checks to verify the package is valid and meets quality criteria
install: install the package into the local repository, for use as a dependency in other projects locally
deploy: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.

clean: cleans up artifacts created by prior builds
site: generates site documentation for this project


*-B*
generate new maven project

#+begin_src shell
mvn -B archetype:generate -DgroupId=com.sohamkamani -DartifactId=mvn-example -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4
#+end_src

#+begin_src shell
mvn -B package --file pom.xml
#+end_src
*** verify
*** dependency
*:tree*
*** dependency*
#+begin_src shell
mvn dependency:purge-local-repository
#+end_src
*** wrapper
generate nvmw locally
#+begin_src shell
mvn wrapper:wrapper
#+end_src
*** archetype
*generate*
#+begin_src shell
mvn archetype:generate -DgroupId=com.sohamkamani \ -DartifactId=mvn-example \ -DarchetypeArtifactId=maven-archetype-quickstart \ -DarchetypeVersion=1.4
#+end_src

jar
integration test
crawl
create
create-from-project
help
update-local-catalog

** lifecycle
*** default
*** clean
*** site
Documentation generation
** pow.xml
** plugins
*** polyglot
*** Spring Boot

#+begin_src shell
mvn spring-boot:run
mvn spring-boot:build-image
mvn spring-boot:help -Ddetail=true -Dgoal=<goal-name>
mvn spring-boot:start
mvn spring-boot:stop
mvn spring-boot:repackage
mvn spring-boot:build-info
mvn spring-boot:build-image
#+end_src

*** surefire
** help

* Ant
* Gradle
** commands
*** test
*** run
*** build

* jbang
*
