#+title: Swift

* Progress
** Books
| name                | chapter          | @            |
|---------------------+------------------+--------------|
| Mastering Swift 5.3 | 3 Vars, Types... | Enumerations |
|                     |                  |              |

** SLOC
| Source Code | folder | file | @ |
|-------------+--------+------+---|
| swift       |        |      |   |
* Base
** Binding
*** var
- variable
- mutable

*** let
- constant
- immutable
** Types
*** Float
- Float16, Float32, Float64, and Float80

#+begin_src swift
var intVar = 32
var floatVar = Float(intVar)
var uint16Var = UInt16(intVar)
#+end_src

*** String
- ordered collection of characters

#+begin_src swift
var stringOne = "Hello"
var stringTwo = "World"

let str = "The main character said \"hello\""
#+end_src

*multiline*

#+begin_src swift
var multiLine = """
This is a multiline string literal.
This shows how we can create a string over multiple lines.
"""
#+end_src

*iterating*

#+begin_src swift
var stringOne = "Hello"

for char in stringOne {
    print(char)
}

stringOne.map {
    print($0)
}
#+end_src

*concat*

#+begin_src swift
var stringC = stringA + stringB
stringA += string
#+end_src

*interporlation*

#+begin_src swift
var stringA = "Jon"
var stringB = "Hello \(stringA)"
#+end_src

*raw string*
- swift 5

#+begin_src swift
let str1 = #"The main character said "hello""#

# interpolate and append
let ans = 42
var str2 = #"The answer is \#(ans)"#
#+end_src

*methods*

#+begin_src swift
var stringOne = "hElLo"
print("Lowercase String: \(stringOne.lowercased())")
print("Uppercase String: \(stringOne.uppercased())")

var stringOne = "one,to,three,four"
var stringTwo = stringOne.replacingOccurrences(of: "to", with: "two")
print(stringTwo) // one, two, three, four

var path = "/one/two/three/four"
var length = path.count
// equality, prefix equality, suffix equality, and isEmpty
#+end_src

#+begin_src swift
var path = "/one/two/three/four"
//Create start and end indexes
let startIndex = path.index(path.startIndex, offsetBy: 4)
let endIndex = path.index(path.startIndex, offsetBy: 14)
let sPath = path[startIndex ..< endIndex] //returns the "/two/three"
//convert the substring to a string
let newStr = String(sPath)
path[..<startIndex] //returns the "/one"
path[endIndex...] //returns the "/four"

path.last
path.first
#+end_src

*** Integer
*** Double
#+begin_src swift
var a: Int = 3
var b: Double = 0.14
var c = Double(a) + b
#+end_src
*** Boolean

#+begin_src swift
let swiftIsCool = true
var itIsRaining = false
#+end_src

#+begin_src swift
var itIsRaining = false

isItRaining = !isItRaining

# or

isItRaining.toggle()
#+end_src
*** Tuples
- multiple values in a single compound type

#+begin_src swift
var team = ("Boston", "Red Sox", 97, 65, 59.9)
#+end_src

*decomposing*

#+begin_src swift
var team = ("Boston", "Red Sox", 97, 65, 59.9)
var (city, name, wins, losses, percent) = team

var team = ("Boston", "Red Sox", 97, 65, 59.9)
var city = team.0
var name = team.1
var wins = team.2
var losses = team.3
var percent = team.4
#+end_src

*named tuples*

#+begin_src swift
var team = (city:"Boston", name:"Red Sox", wins:97, losses:65, percent:59.9)
#+end_src
*** Enumerations
- not integer-only values (string, character, integer, floating-point)

#+begin_src swift
enum Planets {
  case mercury
  case venus
  case earth
  case mars
  case Jupiter
  case Saturn
  case Uranus
  case neptune
}
#+end_src

* cli
** swiftc
** swift
*** build
*** run
*** package
#+begin_src shell
swift package init --type=executable
#+end_src

* vapor
** container
#+begin_src shell
docker run -it --name vapored -v $(pwd):/app/ -w /app -p 8080:8080 swift:latest bash -c "git clone https://github.com/vapor/toolbox.git -b 18.3.6 && cd toolbox && sed -i 's/sudo//g' Makefile && make install && cd .. && swift run"
#+end_src
