#+TITLE: EcmaScript

* Summary
    :PROPERTIES:
    :TOC:      :include all :depth 2 :ignore this
    :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
    - [[#skills][SKills]]
  - [[#features][Features]]
    - [[#nubers][Nubers]]
  - [[#concepts][Concepts]]
  - [[#books][Books]]
    - [[#eloquent-javascript][Eloquent JavaScript]]
  - [[#sites][Sites]]
    - [[#web-js---misc][Web JS - Misc]]
    - [[#web-js---online-tools][Web JS - Online Tools]]
  - [[#frameworks][Frameworks]]
  - [[#refactoring][Refactoring]]
  - [[#articles][Articles]]
  - [[#interview][Interview]]
  :END:
* Progress
** Books
| Books                           | Cap          | @        |
|---------------------------------+--------------+----------|
| JavaScript The Definitive Guide | 5 Statements | 5.3.1 if |
** SLOC
| Project   | folder                  | file         | @ |
|-----------+-------------------------+--------------+---|
| draggable | src/Draggable/DragEvent | DragEvent.js |   |
| inquirer  |                         |              |   |

* Base
** Types
- Types: numbers, strings, boolean, null, undefined, symbols
- Primitives: numbers, strings, boolean, null, undefined

*** Numbers
|   |           |
|---+-----------|
|   | primitive |
|   | immutable |

- Literals
#+begin_src js
0
3
100000 // or 1_000_000

// hexadecimal

0xff
0xBADCAFE

// ES6 added binary and octal
0b10101
0o377
#+end_src

- floating-point
[digits][.digits][(E|e)[(+|-)]digits]

#+begin_src js
r example:
3.14
2345.6789
.333333333333333333
6.02e23
1.4738223E-32
#+end_src

- Comparison
#+begin_src javascript
0 === -0 // true
1/0 === 1/-0 // false

NaN === NaN // false
Number.isNaN(NaN) // true

#+end_src

**** Arithmetic
- Underflow returns 0.
- underflow from a negative number, returns “negative zero.”
-
#+begin_src js
1 + 1
2 - 2
3 / 2
4 * 5
5 % 1

2 / 0 // Infinity or -  Infinity
0 / 0 // NaN
Infinity / Infinity // NaN
#+end_src
**** BigInt
- not to mix BigInt with regular number

#+begin_src js
1234n
0b111111n
0o7777n
0x8000000000000000n
BigInt()
#+end_src
*** Strings
|            |           |
|------------+-----------|
|            | primitive |
|            | immutable |
| empty      | 0         |
| UTF        | 16        |
| comparable | === / !== |
|            |           |

- arrays of characters
- In ES6, strings are iterable
- ES6 added backstick string
- ES5 allow break string lines w/ backslash '\'
- template literal: `meh ${foo}`
- tagged template literals
- pair of slashes constitutes a regular expression literal

#+begin_src js
'meh "xii"'

"foo \
'bar'"

`fo'o'
   "bar"`
'\n' // newline
'\xA9' // '©'
'\u{1f600}' // '😀'

'Hello ' + 'World' // 'Hello World'

String.raw`\n`.length

/^HTML/
/[1-9][0-9]*/
#+end_src
*** Boolean
|   |           |
|---+-----------|
|   | primitive |
|   | immutable |

- represents truth or falsehood
- falsy values: undefined, null, 0, -0, NaN, ""

#+begin_src js
a === 4 // true
true.toString() // 'true'
#+end_src

*** null
|   |               |
|---+---------------|
|   | primitive     |
|   | immutable     |
|   | no properties |
|   | no methods    |

- indicate the absence of a value
- is a object
- avoid using

#+begin_src js
typeof null // object

#+end_src
*** undefined
|   |               |
|---+---------------|
|   | primitive     |
|   | immutable     |
|   | no properties |
|   | no methods    |

- predefined global constant
- indicate the absence of a value
- the value of variables that have not been initialized,
- object property   or array element that does not exist,
- the return value of functions that do not explicitly return a value
- the value of function parameters for which no argument is passed.
- avoid using

#+begin_src js
typeof undefined // undefined
undefined === null // false
#+end_src

*** Symbols
|   |           |
|---+-----------|
|   | primitive |

- calling Symbol() twice with the same string produces two completely different Symbol values.

#+begin_src js
m = Symbol('meh')
typeof m // 'symbol'
#+end_src

**** methods
- Symbol
- Symbol.iterator
- toString()
- Symbol.for()
- Symbol.keyFor()
** Collection
*** Array
- is a object
**** methods
- Array.from() - ES6

**** conditional property access
#+begin_src js
a?.[index++]
#+end_src
**** methods
***** push

*** Set
*** Map
*** Objects
- mutable
- not comparable
- reference type
- if no arguments are passed to the constructor function in an object creation
  expression, the empty pair of parentheses can be omitted
#+begin_src js
let o = { x: 1 }, p = { x: 1 };
o === p // false

let x = o;
o == x // true

o.x = 2; // change value
o.y = 3; // add

let rectangle = {
    upperLeft: { x: 2, y: 2 },
    lowerRight: { x: 4, y: 5 }
};

o =  new Object()
o =  new Object // same
o.x = 'meh' // {x: 'meh'}
#+end_src


**** Global Object
- the properties of this object are the globally defined identifiers that are available to a JavaScript program.
- global constants like undefined , Infinity , and NaN
- global functions like isNaN() , parseInt(), and eval()
- constructor functions like Date() , RegExp() , String() , Object() , and Array()
- global objects like Math and JSON
***** properties
- global
- globalThis
**** conditional property access
- guard against errors
#+begin_src js
let a = { b: null };
a.b?.c.d // => undefined
#+end_src
**** methods
***** Object.values
#+begin_src js
let sum = 0;
for(let v of Object.values(o)) {
sum += v;
}
sum // => 6
#+end_src
***** Object.keys
#+begin_src js
let o = { x: 1, y: 2, z: 3 };
let keys = "";
for(let k of Object.keys(o)) {
keys += k;
}
keys // => "xyz"
#+end_src
***** Object.entries
#+begin_src js
let pairs = "";
for(let [k, v] of Object.entries(o)) {
pairs += k + v;
}
pairs // => "x1y2z3"
#+end_src

** Operators
*** arithmethic
*** in
returns true if the specified property is in the specified object or its
prototype chain.
*** instance
 tests to see if the prototype property of a constructor appears anywhere in the
 prototype chain of an object. The return value is a boolean value.

- If the left-side operand ofinstanceof is not an object, instanceof returns false .
- If the righthand side is not a class of objects, it throws a TypeError .

#+begin_src js
let d = new Date();
d instanceof Date
d instanceof Object
d instanceof Number
let a = [1, 2, 3];
a instanceof Array
a instanceof Object
a instanceof RegExp

//Create a new object with the Date() constru
//=> true: d was created with Date()
//=> true: all objects are instances of Object
//=> false: d is not a Number object
//Create an array with array literal syntax
//=> true: a is an array
//=> true: all arrays are objects
//=> false: arrays are not regular expressions
#+end_src
*** miscellaneous
**** conditional operator (?:)
#+begin_src js
greeting = "hello " + (username ? username : "there");
#+end_src
**** typeof
- specifies the type of the operand.
#+begin_src js
(typeof value === "string") ? "'" + value + "'" : value.toString()
#+end_src
**** delete
- unary operator
- attempts to delete the object property or array element specified
- when a property is deleted, the property ceases to exist.
- expects its operand to be an lvalue
- in strict mode, delete raises a SyntaxError if its operand is an unqualified identifier

#+begin_src js
let o = { x: 1, y: 2};
delete o.x;

let a = [1,2,3];
delete a[2];

let o = {x: 1, y: 2};
delete o.x; // Delete one of the object properties; returns true.
typeof o.x;// Property does not exist; returns "undefined".
#+end_src
**** await
- only legal within functions that have been declared asynchronous with the async keyword.
- The value of the await operator is the fulfillment value of the Promise object.

**** First-Defined (??)
- short-circuiting
- irst operand is “nullish” (i.e., null or undefined ) that this operator evaluates and returns the second operand
#+begin_src js
let max = maxWidth ?? preferences.maxWidth ?? 500;
#+end_src
**** void
- unary operator
- evaluates its operand, then discards the value and returns undefined
**** comma (,)
- evaluates its left operand, evaluates its right operand, and then returns the value of the right operand

** Expressions
*** Logical Expression
**** or
#+begin_src js
let max = maxWidth || preferences.maxWidth || 500;
#+end_src
**** not
- unary operator
- invert the boolean value of its operand
- always returns true or fals

#+begin_src js
// DeMorgan's Laws
!(p && q) === (!p || !q) // => true: for all values of p and q
!(p || q) === (!p && !q) // => true: for all values of p and q
#+end_src
*** Assignment Expression
- left-side operand to be an lvalue

**** let
- default value is undefined if not assigned

#+begin_src js
let meh = 'foo'
let i, sum;
#+end_src
**** Const
- same as let
- must initialized at declaration
- attempt to change its value throws a TypeError
- is a convention to declare constants with all capital letters

#+begin_src js
const FOO = 'bar'
const H0 = 74;
const C = 299792.458;
const AU = 1.496E8;
#+end_src
**** var
- do not have block scope
- outside of a function body, it declares a global variable.
- legal to declare the same variable multiple times with var
#+begin_src js
var x;
var data = [], count = data.length;
for(var i = 0; i < count; i++) console.log(data[i]);
#+end_src
**** destructuring assignment
- The number of variables on the left of a destructuring assignment does not have to match the number of array elements on the right.
- Extra variables on the left are set to undefined , and extra values on the right are ignored.
- The list of variables on the left can include extra commas to skip certain values on the right:
- ... to collect all unused or remaining values into a single variable when destructuring an array, before the last variable name

#+begin_src js
let [x,y] = [1,2];
[x,y] = [x+1,y+1];

let [x,y] = [1]; // x == 1; y == undefined
[x,y] = [1,2,3]; // x == 1; y == 2
[,x,,y] = [1,2,3,4]; // x == 2; y == 4

let [x, ...y] = [1,2,3,4]; // y == [2,3,4]
let [a, [b, c]] = [1, [2,2.5], 3]; // a == 1; b == 2; c == 2.5

let transparent = {r: 0.0, g: 0.0, b: 0.0, a: 1.0}; // A RGBA color
let {r, g, b} = transparent; // r == 0.0; g == 0.0; b == 0.0

let points = [{x: 1, y: 2}, {x: 3, y: 4}];// An array of two point objects
let [{x: x1, y: y1}, {x: x2, y: y2}] = points; // destructured into 4 variables.
(x1 === 1 && y1 === 2 && x2 === 3 && y2 === 4) // => true

let points = { p1: [1,2], p2: [3,4] };// An object with 2 array props
let { p1: [x1, y1], p2: [x2, y2] } = points;// destructured into 4 vars
(x1 === 1 && y1 === 2 && x2 === 3 && y2 === 4) // => true
#+end_src
*** eval
**** indirect
#+begin_src js
eval
#+end_src
**** direct
#+begin_src js
eval()
#+end_src
**** strict eval
- local eval with a private variable environment.
- not allowed to overwrite the eval() function with a new value.
- not allowed to declare a variable, function, function parameter, or catch block parameter with the name “eval”
** Statements
*** Expression
#+begin_src js
greeting = "Hello " + name;
i *= 3;
#+end_src
*** block
- does not end with a semicolon
#+begin_src js
{
    x = Math.PI;
    cx = Math.cos(x);
    console.log("cos(π) = " + cx);
}
#+end_src
*** empty
- allows you to include no statements where one is expected.
#+begin_src js
;
#+end_src
*** conditionals
**** if
*** loops
**** while
**** do/while
**** for
**** for/await
**** for/of
- requires an iterable object
- ES6
- favor it for arrays

**** for/in
- works with any object after the in.
- loops through the property names of a specified object.
- If it evaluates to null or undefined , the interpreter skips the loop and moves on to the next statement.
- pre-ES6, may be a source of bugs with ES6 additions
*** with
runs a block of code as if the properties of a specified object were variables
in scope for that code.

- forbidden in strict mode, avoid using it whenever possible.
- creates a temporary scope with the properties of object as variables and then executes statement within that scope.
- const or let or var to declare a variable or constant within the body of a
  with statement, it creates an ordinary variable and does not define a new
  property within the specified object.

#+begin_src js
with (object)
    statement
#+end_src

#+begin_src js
let f = document.forms[0];
f.name.value = "";
f.address.value = "";
f.email.value = "";

with(document.forms[0]) {
// Access form elements directly here. For example:
  name.value = "";
  address.value = "";
  email.value = "";
}
#+end_src
*** debugger

** Errors
*** throw

#+begin_src js
throw expression;
#+end_src

*** exceptions
exceptions are thrown whenever a runtime error occurs and whenever the program
explicitly throws one using the throw statement.
*** try/catch/finally
- catch and finaly are optional but one must be present
- variable in catch
- value associated with the exception (an Error object, for example) is assigned to this parameter.

#+begin_src js
try {
// Ask the user to enter a number
let n = Number(prompt("Please enter a positive integer", ""));
// Compute the factorial of the number, assuming the input is valid
let f = factorial(n);
// Display the result
alert(n + "! = " + f);
}
catch(ex) {
// If the user's input was not valid, we end up here
alert(ex); // Tell the user what the error is
}
#+end_src
Simulate *for* in a *while* w/ the aid of try/catch
#+begin_src js
// Simulate for(initialize ; test ;increment ) body;
initialize ;
while( test ) {
try { body ; }
finally { increment ; }
}
#+end_src

Bare catch
#+begin_src js
function parseJSON(s) {
try {
return JSON.parse(s);
} catch {
// Something went wrong but we don't care what it was
return undefined;
}
}
#+end_src

** Functions
- is an object

#+begin_src js
function meh() { return 'meh' }
meh // [Function: meh]
meh() // 'meh'
#+end_src
*** Template tag functions
*** Conditional Invocation
- if the expression to the left of the ?. evaluates to null or undefined , then
  the entire invocation expression evaluates to undefined and no exception is
  thrown.
- if the value to the left of ?. is null or undefined , then none of the
  argument expressions within the parentheses are evaluated
#+begin_src js
function square(x, log) {
    log?.(x);
    return x * x;
}
#+end_src
*** yield
- only in ES6 generator functions
** Modes
*** Strict mode
- attempt to use an undeclared variable gets a reference error
- ES5 directive
- can appear only at the start of a script or at the start of a function body
- scope where is set get strict: global, function, module, class

#+begin_src js
"use strict";
#+end_src
*** Non-stric
- attempt to use an undeclared variable ends up creating a new global variable.


Asynchronous Control Flow Patterns with Promises and Async Await
* Concepts
** Hoisting
* Library
** Numbers
- do not accept BigInt

#+begin_src js
Number.NEGATIVE_INFINITY
-Number.MAX_VALUE * 2
Number.NaN
Number.MIN_VALUE/2
-Number.MIN_VALUE/2
Number.parseInt()
Number.parseFloat()
Number.isNaN(x)
Number.isFinite(x)
Number.isInteger(x)
Number.isSafeInteger(x)
Number.MIN_SAFE_INTEGER
Number.MAX_SAFE_INTEGER
Number.EPSILON
#+end_src
** RegExp
- constructor function
*** Date
** Error
- constructor function
** Date
- constructor function
