#+TILE: Containers - Annotations

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#progresso][Progresso]]
  - [[#books][books]]
  - [[#sloc][sloc]]
- [[#commands][Commands]]
  - [[#container][container]]
  - [[#volume][volume]]
  - [[#login][login]]
  - [[#images][images]]
  - [[#image][image]]
  - [[#system][system]]
  - [[#network][network]]
- [[#volumes][Volumes]]
- [[#exit][Exit]]
  - [[#stopquitdetach][Stop/Quit/Detach]]
- [[#images-registry][Images Registry]]
- [[#terms][Terms]]
- [[#best-practices][Best practices]]
  - [[#multi-stages][Multi-stages]]
- [[#example][Example]]
- [[#tips][Tips]]
  - [[#remove-all][Remove all]]
:END:
* Progresso
** books
| books                 | chapter               | at                            |
|-----------------------+-----------------------+-------------------------------|
| Mastering Docker      | 4 Managing Containers | Docker networking and volumes |
| Docker for Developers |                       |                               |

** sloc
| sloc           | @ | file | line |
|----------------+---+------+------|
| awesome-docker |   |      |      |

* Commands
** container
*** attach
|                          |   |
|--------------------------+---|
| <image>                  |   |
| --sig-proxy=<true/false> |   |
*** commit
Create a new image from a container’s changes
*** create
does not start the container, but instead prepares and configures one:

#+begin_src sh
docker container create --name nginx-test -p 8080:80 nginx
#+end_src
*** cp
Copy the contents of SRC_PATH to the DEST_PATH.

#+begin_src shell
docker container cp nginx-test:/tmp/testing testing
#+end_src
*** diff
- A: added
- C: changed
- D: deleted

#+begin_src shell
podman container diff sample
#+end_src
*** exec
|    |                           |
|----+---------------------------|
| -i | run process interactively |
| -t | provide tty               |
| -e | define env vars           |
| -d | run as daemon             |
*** kill
The docker kill subcommand kills one or more containers. The main process inside
the container is sent SIGKILL signal (default), or the signal that is specified
with the --signal option. You can reference a container by its ID, ID-prefix, or
name.
*** ls
|    |                                                             |
|----+-------------------------------------------------------------|
| -h | display help                                                |
| -a | Show all the containers, default is only running containers |
| -q | containers ID                                               |
| -l |                                                             |
*** logs
|                   |   |
|-------------------+---|
| --tail <N>        |   |
| --follow          |   |
| --since <date>    |   |
| --timestamp or -t |   |

#+begin_src shell
docker container logs --tail 5 nginx-test
docker container logs -f nginx-test
docker container logs --since 2020-03-28T15:52:00 nginx-test
docker container logs --since 2020-03-28T15:52:00 -t nginx-test
#+end_src
*** inspect
|               |   |
|---------------+---|
| ID            |   |
| -f / --filter |   |

#+begin_src sh
docker container inspect nginx-test
#+end_src
*** pause
Pause all proces

*** prune
Removes all non running containers
*** port
#+begin_src shell
docker container port nginx-test
#+end_src
*** run
#+begin_src shell
podman container run --name test -it -v sample:/data alpine /bin/sh
docker run -p 3000:3000 railsapp
docker run -it --rm --privileged --pid=host fundamentalsofdocker/nsenter
docker container run -d --name nginx-test --cpu-shares 512 --memory 128M -p 8080:80 nginx
docker container run -d --name redis --network moby-counter redis:alpine
#+end_src

#+begin_src shell
for i in {1..5}; do docker container run -d --name nginx$(printf "$i") nginx; done
#+end_src

**** options
|                          |                                                    |
|--------------------------+----------------------------------------------------|
| -v <NAME:/WHERE>         |                                                    |
| -p --publish <PORT:PORT> |                                                    |
| --cpu-shares <INT>       |                                                    |
| --memory <INT>           |                                                    |
|                          |                                                    |
| -d or --detach           | run container in background and print container ID |
| --name <NAME>            | set name                                           |
| -p <ii:II>               | port                                               |
| -i                       | interactively                                      |
| -t                       | tty                                                |
| --pid=<HOST>             |                                                    |
| --privileged             |                                                    |

*** rm
removes one or more containers from the host. The container name or ID can be used.

Command does not remove images. Running or unusable containers will not be removed without the -f option.

#+begin_src shell
docker container stop nginx3 && docker container rm nginx3
#+end_src

|           |   |
|-----------+---|
| --storage |   |
*** restart
Restart one or more containers
*** stats
Display a live stream of container(s) resource usage statistics

#+begin_src sh
docker stats nginx-test
#+end_src
*** stop
#+begin_src sh
 docker container stop -t 60 nginx3
#+end_src

|              |   |
|--------------+---|
| --time or -t |   |
*** start
*** top
#+begin_src shell
Display the running processes of a container
#+end_src

#+begin_src sh
docker container top nginx-test
#+end_src

*** update
Update configuration of one or more containers

#+begin_src sh
docker container update --cpu-shares 512 --memory 128M nginx-test
docker container update --cpu-shares 512 --memory 128M --memory-swap 256M nginx-test
#+end_src
*** unpause
*** pause
*** ps
|       |   |
|-------+---|
| --all |   |

#+begin_src sh
docker ps -a
docker ps --filter "status=exited"
#+end_src
** volume
*** create
**** options
|          |                                   |
|----------+-----------------------------------|
| --driver | select a different volume driver. |
|          |                                   |


*** inspect
** login
#+begin_src shell
docker login -u gnschenker -p <my secret password>
#+end_src
** images
** image
*** ls
*** pull
#+begin_src shell
docker image pull alpine
docker image pull alpine:3.5
#+end_src
*** build
|                     |   |
|---------------------+---|
| --file <dockerfile> |   |
| --tag <local:name>  |   |

#+begin_src shell
docker image build -t pinger .
#+end_src

*** history
Show the history of an image

|        |   |
|--------+---|
| <NAME> |   |
*** inspect
inspect --options  <ID>
**** -f
*** save
#+begin_src shell
podman image save -o ./backup/my-alpine.tar my-alpine
podman image load -i ./backup/my-alpine.tar
#+end_src
*** tag
#+begin_src shell
docker tag 7146a802571b railsapp
#+end_src
*** prune

** system
*** prune
** network
*** ls
*** prune
* Volumes
* Exit
** Stop/Quit/Detach
|         |          |
|---------+----------|
| C-c     | stop all |
| C-p C-q | detach   |
| c-d     | kill     |

* Images Registry
- https:/​/​cloud.​google.​com/​container-​registry
- https:/​/​aws.​amazon.​com/​ecr/​
- https:/​/​azure.​microsoft.​com/​en-​us/
- https:/​/​access.​redhat.​com/​containers/​
- https:/​/​jfrog.​com/​integration/​artifactory-docker-​registry/​
* Terms
- kernel namespace & cgropus
- noisy-neighbor problem
- common vulnerabilities and exposures (CVEs)
- content trust
- man-in-the-middle (MITM)
* Best practices
- should be ephemeral
- order individuals commands so to leverage caching as much as possible
- less layers by combining related commands, smaller images, faster builds and startup times
- use .dockerignore to keep image as lean as possible by not copy unnecessary files
- avoid installing unnecessary packages
- use multi-stages builds

** Multi-stages
*** eg
#+begin_src shell
FROM alpine:3.7 AS build
RUN apk update && \
    apk add --update alpine-sdk
RUN mkdir /app
WORKDIR /app
COPY . /app
RUN mkdir bin
RUN gcc hello.c -o bin/hello

FROM alpine:3.7
COPY --from=build /app/bin/hello /app/hello
CMD /app/hello
#+end_src
* Example
- Rails

#+begin_src ruby
apt-get libsqlite3-dev apt-utils autoconf bison build-essential g++  libgconf-2-4 libgdbm-dev libncurses5-dev libreadline-dev libreadline-dev libssl-dev libxi6 xvfb zip zlib1g-dev \
#+end_src

#+begin_src dockerfile
FROM ruby:2.7.5-slim-bullseye

RUN apt-get update -yqq && apt-get install -yqq apt-utils autoconf bison build-essential curl g++ gcc git libffi-dev libgconf-2-4 libgdbm-dev libncurses5-dev libreadline-dev libreadline-dev libsqlite3-dev libssl-dev libxi6 libyaml-dev make sqlite3 xvfb zip zlib1g-dev fish zile
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && apt-get install -y nodejs

COPY . /usr/src/app/
WORKDIR /usr/src/app

RUN npm install --global npm yarn@1.22.17
RUN gem install bundler:2.3.3 rails:6.1.4.4 && bin/setup && bin/rails webpacker:install

#+end_src

#+begin_src yaml
version: '3.8'

services:

  web:
    build: .
    ports:
      - "3000:3000"
#+end_src
RUN apt-get update -yqq && apt-get install -yqq postgresql postgresql-contrib libpq-dev
curl make gcc g++ git libffi-dev libyaml-dev
* Tips
** Remove all
#+begin_src shell
# Stop all containers
docker stop `docker ps -qa`

# Remove all containers
docker rm `docker ps -qa`

# Remove all images
docker rmi -f `docker images -qa `

# Remove all volumes
docker volume rm $(docker volume ls -qf)

# Remove all networks
docker network rm `docker network ls -q`
#+end_src
