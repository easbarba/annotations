#+TITLE: Dots GNU Legacy

* .bash_profile
#+begin_src shell
#!/usr/bin/env bash

# * TTY1
if [ -z "${DISPLAY}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
    mkdir -pv ~/.local/share/xinit
    exec startx 2>>~/.local/share/xinit/errors
fi

# * TTY3
if [ "$(tty)" = "/dev/tty3" ]; then
    export SWAYSOCK=/run/user/$(id -u)/sway-ipc.$(id -u).$(pgrep -x sway).sock
    exec sway
fi

#+end_src
* .bashrc
   #+BEGIN_SRC shell-script

   # ------------------------------
   # SHELL - CLI SOFTWARE
   # ------------------------------

   a-projects-update ()
   {
       a-welcome " -- Git Projects Puller"

       # Update git projects in granchild folders
       # set arguments as default dir
       # DIR should parent folder:
       # - Parent
       #   + Child
       #     + GrandChild
       #     + GrandChild
       #   + Child
       #     + GrandChild
       #     + GrandChild
       #   + Child

       if [[ $# = 0 ]]; then
	   DIR="$HOME/Projects"
       else
	   DIR="$1"
       fi

       a-notify " -- DIR is now $DIR"
       a-cd "$DIR"

       a-notify " -- Enter Sub Folders"
       for directory in *; do
	   if [ -d "${directory}" ]; then
	       # Ignore personal projects (require git pass)
	       if [ "${directory}" == "personal"  ]; then
		   continue
	       else
		   cd "${directory}"
	       fi

	       a-notify " -- Updating Git Projects"
	       for directory in *; do
		   if [ -d "${directory}" ]; then
		       cd "${directory}"
		       git clean -fdx
		       git pull origin master

		       cd ..
		       # pwd
		   fi
	       done

	       cd ..
	       # pwd
	   fi
       done

       a-sucess "Done"
   }

   a-projects-send ()
   {
       a-welcome "Zipping Projects"

       a-notify " -- Remove zipped folder"
       a-folder-exist-do "$HOME/Downloads/zipped" "rm -rf"

       a-notify " -- Enter zipped folder"
       a-folder-not-exist-do "$HOME/Downloads/zipped" "mkdir" "yes"

       a-notify " -- Downloading Projects"
       zip=(https://github.com/python/cpython
	    https://github.com/pypa/pip
	    https://github.com/pypa/wheel
	    https://github.com/pypa/setuptools
	    https://github.com/django/django
	    https://github.com/palantir/python-language-server
	    https://github.com/PyCQA/pylint
	    https://github.com/sbcl/sbcl
	    https://github.com/quicklisp/quicklisp-bootstrap
	    https://gitlab.common-lisp.net/alexandria/alexandria/-/archive/master/alexandria-master.zip
	    httpsn://gitlab.common-lisp.net/asdf/asdf/-/archive/master/asdf-master.zip
	    https://github.com/atlas-engineer/next
	    https://github.com/stumpwm/stumpwm
	    https://github.com/stumpwm/stumpwm-contrib
	    https://github.com/emacs-lsp/lsp-mode
	    https://github.com/lxbarbosa/emacs-lisp-style-guide
	    https://github.com/joaotavora/eglot
	    https://github.com/emacs-mirror/emacs)

       for i in "${zip[@]}"; do wget "$i/archive/master.zip"; done

       # a-notify " -- Add suffix .zip to non .zip suffixed files"
       # for i in $(ls -r *.zip.*); do
       #     mv "$i" "$i.zip"
       # done

       echo " -- Zip files to Projects Titles (master.zip)"

       a-notify " -- Extracting zipped Projects"
       if [ -x "$(command -v unzip)" ]; then
	   # ignore folders
	   for file in $(ls -r); do
	       if [ -d "${file}" ]; then
		   continue
	       fi

	       unzip "$file"
	   done
       fi

       a-notify " -- Remove Projects Zipped files"
       for file in $(ls -r *.zip); do
	   if [ -d "${file}" ]; then
	       continue
	   fi

	   rm "${file}"
       done

       a-notify " -- Zip Projects folders"
       if [ -x "$(command -v zip)" ]; then
	   for file in $(ls -r); do
	       if [ -d "${file}" ]; then

		   zip -r "${file}.zip" "${file}"
	       fi
	   done
       fi

       a-notify " -- Remove Projects Folders"
       for file in $(ls -r); do
	   if [ -d "${file}" ]; then
	       rm -rf "${file}"
	   fi
       done

       a-notify " -- Send zipped projects to Mobile Phone"
       kdeconnect-cli -d $(kdeconnect-cli -l --id-only) --share \
		      "$HOME"/Downloads/zipped/*.zip
   }


   # -- install
   ((echo -e " -- Make HOME Default Directories"
     mkdir -pv "$HOME"/{Documents,Pictures,.config/screen,.local/{bin,share/fonts}})

    DATA_FOLDER="/data"

    (echo -e " -- symbolic linking DATA_FOLDER directories to HOME"

     folders=(Books
	      Music
	      Videos)

     for i in "${folders[@]}"; do
	 ln -sfv "$DATA_FOLDER/$i" "$HOME/$i"
     done)

    (if [ ! -x "$(command -v emacs)" ]; then
	 echo -e "-- NULL -- GNU Emacs IS NOT INSTALLED. jeez."
     else
	 cd "$DATA_FOLDER/dots" || echo "There is no $_ folder"

	 echo -e " -- Tangling HOME files"
	 emacs --batch -l org dotfiles.org -f org-babel-tangle
     fi)
   )
   #+END_SRC
* bashrc
   #+begin_src shell-script
   e_asdf()
   {
       source "$HOME/.asdf/completions/asdf.bash"
       source "$HOME/.asdf/asdf.sh"
   }


   e-startx()
   {
       if [ -z "${DISPLAY}" ] && [ -n "${XDG_VTNR}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
	   exec startx
       fi
   }

   #+end_src
* shell-custom
#+begin_src shell-script

#!/usr/bin/env bash

# Debug Options
set -euo pipefail

FOLDER="$HOME/bin"
mkdir -pv $FOLDER

BINARIES=("https://raw.githubusercontent.com/dylanaraps/pfetch/master/pfetch")

COMMAND="wget -c -P $FOLDER"
e_dolist "$COMMAND" "${BINARIES[@]}"

   #!/usr/bin/env bash

      packages()
      {
	  echo 'Installing packages'

	  # local packages=()

	  # for pack in "${packages[@]}"
	  # do
	  # done
      }

      # * RUN

      echo 'Elixir - ASDF'

      asdf_erlang
      asdf_elixir
      packages



      # set -e

      source "$HOME/.asdf/completions/asdf.bash"
      source "$HOME/.asdf/asdf.sh"

      asdf_lisp()
      {
	  # https://github.com/asdf_vm/asdf_elixir

	  [[ -f "$HOME/.asdf/shims/elixir" ]] && return


	  echo 'Installing Elixir binaries'
	  asdf plugin-add sbcl https://github.com/smashedtoatoms/asdf-sbcl.git

	  asdf install sbcl latest

	  asdf global sbcl "$(asdf latest sbcl)"
      }

      asdf_sbcl()
      {
	  # https://github.com/asdf-vm/asdf-erlang
	  a-welcome "Building: SBCL"

	  echo " -- Cleaning"
	  rm -rf "$HOME_LOCAL_LIB/sbcl"
	  rm -rf "$HOME_LOCAL_BIN/sbcl"
	  rm -rf "$XDG_DATA_HOME/doc/sbcl"

	  a-clone git://git.code.sf.net/p/sbcl/sbcl "$PROJECTS/lisp/sbcl"

	  a-cd "$PROJECTS/lisp/sbcl"
	  git reset --hard
	  git clean -fdx
	  git pull

	  export -n SBCL_HOME

	  echo " -- Comping SBCL"
	  sh make.sh --fancy --prefix="$HOME_LOCAL"
	  INSTALL_ROOT="$HOME_LOCAL" sh install.sh

	  export SBCL_HOME="$HOME_LOCAL_LIB/sbcl"

	  a-sucess "Done"
      }

      packages()
      {
	  echo 'Installing packages'

	  # local packages=()

	  # for pack in "${packages[@]}"
	  # do
	  # done
      }

      # * RUN

      echo 'Elixir - ASDF'

      asdf_lisp
      packages



      e_path_rust()
      {
	  export PATH="${HOME}/.cargo/bin":${PATH}
      }

      e_path_rbenv()
      {
	  local rbenv_dir="$HOME/.rbenv"

	  local rbenv_shims="$rbenv_dir/shims"
	  local rbenv_bin="$rbenv_dir/bin"

	  export PATH="$rbenv_bin"${PATH:+:}$PATH
	  export PATH="$rbenv_shims"${PATH:+:}$PATH
      }

      e-packs-cargo()
      {
	  echo 'Installing cargo packages'

	  local packages=(starship alacritty)

	  for pack in "${packages[@]}"
	  do
	      cargo install "$pack"
	  done
      }

      e-packs-rustup()
      {
	  # rls needs toolchain to work
	  rustup component add rls --toolchain stable-x86_64-unknown-linux-gnu
      }

      e-packs-rbenv()
      {
	  export RBENV_DIR="$HOME/.rbenv"
	  export RUBY_BUILD_DIR="$RBENV_DIR/plugins/ruby-build"
	  export RUBY_SHIMS_DIR="$RBENV_DIR/shims"

	  local rbenv_binary="$HOME/.rbenv/bin/rbenv"

	  export PATH="$RUBY_SHIMS_DIR"${PATH:+:}$PATH

	  [[ ! -x "$RBENV_DIR/bin" ]] && git clone https://github.com/rbenv/rbenv.git "$RBENV_DIR"

	  # Set up rbenv in your shell.
	  $rbenv_binary init

	  curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash

	  [[ ! -x "$RUBY_BUILD_DIR" ]] && git clone https://github.com/rbenv/ruby-build "$RUBY_BUILD_DIR"
	  [[ ! -x "$RUBY_BUILD_DIR" ]] && git -C "$RUBY_BUILD_DIR" pull

	  # compile dynamic bash extension
	  cd "$RBENV_DIR" && src/configure && make -C src

	  local version=2.7.2
	  $rbenv_binary install $version
	  $rbenv_binary global $version && rbenv rehash
      }

      e-packs-asdf-elixir()
      {
	  echo 'Installing elixir binaries'

	  # https://github.com/asdf-vm/asdf-erlang
	  # https://github.com/asdf-vm/asdf-elixir

	  asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
	  asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git

	  asdf install erlang latest
	  asdf install elixir latest

	  asdf global "$(asdf latest erlang)"
	  asdf global "$(asdf latest elixir)"
      }

      e-packs-rvm()
      {
	  gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB

	  curl -sSL https://get.rvm.io | bash -s stable

	  source "$HOME/.rvm/scripts/rvm"

	  rvm get stable
      }


      e_path_nvm()
      {
	  local nvm_dir="$HOME/.config/nvm"

	  [ -s "$nvm_dir/nvm.sh" ] && source "$nvm_dir/nvm.sh"  # Loads NVM
	  [ -s "$nvm_dir/bash_completion" ] && source "$nvm_dir/bash_completion"  # Loads NVM Bash Completion

	  local nvm_bin="$(nvm_version_dir)/$(nvm_version)/bin"
	  export PATH="$nvm_bin"${PATH:+:}$PATH
      }

      rust=(pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev python3)

      e-packs-nvm()
      {
	  local nvm_dir="$HOME/.config/nvm"

	  if [[ ! -d ${nvm_dir} ]]; then
	      git clone https://github.com/nvm-sh/nvm.git ${nvm_dir}
	  else
	      cd ${nvm_dir} && git pull
	  fi

	  source ${nvm_dir}/nvm.sh

	  nvm install node
      }

      e-packs-flatpak()
      {
	  echo 'Installing flatpak packages'

	  local packages=(com.spotify.Client com.valvesoftware.Steam com.visualstudio.code com.skype.Client)

	  for pack in "${packages[@]}"
	  do
	      flatpak install flathub "${pack}"
	  done
      }

      e_path_luarocks()
      {
	  export PATH="$HOME/.luarocks/bin"${PATH:+:}$PATH
      }

      e-debian()
      {

	  elixir=(build-essential autoconf m4 libncurses5-dev
		  libwxgtk3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev
		  libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev
		  openjdk-11-jdk)

      }
      e-ubuntu()
      {
	  sudo systemctl set-default multi-user.target
	  xorg=(xorg x11-apps xinit xdotool dbus-x11 xserver-xorg-input-synaptics xserver-xorg-input-libinput xserver-xorg-input-kbd awesome)

	  util-linux alsa-utils network-manager stterm
	  lua5.4 luarocks lua-check
	  gnome-keyring
	  ssh-askpass-gnome
	  network-manager-gnome

	  wm_packages=(rofi aria2 socat dunst udiskie unclutter scrot libnotify-bin seahorse gconf2 ranger w3m highlight odt2txt lynx mediainfo xautolock caca-utils x11proto-dev libfile-mimeinfo-perl dmenu xdg-utils mpd mpc ncmpc ncmpcpp mpv screenkey brightnessctl tlp acpi-call)

	  firewalld firewall-config firewall-applet
      }


      # Findfile and find content
      # f() { find . -iname "*$1*" $(@:2)}
      # r() { grep "$1" $(@:2)} -R . }

      function yarn {
	  # Non-debian repositories
	  if [ ! $(command -v yarn) ]; then
	      cd ${HOME}

	      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
	      echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

	      sudo apt update
	      sudo apt -y install yarn
	  fi
      }

      elx-dotnet ()
      {
	  local packages=("PowerShell" "dotnet-aspnet-codegenerator" "dotnet-script")

	  # iunstall
	  for pack in "${packages[@]}"
	  do
	      dotnet tool update --global "${pack}"
	  done

	  # update
	  for pack in "${packages[@]}"
		      f    do
		      dotnet tool install --global "${pack}"
		   done
      }


      elx-cabal()
      {
	  cabal update

	  local packages=(hlint xmonad xmonad-contrib)

	  for pack in "${packages[@]}"
	  do
	      cabal new-install --lib --upgrade "$pack" --user
	  done
      }


      debian(){
	  mpd mpc ncmpc ncmpcpp

	  # rvm
	  sudo apt install -y bison libgdbm-dev libncurses5-dev libyaml-dev libreadline6-dev

	  if [ ! -x "$(command -v mono)" ]; then
	      sudo apt install -y apt-transport-https dirmngr gnupg ca-certificates
	      sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
	      echo "deb https://download.mono-project.com/repo/debian stable-buster main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list

	      sudo apt update
	      sudo apt install -y -t stable-buster mono-complete
	  fi
	  xmonad libghc-xmonad-dev \
		 libghc-xmonad-contrib-dev yabar xmobar
	  if [ ! -x "$(command -v monodevelop)" ]; then
	      sudo apt install -y apt-transport-https dirmngr
	      sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
	      echo "deb https://download.mono-project.com/repo/debian vs-buster main" | sudo echo tee /etc/apt/sources.list.d/mono-official-vs.list

	      sudo apt update
	      sudo apt install -y monodevelop
	  fi

	  if [ ! -x "$(command -v dotnet)" ]; then
	      wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
	      sudo dpkg -i packages-microsoft-prod.deb

	      sudo apt update
	      sudo apt install -y dotnet-sdk-3.1
	  fi

	  # xmonad
	  sudo apt install libmagic-dev

	  # Kitty
	  sudo apt install -y libdbus-1-dev libxcursor-dev libxrandr-dev libxi-dev libxinerama-dev libgl1-mesa-dev libxkbcommon-x11-dev libfontconfig-dev and libpython-dev

	  ranger w3m highlight odt2txt lynx mediainfo xautolock \
		 caca-utils
	  # clang/llvm
	  sudo apt install -y libclang-8-dev llvm-dev
	  sudo apt install -y libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
	       libsqlite3-dev libncurses5-dev libncursesw5-dev xz-utils tk-dev \
	       libffi-dev liblzma-dev python-openssl

	  xmonad libghc-xmonad-dev libghc-xmonad-contrib-dev \
		 cabal-install xmobar

	  i3 i3lock i3blocks sway swaylock

	  # python3
	  sudo apt -y build-dep python3
	  # python package deps
	  $install libgirepository1.0-dev libvirt-dev libsmbclient-dev \
		   libcups2-dev libxslt1-dev libsdl1.2-dev
	  # Lisp
	  $install libfixposix-dev
	  # ghcup
	  $install build-essential curl libffi-dev libffi6 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5
	  # xmonad/cabal
	  $install libxss-dev


	  nim
	  sudo apt install -y xorg-dev libgtk2.0-dev libjpeg-dev libncurses5-dev libdbus-1-dev \
	       libgif-dev libtiff-dev
	  sudo apt install -y libm17n-dev libpng-dev librsvg2-dev libotf-dev libgnutls28-dev \
	       libxml2-dev # emacs bulding dependencies

	  clangd clang-format
	  libvirt-clients libvirt-daemon-system libvirt-dev libvirt0 virt-manager
	  postgresql  postgresql-client postgresql-doc   pgadmin3 phppgadmin
	  epiphany-browser
	  # FLOSS Projects
	  sudo apt install -y libevent-dev
	  # emacs vterm
	  sudo apt install -y libvterm-bin libvterm-dev
	  sudo apt install -y libwwwbrowser-perl libnotify-bin libarchive-tools
	  sudo apt install -y libqt4-dev libcrypto++-dev libsqlite3-dev libc-ares-dev \
	       libcurl4-openssl-dev
	  sudo apt install -y libssl-dev libedit-dev libclang-7-dev

	  # nEXT
	  sudo apt install -y sbcl libwebkit2gtk-4.0-dev glib-networking sqlite \
	       gsettings-desktop-schemas libfixposix-dev libgstreamer1.0-0 \
	       gir1.2-gst-plugins-base-1.0 xclip notify-osd


	  if [ ! -x "$(command -v composer)" ]; then
	      cd "$HOME/bin/" || "$HOME/bin/" && cd "$HOME/bin/" || exit

	      EXPECTED_SIGNATURE="$(wget -q -O - https://composer.github.io/installer.sig)"
	      php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
	      ACTUAL_SIGNATURE="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

	      if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
	      then
		  >&2 echo 'ERROR: Invalid installer signature'
		  rm composer-setup.php
		  exit 1
	      fi

	      php composer-setup.php --quiet
	      RESULT=$?
	      rm composer-setup.php
	      exit $RESULT
	  fi
      }

      ubuntu(){
	  sudo apt install -y libwwwbrowser-perl libnotify-bin libarchive-tools
	  sudo apt install -y libqt4-dev libcrypto++-dev libsqlite3-dev libc-ares-dev \
	       libcurl4-openssl-dev
	  sudo apt install -y libssl-dev libedit-dev libclang-7-dev
	  sudo apt install -y xorg-dev libgtk2.0-dev libjpeg-dev libncurses5-dev libdbus-1-dev \
	       libgif-dev libtiff-dev
	  sudo apt install -y libm17n-dev libpng-dev librsvg2-dev libotf-dev libgnutls28-dev \
	       libxml2-dev # emacs bulding dependencies
	  sudo apt install -y libpng-dev zlib1g-dev libpoppler-glib-dev \
	       libpoppler-private-dev # pdf-tools
	  sudo apt install -y ghostscript mupdf-tools poppler-utils texlive-binaries \
	       unoconv djvulibre-bin ncurses-dev # libreoffice-common
	  sudo apt install -y texlive-latex-base texlive-fonts-recommended \
	       texlive-latex-extra # texlive-rotating texlive-capt-of
	  sudo apt install -y uuid-dev libicu-dev icu-devtools libedit-dev libxml2-dev \
	       libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config \
	       libcurl4-openssl-dev systemtap-sdt-dev tzdata rsync

	  # python deps
	  sudo apt install -y libgirepository1.0-dev libvirt-dev libsmbclient-dev \
	       libcups2-dev libxslt1-dev libsdl1.2-dev
	  # clang/llvm
	  sudo apt install -y libclang-8-dev llvm-dev
	  sudo apt install -y  libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
	       libsqlite3-dev  libncurses5-dev libncursesw5-dev xz-utils tk-dev \
	       libffi-dev liblzma-dev python-openssl

      }


      apt()
      {
      }

      arch(){
	  # echo  " -- Plasma"
	  # sudo pacman -S --noconfirm xorg xorg-apps plasma-meta kde-applications-meta \
	      #      plasma-wayland-session
      }

      elx-guixsd () {
	  echo "GuixSD: Install"

	  echo "-- Free Software Foundation"
	  guix package -i zile wget stow screen gimp bash parted emacs gcc-toolchain \
	       gdb automake gettext texinfo recutils patch make autoconf gnutls # info

	  echo "-- System packages"
	  guix package -i p7zip zip unzip util-linux alsa-utils network-manager \
	       font-hack font-dejavu vim

	  echo "-- System Tools"
	  guix package -i lshw usbutils lsof time net-tools iproute2 curl rsync \
	       dbus pkg-config zlib acl alsa-lib librsvg libotf libice giflib libxpm \
	       m17n-lib libxinerama libtool # gtk+ graphviz help2man # Guix deps

	  echo "-- X.org"
	  # guix package -i xauth xorg-server xinit setxkbmap xsetroot xautolock \
	      # xf86-input-synaptics xf86-input-libinput xhost  xdg-utils xdg-user-dirs

	  echo "-- Window Managers"
	  guix package -i stumpwm awesome

	  echo "-- Window Managers Tools"
	  guix package -i icecat sbcl-next scrot slock aria2 network-manager-applet \
	       udiskie st polkit-gnome cheese dmenu lm-sensors aspell aspell-dict-en \
	       syncthing perl-file-mimeinfo mpv youtube-dl imagemagick ghc-pandoc \
	       inkscape gconf obs ranger w3m highlight lynx mediainfo libcaca \
	       font-adobe-source-han-sans libreoffice calibre kdeconnect
	  # mupdf ghostscript xdg-utils screenkey xdotool

	  echo '-- Codecs'
	  guix package -i ffmpeg pulseaudio vorbis-tools gstreamer gst-plugins-good \
	       gst-plugins-ugly gst-plugins-bad gst-libav gst-plugins-base gst123

	  echo "-- Programming Languages"
	  guix package -i sbcl clisp \
	       python-pip  \
	       shellcheck zenity bash-completion \
	       clang cmake m4 libtool

	  echo "-- Dependencies"
	  guix package -i alsa-lib acl libpng zlib librsvg libsm libxpm m17n-lib \
	       libotf libjpeg
	  guix package -i giflib libpng libxft libtiff libx11 libxml2 libsm ncurses \
	       libice gtk+ gnutls # emacs
	  guix package -i cairo emacs-minimal emacs-tablist glib libpng pkg-config \
	       poppler zlib # emacs pdf-tools
	  guix package -i webkitgtk openssl gsettings-desktop-schemas \
	       glib-networking # next
	  guix package -i libfixposix # stumpwm-module:dbus

	  echo "-- Emulators & Virtualization"
	  guix package -i qemu virt-manager ovmf libvirt wine

	  echo "-- Development tools"
	  guix package -i tree git xsel xclip fontconfig freetype subversion bc \
	       perl # exuberant-ctags
	  guix package -i htop strace ltrace openssh cpio lzop atool wmctrl poppler \
	       perf sqlite texlive-latex-pdfx

	  echo "-- Security tools"
	  guix package -i tcpdump

	  echo 'Laptop tool & Wifi'
	  guix package -i iw wireless-tools acpi

	  echo "Done"
      }

      elx-guixbin () {

	  echo "-- TOOLS: Guix Packages"
	  if [ ! -x "$(command -v guix)" ]; then

	      echo "-- Guix: Installing"
	      cd "$HOME" || echo "hmm?"

	      echo "-- Authorizing Guix GPG Key"
	      sudo gpg --keyserver pool.sks-keyservers.net \
		   --recv-keys 3CE464558A84FDC69DB40CFB090B11993D9AEBB5

	      echo "-- Downloading Guix Installer"
	      wget -c https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh

	      sudo bash "$HOME"/guix-install.sh

	      echo "-- Setting Guix Root User"
	      sudo guix pull && sudo guix package -u
	      sudo guix package -i glibc-locales

	      echo "-- Cleaning"
	      rm "$HOME/guix-install.sh"
	  fi

	  echo "-- Setting Guix User"
	  guix pull && guix package -u
	  guix package -i glibc-locales gs-fonts font-gnu-freefont-ttf font-dejavu

	  echo "-- Done"
      }

      elx-freebsd () {
	  echo "-- af - Installing System Packages"

	  echo "-- Updating System"
	  sudo freebsd-update fetch
	  sudo freebsd-update install

	  sudo pkg update
	  sudo pkg upgrade

	  # change default shell
	  sudo pw usermod "$USER" -s /usr/local/bin/zsh

	  echo "-- Essential System packages"
	  sudo pkg install -y git p7zip  zip unzip neovim zsh
	  #  alsa-utils network-manager fonts-dejavu

	  echo "-- System Toolings"
	  sudo pkg install -y dmidecode usbutils lsof curl  entr tree git xsel-conrad\
	       xclip ctags fontconfig  freetype subversion htop ltrace lhasa  lzop \
	       atool wmctrl poppler-utils mercurial jq  ncdu ripgrep nnn fzf fzy \
	       rsync bat rclone tmux fish pv  zile wget stow screen gimp bash  gcc \
	       gdb guile guile-lib  autoconf automake gnutls  parallel emacs
	  # net-tools iproute2 console-data  info parted texffinfo build-essential gdbserver wget2

	  echo "-- Programming Languages"
	  sudo pkg install -y nim sbcl ruby postgresql12-client sqlite3 \
	       hs-ShellCheck zenity bash-completion cmake m4 libtool
	  # python3-venv clangd lldb

	  echo  "-- Desktop Environments Software"
	  sudo pkg install -y chromium firefox xdg-utils screenfetch \
	       aspell syncthing p5-File-MimeInfo obs-studio ImageMagick7 hs-pandoc \
	       en_GB-libreoffice br-libreoffice calibre inkscape gconf2 w3m highlight \
	       odt2txt lynx  mediainfo droid-fonts-ttf ko-nanumfonts-ttf mpv \
	       kdeconnect-kde kdenlive cheese ctorrent thunderbird
	  # lm-sensors caca-utils x11proto-deve screenkey fonts-nanum

	  echo "-- Windows Manager Software"
	  sudo pkg install -y  awesome dmenu xorg xdotool xautolock \
	       xf86-video-intel xf86-input-synaptics xf86-input-libinput libinput \
	       dbus xf86-input-keyboard rofi aria2 socat dunst OpenSSH-askpass \
	       automount automounter unclutter cmus scrot maim libnotify seahorse
	  # stterm network-manager-gnome  gthumb kitty

	  echo "-- Emulators & Virtualization"
	  sudo pkg install -y qemu qemu-utils virt-manager wine winetricks
	  # qemu-system-x86 qemu-system-gui qemu-kvm  ovmf libvirt-clients libvirt-daemon-system libvirt-dev libvirt0 virt-manager uefi-edk2-qemu

	  echo ' -- Codecs'
	  sudo pkg install -y ffmpeg pulseaudio  vorbis-tools \
	       gstreamer1-plugins-bad gstreamer1-plugins-good \
	       gstreamer-plugins-ugly
	  # pulseaudio-utils

	  echo "-- Final preparations: clean & tidy up system"
	  sudo pkg -y autoremove

	  echo "Done"
      }

      elx-arch () {
	  echo  "-- Arch - Installing System Packages"

	  echo "-- Updating System"
	  sudo pacman -Syu

	  echo  "-- Essential System packages"
	  sudo pacman -S --noconfirm git p7zip zip unzip util-linux alsa-utils \
	       networkmanager neovim kitty

	  echo  "-- System Tools"
	  sudo pacman -S --noconfirm lshw at usbutils lsof time net-tools iproute2 \
	       curl entr tree git xsel xclip ctags fontconfig  freetype2 subversion \
	       bc htop  strace ltrace openssh cpio lhasa lzop atool wmctrl poppler \
	       perf mercurial sysstat jq dialog ncdu ripgrep nnn fzf fzy rsync bat \
	       rclone xonsh tmux fish pv zile wget stow screen gimp bash parted \
	       texinfo gcc gdb guile make autoconf automake gnutls parallel emacs \
	       zsh code
	  # console-data wget2 gdbserver locate brz

	  echo "-- Fonts"
	  sudo pacman -S --noconfirm otf-ipafont ttf-baekmuk ttf-dejavu \
	       noto-fonts-emoji

	  echo  "-- Programming Languages"
	  sudo pacman -S --noconfirm npm nodejs sbcl clisp ruby nim crystal shards \
	       lua luarocks postgresql sqlite3 shellcheck zenity bash-completion \
	       clang lldb cmake automake m4 libtool

	  echo  " --Desktop Enviroment Software"
	  sudo pacman -S --noconfirm chromium firefox xdg-utils screenfetch lm_sensors \
	       aspell aspell-en syncthing perl-file-mimeinfo obs-studio imagemagick \
	       inkscape mpv calibre thunderbird kdeconnect cheese syncthing-gtk \
	       discord deluge lxappearance moka-icon-theme

	  echo  "-- Windows Manager Software"
	  sudo pacman -S --noconfirm xorg xorg-apps xorg-xinit  \
	       xorg-xsetroot xautolock xf86-input-synaptics \
	       xf86-input-libinput xdotool xorg-xhost xf86-video-intel \
	       dunst scrot slock xdotool udiskie aria2 polkit \
	       xdg-utils feh xautolock openssh-askpass xorg-xset \
	       xorg-xbacklight dmenu kitty alacritty pulseaudio acpi ttf-dejavu \
	       unclutter maim pacman-contrib network-manager-applet pandoc \
	       ranger w3m highlight odt2txt lynx mediainfo libcaca  \
	       cmus mate-power-manager xorg-setxkbmap pkgconf

	  echo  "-- Emulators & Virtualization"
	  sudo pacman -S --noconfirm qemu wine ovmf libvirt

	  echo  ' -- Codecs'
	  sudo pacman -S --noconfirm ffmpeg pulseaudio vorbis-tools \
	       gstreamer gst-libav gst-plugins-bad gst-plugins-base gst-plugins-good \
	       gst-plugins-ugly pamixer

	  echo  ' -- Dependencies'
	  # next
	  sudo pacman -S --noconfirm  webkit2gtk
	  # python
	  sudo pacman -S --noconfirm bzip2 expat gdbm libffi libnsl openssl zlib mpdecimal \
	       sqlite tk xz bluez-libs gdb llvm mpdecimal valgrind xorg-server-xvfb
	  # qtile
	  sudo pacman -S --noconfirm  gobject-introspection

	  echo  "-- Security tools"
	  sudo pacman -S --noconfirm tcpdump

	  if [[ ! -x $(command -v erlang) ]]; then
	      cd ${HOME}

	      local binary=erlang-solutions_2.0_all.deb
	      [[ ! -e ${HOME}"/${binary}" ]] && wget https://packages.erlang-solutions.com/${binary}

	      sudo apt install "${HOME}/${binary}"
	      sudo apt update
	      sudo apt install esl-erlang elixir
	  fi

	  echo  "-- DONE"
      }

      elx-guixsd ()
      {
	  a-welcome " -- GuixSD - Reconfiguring System!"
	  sudo guix pull
	  sudo guix system reconfigure "$1"
      }

      elx-stumpwm ()
      {
	  a-welcome " -- Building: STUMPWM"

	  a-clone https://github.com/stumpwm/stumpwm \
		  "$HOME/Projects/lisp/stumpwm"
	  a-clone https://github.com/stumpwm/stumpwm-contrib \
		  "$HOME/Projects/lisp/stumpwm-contrib"

	  a-cd "$PROJECTS/lisp/stumpwm"

	  echo " -- Cleaning Project"
	  if [[ -e ./Makefile ]]; then
	      make uninstall
	      make clean
	      git clean -fdx
	  fi

	  echo "Installing"
	  autoconf
	  ./configure --prefix=$HOME_LOCAL
	  make && make install

	  a-sucess " -- Done"
      }

      elx-clisp ()
      {
	  a-welcome "Building: $TITLE"

	  echo " -- Cleaning directory"
	  PREFIX="$HOME_LOCAL" make distclean && git clean -fdx

	  a-clone https://gitlab.com/gnu-clisp/clisp "$PROJECTS/lisp/clisp"

	  a-cd "$PROJECTS/lisp/clisp"
	  git pull

	  echo " -- Comping CLISP"
	  sh configure --prefix=$HOME_LOCAL
	  PREFIX="$HOME_LOCAL" make
	  PREFIX="$HOME_LOCAL" make install

	  a-sucess "Done"
      }

      elx-ccls ()
      {
	  echo " -- Building CCLS"
	  git clone --depth=1 --recursive https://github.com/MaskRay/ccls \
	      "$HOME/.local/ccls"

	  (cd "$HOME/.local/ccls" || echo "No $_ folder"
	   cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release
	   cmake --build Release)

	  ln -sf "$HOME/.local/ccls/Release/ccls" "$HOME/.local/bin/ccls"

	  echo -e " -- Done"
      }

      elx-emacs ()
      {
	  a-welcome "Building Emacs"

	  if [[ ! -d "$PROJECTS/lisp/emacs" ]]; then
	      echo " -- Cloning"
	      a-clone https://git.savannah.gnu.org/git/emacs "$PROJECTS/lisp/emacs"
	  fi

	  a-cd "$PROJECTS/lisp/emacs"

	  echo " -- Preparing Project files"
	  make bootstrap

	  echo " -- Stable release, please!"
	  git checkout master

	  echo " -- Pulling latest changes"
	  git pull

	  echo " -- Generate configure file and Emacs scripts"
	  sh autogen.sh

	  echo " -- Configuring Emacs"
	  ./configure --prefix=$HOME_LOCAL \
	   --with-modules \
	   --with-xwidgets \
	   --with-gif \
	   --with-jpeg \
	   --with-png \
	   --with-rsvg \
	   --with-tiff \
	   --with-xft \
	   --with-xpm \
	   --with-x \
	   --with-dbus \
	   --with-json \
	   --with-imagemagick \
	   --with-jansson \
	   --with-multicolor-fonts \
	   --with-x-toolkit=gtk3 \
	   --with-mailutils \
	   --with-gnutls

	  echo " -- -- Deploying binaries"
	  make -j2
	  make install

	  a-sucess "DONE"
      }

      elx-st ()
      {

	  echo " -- Copying config.def.h"
	  python3 "$ALL/init.py"

	  cd "$XDG_CONFIG_HOME/st" || echo "There is no $_"

	  echo "cleaning"
	  rm config.h

	  echo "installing"
	  make PREFIX="$HOME_LOCAL" clean install

	  a-sucess "DONE"
	  echo -e " -- Done"
      }

      elx-next ()
      {
	  a-welcome "Building: NEXT"

	  echo "Cloning"
	  a-clone https://github.com/atlas-engineer/next "$HOME/Projects/lisp/next"
	  a-cd "$PROJECTS/lisp/next"

	  echo "Cleaning"
	  git clean -fdx
	  git pull
	  make clean-all

	  echo "Installing"
	  make all PREFIX="$HOME_LOCAL"
	  make install PREFIX="$HOME_LOCAL"

	  a-sucess "DONE"
      }

      elx-cpython ()
      {
	  a-welcome "Building: CPYTHON"

	  echo "Cloning"
	  a-clone https://github.com/python/cpython "$HOME/Projects/python/cpython"
	  a-cd "$HOME/Projects/python/cpython"

	  echo " -- Cleaning Project"
	  [[ -e ./Makefile ]] && make clean
	  git clean -fdx
	  git pull
	  git checkout 3.8

	  echo " -- Installing Project"
	  sh configure --enable-optimizations --with-lto --prefix="$HOME_LOCAL"
	  make -s
	  make -j2 install

	  a-sucess "DONE"
      }

           elx-rider()
      {
	  cd ${BINARIOS} || mkdir ${BINARIOS}

	  local rider=https://download.jetbrains.com/rider/
	  local link=JetBrains.Rider-2020.1.4.tar.gz?_ga=2.49354848.731073982.1596379847-463458703.1596379846

	  wget ${rider}/${link}
	  tar zxvf ${BINARIOS}/JetBrains.Rider-*.tar.gz

	  ln -sf ${BINARIOS}/Rider/bin/rider.sh ~/bin/rider
      }

      elx-inicia()
      {
	  # Home
	  [[ ! -d $HOME/Livros ]] && elx-home
	  [[ ! -d $HOME/.config/emacs ]] && elx-dotfiles
	  [[ ! -e $HOME/.local/share/fonts/JetBrainsMono-Regular.ttf ]] && elx-fonts
	  [[ ! -e $HOME/.ssh/id_rsa.pub ]] && elx-ssh
	  [[ ! -e $HOME/bin/liquidprompt ]] && elx-binaries

	  # Dependencies
	  [[ ! -x $HOME/bin/cero ]] && elx-cero

	  # Windows Manager
	  cero project sbcl
	  [[ ! -d $HOME/quicklisp ]] && elx-quicklisp
	  [[ ! -x $HOME/.local/bin/stumpwm ]] && cero project stumpwm

	  # Custom Builds
	  [[ ! -x $HOME/.local/bin/emacs ]] && cero project emacs
      }

      elx-suspende ()
      {
	  echo "Suspending system in $1 ..."
	  sleep "$1" && systemctl suspend
      }

      elx-lar()
      {
	  root=(data more)

	  for main in "${root[@]}"; do
	      dirlist=(`ls /$main`)

	      for dir in "${dirlist[@]}"; do
		  [[ "$dir" == "lost+found" ]] && continue
		  # TODO: check if folder exist before symlinking
		  echo "/$main/$dir --> $HOME/$dir"
		  ln -sf "/$main/$dir" "$HOME/$dir"
	      done
	  done
      }

      elx-atualiza ()
      {
	  elx-cero
	  cero distro update; cero distro upgrade;
	  elx-vscode
	  cero operation oss clone
      }


      elx-vscode()
      {
	  if [ ! -x "$(command -v code)" ]; then
	      curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
	      sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
	      sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

	      sudo apt-get install apt-transport-https
	      sudo apt-get update
	      sudo apt-get install code
	  fi

      }
      # Cero
      elx-cero () { cd "$PESSOAL/cero" && bash build.sh; }

      elx-fontes()
      {
	  local url=https://download.jetbrains.com/fonts/JetBrainsMono-2.001.zip
	  wget -c "${url}" -P "${BINARIES}"

	  unzip "${BINARIES}"/JetBrainsMono*.zip -d "${BINARIES}"

	  mv -v "${BINARIES}"/ttf/*.ttf ~/.local/share/fonts/

	  fc-cache -fv
      }

      elx-screenshot()
      {
	  local shotter="scrot"
	  local partial="-s"

	  # if(Partial != null)
	  #   {
	  #           _runners.Run(GetScrotCommands().name, GetScrotCommands().args, _folders.Fotografias);
	  #       }
	  #       else
	  #           {
	  #               _runners.Run(GetScrotCommands().name, folder: _folders.Fotografias);
	  #           }
      }

      elx-envia()
      {
	  # Descricao: Send files over to connected system. eg: mobile.

	  local sender="kdeconnect-cli"
	  local id="${sender} -a --id-only"

	  [ ! -x "$(command -v $sender)" ] && exit 0 #  sender was not found!

	  echo " -- Start Sender"
	  ($sender &)

	  if [ ! "$1" == "" ]; then
	      kdeconnect-cli -d "$id" --share "$@"
	  fi
      }

      elx-save()
      {
	  # rich-sh tricks: args to array-like - http://www.etalabs.net/sh_tricks.html
	  for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
	      echo " "
      }

      elx-microphone-test ()
      {
	  arecord -vvv -f dat /dev/null
      }

      elx-eclipse-jdtls ()
      {
	  cd $EMACS_DIR && mkdir -pv $EMACS_DIR/eclipse.jdt.ls

	  wget -c http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz

	  tar zxvf jdt-language-server-latest.tar.gz -C eclipse.jdt.ls
      }

      elx-streamer()
      {
	  youtube-dl -o - "$1" | vlc -
      }

      elx-screen-capture () {
	  # DEPENDENCIES: ffmpeg, pulseaudio, x11
	  ffmpeg -y \
		 -video_size 1366x768 \
		 -framerate 30 -f x11grab -i :0.0 \
		 -f pulse -ac 2 -i default \
		 "$HOME"/Videos/screen1_recording_"$(date '+%Y-%m-%d_%H-%M-%S')".mkv
      }

      elx-screen-capture-stop () {
	  killall ffmpeg; pkill ffmpeg
      }



      elx-wine-prefix-32-create () {

	  # Dependecies: wine, winetricks

	  # Descricao: Create wineprefix with given name and install some basic winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Check if ~/wine/prefixes/ folder exist
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix: "

	  # keyboard input to string
	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Create Wine prefix and call for its configuration, press OK once done!"
	  WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg
	  # d3dx9_36
      }

      elx-wine-prefix-64-create () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Create wineprefix with given name and install some basic winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Check if ~/wine/prefixes/ folder exist
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix: "

	  # keyboard input to string
	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Create Wine prefix and call for its configuration, press OK once done!"
	  WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg
	  # d3dx9_36
      }

      elx-wine-prefix-32-install-exe () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Create wineprefix with given name and install some basic winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Check if ~/wine/prefixes/ folder exist
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix: "

	  # keyboard input to string
	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Run argument exe with Wine prefix"
	  WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ wine "$1"
      }

      elx-wine-prefix-64-install-exe () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Create wineprefix with given name and install some basic winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Check if ~/wine/prefixes/ folder exist
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix: "

	  # keyboard input to string
	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Run argument exe with Wine prefix"
	  WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ wine "$1"
      }

      elx-winetricks-32-install-packages () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Install winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Please name your Wine prefix: "
	  read -r input_variable      # keyboard input to string

	  echo -e " -- Install Winetricks packages"
	  WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks vcrun2005
      }

      e-winetricks-64-install-packages () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Install winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Please name your Wine prefix: "
	  read -r input_variable      # keyboard input to string

	  echo -e " -- Install Winetricks packages"
	  WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks vcrun2005
      }

      elx-wine-install-prefix () {
	  echo -e " -- Dependecies: wine staging (debian/ubuntu), winetricks (github), GNU Coreutils, GNU Bash"

	  echo -e " -- Descricao: Create wineprefix with given name and get dxvk lastest dll and dependencies"

	  echo -e " -- Killing wineserver"
	  wineserver -k

	  echo -e " -- Making ~/wine/prefixes/ if not present"
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  echo -e " -- Assigning Wine prefixes folder"
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix:"

	  # keyboard input to string

	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Create Wine prefix, press Ok"
	  WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg

	  echo -e " -- Install Winetricks packages"
	  # WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks
      }

      elx-makeit () {

	  if [ ! -e "$PWD/Makefile" ]; then
	      echo -e " --  There is no Makefile in PWD"
	  else
	      echo -e " -- Using Makefile"
	      echo "          "

	      echo -e " -- Cleaning Project"
	      echo "          "

	      make -ks clean

	      echo "          "
	      echo -e " -- Building Project"
	      echo "          "

	      make -ks build

	      echo "          "
	      echo -e " -- Project built with no ERROR"
	      echo "          "

	      echo -e " -- Running binary:"
	      echo "<<-----------------------------------------"
	      echo "          "
	      echo "          "

	      make -ks run

	      echo "          "
	      echo "          "
	      echo "----------------------------------------->>"

	      echo "          "
	      echo -e " -- DONE!"
	  fi
      }


      elx-eclipse-jdtls ()
      {
	  cd $EMACS_DIR && mkdir -pv $EMACS_DIR/eclipse.jdt.ls

	  wget -c http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz

	  tar zxvf jdt-language-server-latest.tar.gz -C eclipse.jdt.ls
      }



      # Get the current date using strftime.
      # # Using above function.
      # $ date "%a %d %b  - %l:%M %p"
      # Fri 15 Jun  - 10:00 AM

      # # Using echo directly.
      # $ echo '%(%a %d %b  - %l:%M %p)T\n' "-1"
      # Fri 15 Jun  - 10:00 AM

      # # Assigning a variable using echo.
      # $ echo -v date '%(%a %d %b  - %l:%M %p)T\n' '-1'
      # $ echo '%s\n' "$date"
      # Fri 15 Jun  - 10:00 AM
      elx-date() {
	  # Usage: date "format"
	  # See: 'man strftime' for format.
	  echo "%($1)T" "-1"
      }

      # Progress bars
      # Example Usage:

      # for ((i=0;i<=100;i++)); do
      #     # Pure bash micro sleeps (for the example).
      #     (:;:) && (:;:) && (:;:) && (:;:) && (:;:)

      #     # Print the bar.
      #     bar "$i" "10"
      # done

      # echo '\n'
      # my-bar() {
      #     # Usage: bar 1 10
      #     #            ^----- Elapsed Percentage (0-100).
      #     #               ^-- Total length in chars.
      #     ((elapsed=$1*$2/100))

      #     # Create the bar with spaces.
      #     echo -v prog  "%${elapsed}s"
      #     echo -v total "%$(($2-elapsed))s"

      #     echo '%s\r' "[${prog// /-}${total}]"
      # }

      # my-update () {
      #     sudo "$SYSTEM_PACKAGE_MANAGER" update "$1"
      # }

      # my-terminal-apps-update () {
      #     npm update -g
      # }

      elx-quicklisp ()
      {
	  cd "$HOME" || exit
	  wget -c https://beta.quicklisp.org/quicklisp.lisp

	  sbcl --no-sysinit --no-userinit --load quicklisp.lisp \
	       --eval '(quicklisp-quickstart:install)' \
	       --eval "(ql:quickload '(:quicklisp-slime-helper :clx :cl-ppcre :alexandria :xembed :xml-emitter :dbus :prove :swank))" \
	       --eval "(quit)"

	  quick="$HOME/quicklisp.lisp"; [[ -e "$HOME/quicklisp" ]] && [[ -e $quick ]] && rm $quick
      }

      _BLUE="\\e[44m"
      _ORANGE="\\e[43m"
      _GREEN="\\e[42m"
      _RED="\\e[41m"
      _RESET="\033[0m"

      elx-welcome ()
      {
	  printf "$_BLUE %s $_RESET " $1
	  echo
      }
      elx-warning ()
      {
	  printf "$_RED %s $_RESET" $1
	  echo
      }
      elx-sucess ()
      {
	  printf "$_GREEN %s $_RESET" $1
	  echo
      }
      elx-notify ()
      {
	  printf "$_ORANGE %s $_RESET" $1
	  echo
      }

      # ---------------
      elx-clone ()
      {
	  url=$1
	  folder=$2
	  git clone $url $folder
      }

      elx-cd ()
      {
	  cd $1 || echo "No $_ folder"
      }

      elx-folder-exist-do()
      { # if folder exist do action

	  local folder="$1"
	  local action="$2"

	  [[ -d $folder ]] && eval "$action $folder"
      }

      elx-folder-not-exist-do()
      {
	  # if folder do not exist do action
	  # if $3 = "yes" do that too

	  local folder="$1"
	  local action="$2"

	  [[ ! -d $folder ]] && eval "$action $folder"

	  local action2="$3"
	  [[ $action2 = "yes" ]] && cd "$folder"
      }

      elx-dolist()
      { # For each element in string list do action

	  local action="$1"
	  local packs="$2"

	  echo $action

	  # # Arguments to packs array
	  # IFS=' ' read -r -a packages <<< "$1"

	  # # iterate over each elm in array
	  # for package in "${packages[@]}"
	  # do
	  #     echo $package
	  # done
      }

      elx-app-installed()
      {
	  local app="$1"
	  local action="$@"

	  [[ -x $(command -v $app) ]] && "$action"
      }


      lxDolist ()
      {
	  local packages="$2"
	  local runner="$1"

	  for pack in "${packages[@]}"
	  do
	      "${runner}" "${pack}"
	  done
      }

      # --------------- SYSTEM PACKAGES INTERFACE
      elx-qemu-image-run () {

	  elx-notify " -- Qemu img to be run: "
	  qemu-system-x86_64
	  -m 2G -vga qxl \
	     -drive if=pflash,format=raw,readonly,file=/usr/share/OVMF/OVMF_CODE.fd \
	     -drive if=pflash,format=raw,file=OVMF_VARS.fd \
	     -enable-kvm \
	     -hda
      }


      # # Type
      # alias Tp='type -a'

      # # git
      # alias Gitcl='git clone '
      # alias Giti='git init'
      # alias Gita='git add '
      # alias Gitc='git commit -m '
      # alias Gitpl='git pull'
      # alias Gitrh='git reset --hard'
      # alias Gits='git status'
      # alias Gitpu='git push'
      # alias Gitp='git push origin master'
      # alias Gitb='git branch -a --color'
      # alias Gitch='git checkout -- '
      # alias Gitrv='git remote -v'
      # alias Gitrao='git remote add origin'
      # alias Gitrso='git remote set-url origin'
      # alias Gitm='git mv'
      # alias Gitcov='git count-objects -v'
      # alias Gitsh='git stash'
      # alias Gitri='git rebase -i'
      # alias Git='git --no-pager'
      # alias Gitd='git diff --color'
      # alias Gitdw='git diff --color-words'
      # alias Gitl='git log --pretty=oneline'
      # alias Gitbsd='git branch --sort=-committerdate '
      # alias Gitbsa='git branch --sort=committerdate '
      # alias Giuncr='git config --system --unset credential.helper'

      # # GNU Emacs
      # alias Em='emacs -nw'
      # alias Emt='emacs -nw' # emacs terminal
      # alias Ems="SUDO_EDITOR=\"emacsclient -t -a emacs\" sudoedit"
      # alias Emq='emacs -Q -nw'
      # alias Emct='emacsclient -t'
      # alias Emcc='emacsclient -nc'
      # alias EM='cd $HOME/.emacs.d/'

      # # GNU Screen
      # alias Scrl='screen -list'
      # alias Scrw='screen -wipe'

      # # Network Manager
      # alias Nnon='nmcli networking on'
      # alias Nnoff='nmcli networking off'
      # alias Nds='nmcli device status'
      # alias Ncs='nmcli connection show'
      # alias Ncsa='nmcli connection show --active'
      # alias Ndw='nmcli dev wiend'

      # # ffmpeg
      # alias Ffsr='ffmpeg -video_size 1920x1080 -framerate 60 -f x11grab -i :0.0 st-urxvt.mp4'

      # # systemD
      # alias Sctl='systemically'
      # alias Ssc='sudo systemctl'
      # alias Scu='systemctl --user'
      # alias Jc='sudo journalctl'
      # alias Journ='sudo journalctl -b -f'
      # alias Out='loginctl terminate-user $USER'
      # alias Pwf='systemctl poweroff'
      # alias Rbt='systemctl reboot'
      # # alias Spd='sudo systemctl suspend'

      # # udisks
      # alias umb='udisksctl mount -b /dev/sd'
      # alias umnb='udisksctl unmount -b /dev/sd'

      # # Tmux
      # alias Tks='tmux kill-server'
      # alias Tkst='tmux kill-session -t'
      # alias Ta='tmux at'
      # alias Tns='tmux new -s Shell'
      # alias Tds='tmux detach'

      # # ------------------------------------------------
      # # Distros Commands

      # # GNU Guix & GuixSD
      # alias Gpul='guix pull'
      # alias Gpulu='guix pull & guix package -u' # guix pull and update
      # alias Gpu='guix package -u' # update
      # alias Gpi='guix package -i' # install
      # alias Gpr='guix package -r' # remove
      # alias Gps='guix package -s' # search
      # alias Gpsos='guix package --show=PACKAGE' # Show details about PACKAGE
      # alias Gpl='guix package -l' # list generation
      # alias Gpl='guix package --roll-back' # rollback one generation
      # alias GpS='guix package -S' # switch-generation=PATTERN
      # alias Gsr='sudo guix system reconfigure'

      # # Debian
      # alias Apu='sudo apt update'
      # alias Apug='sudo apt upgrade'
      # alias Apdg='sudo apt dist-upgrade'
      # alias Apd='apt download' # download deb file
      # alias Aptsg='sudo apt -t stable upgrade'
      # alias Aptug='sudo apt -t unstable upgrade'
      # alias Apttg='sudo apt -t testing upgrade'
      # alias Apuug='sudo apt update ; sudo apt upgrade'
      # alias Api='sudo apt install'
      # alias Apri='sudo apt --reinstall install'
      # alias Appr='sudo apt purge'
      # alias Apio='sudo apt install --only-upgrade'
      # alias Aps='apt search'
      # alias Apr='sudo apt remove'
      # alias Apar='sudo apt autoremove'
      # alias Apli='apt list --installed'
      # alias Aplil='apt list --installed | less'
      # alias Apsl='sudo vi /etc/apt/sources.list'
      # alias Apac='apt-get clean'
      # alias Apfs='apt-file search'
      # alias Apcir='apt-cache --installed rdepends' # package X depends on
      # # .deb in /var/cache/apt/archives/

      # # Red Hat
      # alias Di='sudo dnf install'
      # alias Dr='sudo dnf remove'
      # alias Du='sudo dnf update'
      # alias Ds='dnf search'
      # alias Dli='dnf list installed | less'

      # # Nix
      # alias Ni='nix-env -i' # install
      # alias Ne='nix-env -e' # uninstall
      # alias Nqa='nix-env -qa' # search for specific app or no argument view the set of available packages in Nixpkgs
      # alias Nu='nix-env -u' # update specific package or no arguments upgrade all packages
      # alias Nrb='nix-env --rollback' # rollback specific package
	 # alias Ngc='nix-collect-garbage -d' #  run the Nix garbage collector to get rid of unused packages, since uninstalls or upgrades don't actually delete them
	 # alias Ndr='nix-env -u --dry-run' # mimic universal upgrade, just like Gentoo's emerge

	 # # Gentoo - # https://wiki.gentoo.org/wiki/Portage#emerge
	 # alias Ema='sudo emerge --ask'
	 # alias Ems='sudo emerge --search'
	 # alias Emu='sudo emerge --unmerge'
	 # alias Ema='emerge --ask'
	 # alias Ems='emerge --search'
	 # alias Empv='emerge --pretend --verbose'
	 # alias Eman='sudo emerge --ask --newuse'
	 # alias Emudnw='sudo emerge --update --deep --newuse @world'
	 # alias Emundww='sudo emerge --ask --update --newuse --deep --with-bdeps=y @world'
	 # alias Emacdw='sudo emerge --ask --changed-use --deep @world'
	 # alias Emdc='sudo emerge --depclean'
	 # alias Emrr='sudo revdep-rebuild'
	 # alias Emdc='sudo dispatch-conf'
	 # alias Emig='emerge --info | grep -i'
	 # alias Emigu='emerge --info | grep USE'
	 # alias Empr='sudo emerge @preserved-rebuild'
	 # # Eclean https://wiki.gentoo.org/wiki/Eclean#Cleaning_distendles
	 # alias Emc='sudo eclean distendles'
	 # alias Emc='sudo eclean packages'
	 # # qpkg

	 # # Arch Linux
	 # alias Pacu='sudo pacman -Syu'
	 # alias Paci='sudo pacman -S'
	 # alias Pacr='sudo pacman -R'
	 # alias Pacr='sudo pacman -Rd'
	 # alias Pacrns='sudo pacman -Rns'
	 # alias Pacrcns='sudo pacman -Rcns'
	 # # alias Pacrnsqd='pacman -Rsn $(pacman -Qdtq)'
	 # alias Pacs='pacman -Ss'
	 # alias Pacud='pacman -U'
	 # alias Pacqe='pacman -Qe'
	 # alias Pacqi='pacman -Qi'
	 # alias Pacqt='pacman -Qt | less'
	 # # alias Mirrors='sudo pacman-mirrors -g; and sudo pacman -Su'

	 # # Arch Linux Pckbuild Handlers
	 # alias Yi='yaourt -S --aur'
	 # alias Yu='yaourt -Su --aur'
	 # alias Ys='yaourt -Ss --aur'
	 # alias Pru='pacaur -Su -a'
	 # alias Pri='pacaur -S'
	 # alias Prs='pacaur -Ss'
	 # alias Prr='pacaur -R'

	 # #PCKBUILD
	 # alias Mpsi='makepkg -si'

	 # alias Strc="awk '!/^ *#/ && NF'"
	 alias Dmesg='clear; dmesg -eL -w'

	 # Scripts for recursive tasks (without space on endlename)
	 alias Jpg='for f in *.jpg; do mv "$f" "$f/%.jpg/.jp"; done'
    #+end_src
