#+TITLE: Dots Legacy

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#makec][Make(C)]]
- [[#zsh][zsh]]
- [[#autostart][autostart]]
- [[#make][Make]]
  - [[#template---base][Template - Base]]
- [[#st][st]]
- [[#dmenu][Dmenu]]
  - [[#dmenu---record-it][dmenu - record it]]
  - [[#dmenu---mountunmount-drives][dmenu - mount/unmount drives]]
:END:

* Make(C)
    #+begin_src makefile
    CC = gcc
    CFLAGS = -Wall -Werror -std=c99
    LDFLAGS =
    PROJECT= aspnet
    SRC = $(PROJECT)/main.c
    DIST = dist
    SHELL = sh
    RM = rm -rf

    default:
	    @echo "make install		-- fresh install of package"
	    @echo "make all		-- clean previous install, build and run program"
	    @echo "make clean		-- clean non-essential files"
	    @echo "make build		-- compile and prepare program to run"

    all: clean build run

    clean:
	    $(RM) $(DIST)

    build:
	    mkdir $(DIST)
	    $(CC) -o $(DIST)/$(PROJECT) $(CFLAGS) $(SRC)

    run:
	    ./$(DIST)/$(PROJECT)
    #+end_src
* zsh
#+begin_src shell-script

# * ZPLUG

e-zplug-home()
{
    export ZPLUG_HOME="$HOME/.zplug"
    export ZSH_PLUGINS_ALIAS_TIPS_TEXT=' alias hint: '
    export KEYTIMEOUT=1
}

e-zplug-get()
{
    [ -d $ZPLUG_HOME ] && return

    git clone https://github.com/zplug/zplug "$ZPLUG_HOME"
}

e-zplug-activate()
{
    source "$ZPLUG_HOME/init.zsh"
}

e-zplug-install-plugins() {
    zplug "zplug/zplug", hook-build:"zplug --self-manage"

    # prezto
    zplug "modules/tmux",       from:prezto
    # zplug "modules/history",    from:prezto
    zplug "modules/utility",    from:prezto
    zplug "modules/terminal",   from:prezto
    zplug "modules/editor",     from:prezto
    zplug "modules/directory",  from:prezto
    zplug "modules/completion", from:prezto

    # zsh users
    zplug "zsh-users/zsh-completions",              defer:0
    zplug "zsh-users/zsh-autosuggestions",          defer:2, on:"zsh-users/zsh-completions"
    zplug "zsh-users/zsh-syntax-highlighting",      defer:3, on:"zsh-users/zsh-autosuggestions"
    zplug "zsh-users/zsh-history-substring-search", defer:3, on:"zsh-users/zsh-syntax-highlighting"

    # Plugins from oh my zsh
    zplug "plugins/git", from:oh-my-zsh

    # misc
    zplug "b4b4r07/enhancd", use:init.sh
    zplug "jocelynmallon/zshmarks" # Bookmarks and jump
    zplug "supercrabtree/k" # Enhanced dir list with git features
    zplug "djui/alias-tips" # Tips for aliases
    zplug "felixr/docker-zsh-completion" # Docker completion
    zplug "denysdovhan/spaceship-prompt", use:spaceship.zsh, from:github, as:theme

    # nix
    zplug "chisui/zsh-nix-shell"
    zplug "spwhitt/nix-zsh-completions"

    if ! zplug check; then # install plugins
	zplug install
    fi
}

e-zplug-check()
{
    if [ -f "$ZPLUG_HOME/init.zsh" ]; then
	return true
    else
	return false
    fi
}

e-zplug()
{
    e-zplug-home
    e-zplug-get
    e-zplug-activate
    e-zplug-install-plugins

    # foobar
    # zplug update
    zplug load

    e-zplug-check
}

#+end_src

* autostart
   #+begin_src shell
   [ -x "$(command -v feh)" ] && feh --recursive --randomize --bg-max "$HOME/Pictures/wallpapers" &
   #+end_src
* Make
** Template - Base
*** C
      #+BEGIN_SRC makefile
      CC = gcc
      CFLAGS = -Wall -Werror -std=c99
      LDFLAGS =
      SRC = src/main.c
      DIST = dist
      SHELL = sh
      RM = rm -rf

      default:
	      @echo "make install	-- fresh install of package"
	      @echo "make all		-- clean previous install, build and run program"
	      @echo "make clean		-- clean non-essential files"
	      @echo "make build		-- compile and prepare program to run"

      .PHONY: all
      all: clean build run

      .PHONY: clean
      clean:
	      $(RM) $(DIST)

      .PHONY: build
      build:
	      mkdir $(DIST)
	      $(CC) -o $(DIST)/transpose $(CFLAGS) $(SRC)

      .PHONY: run
      run:
	      ./dist/transpose
      #+END_SRC
*** C++
    #+BEGIN_SRC makefile
    CXX = g++
    CPPFLAGS =						# put pre-processor settings (-I, -D, etc) here
    CXXFLAGS = -Wall -std=c++14				# put compiler settings here
    LDFLAGS =					# put linker settings here

    build:
	    $(CXX) -o output $(CXXFLAGS) hello.cpp

    run:
	    ./output

    clean:
	    rm -rf output

    .PHONY: all
    all: clean build run
	    rm output
    #+END_SRC
*** Dotfiles make
     #+BEGIN_SRC shell-script
     # Global Variables
     SHELL = bash
     DATA_FOLDER= /data
     ALL= $(DATA_FOLDER)/all
     EMACS= emacs

     .PHONY: folders
     folders:
	     mkdir -pv ~/{Documents,Downloads,Pictures,.config/screen,.local/bin}

     .PHONY: symlink
     symlink:
	     ln -sfv $(DATA_FOLDER)/Books ~/Books
	     ln -sfv $(DATA_FOLDER)/Music ~/Music
	     ln -sfv $(DATA_FOLDER)/Videos ~/Videos

     .PHONY: tangle
     tangle:
	     $(EMACS) --batch -l org $(ALL)/dotfiles.org -f org-babel-tangle

     .PHONY: all
     all: folders symlink tangle

     #+END_SRC

* st
    #+begin_src c
    /* See LICENSE file for copyright and license details. */

    /*
     ,* appearance
     ,*
     ,* font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
     ,*/
    static char *font = "JetBrains Mono:pixelsize=15:antialias=true:autohint=true";
    static int borderpx = 2;

    /*
     ,* What program is execed by st depends of these precedence rules:
     ,* 1: program passed with -e
     ,* 2: scroll and/or utmp
     ,* 3: SHELL environment variable
     ,* 4: value of shell in /etc/passwd
     ,* 5: value of shell in config.h
     ,*/
    static char *shell = "/bin/sh";
    char *utmp = NULL;
    /* scroll program: to enable use a string like "scroll" */
    char *scroll = NULL;
    char *stty_args = "stty raw pass8 nl -echo -iexten -cstopb 38400";

    /* identification sequence returned in DA and DECID */
    char *vtiden = "\033[?6c";

    /* Kerning / character bounding-box multipliers */
    static float cwscale = 1.0;
    static float chscale = 1.0;

    /*
     ,* word delimiter string
     ,*
     ,* More advanced example: L" `'\"()[]{}"
     ,*/
    wchar_t *worddelimiters = L" ";

    /* selection timeouts (in milliseconds) */
    static unsigned int doubleclicktimeout = 300;
    static unsigned int tripleclicktimeout = 600;

    /* alt screens */
    int allowaltscreen = 1;

    /* allow certain non-interactive (insecure) window operations such as:
       setting the clipboard text */
    int allowwindowops = 0;

    /*
     ,* draw latency range in ms - from new content/keypress/etc until drawing.
     ,* within this range, st draws when content stops arriving (idle). mostly it's
     ,* near minlatency, but it waits longer for slow updates to avoid partial draw.
     ,* low minlatency will tear/flicker more, as it can "detect" idle too early.
     ,*/
    static double minlatency = 8;
    static double maxlatency = 33;

    /*
     ,* blinking timeout (set to 0 to disable blinking) for the terminal blinking
     ,* attribute.
     ,*/
    static unsigned int blinktimeout = 800;

    /*
     ,* thickness of underline and bar cursors
     ,*/
    static unsigned int cursorthickness = 2;

    /*
     ,* bell volume. It must be a value between -100 and 100. Use 0 for disabling
     ,* it
     ,*/
    static int bellvolume = 0;

    /* default TERM value */
    char *termname = "st";

    /*
     ,* spaces per tab
     ,*
     ,* When you are changing this value, don't forget to adapt the »it« value in
     ,* the st.info and appropriately install the st.info in the environment where
     ,* you use this st version.
     ,*
     ,*	it#$tabspaces,
     ,*
     ,* Secondly make sure your kernel is not expanding tabs. When running `stty
     ,* -a` »tab0« should appear. You can tell the terminal to not expand tabs by
     ,*  running following command:
     ,*
     ,*	stty tabs
     ,*/
    unsigned int tabspaces = 8;

    /* Terminal colors (16 first used in escape sequence) */
    static const char *colorname[] = {
	    /* 8 normal colors */
	    "black",
	    "red3",
	    "green3",
	    "yellow3",
	    "blue2",
	    "magenta3",
	    "cyan3",
	    "gray90",

	    /* 8 bright colors */
	    "gray50",
	    "red",
	    "green",
	    "yellow",
	    "#5c5cff",
	    "magenta",
	    "cyan",
	    "white",

	    [255] = 0,

	    /* more colors can be added after 255 to use with DefaultXX */
	    "#cccccc",
	    "#555555",
    };


    /*
     ,* Default colors (colorname index)
     ,* foreground, background, cursor, reverse cursor
     ,*/
    unsigned int defaultfg = 7;
    unsigned int defaultbg = 0;
    static unsigned int defaultcs = 256;
    static unsigned int defaultrcs = 257;

    /*
     ,* Default shape of cursor
     ,* 2: Block ("█")
     ,* 4: Underline ("_")
     ,* 6: Bar ("|")
     ,* 7: Snowman ("☃")
     ,*/
    static unsigned int cursorshape = 7;

    /*
     ,* Default columns and rows numbers
     ,*/

    static unsigned int cols = 80;
    static unsigned int rows = 24;

    /*
     ,* Default colour and shape of the mouse cursor
     ,*/
    static unsigned int mouseshape = XC_xterm;
    static unsigned int mousefg = 7;
    static unsigned int mousebg = 0;

    /*
     ,* Color used to display font attributes when fontconfig selected a font which
     ,* doesn't match the ones requested.
     ,*/
    static unsigned int defaultattr = 11;

    /*
     ,* Force mouse select/shortcuts while mask is active (when MODE_MOUSE is set).
     ,* Note that if you want to use ShiftMask with selmasks, set this to an other
     ,* modifier, set to 0 to not use it.
     ,*/
    static uint forcemousemod = ShiftMask;

    /*
     ,* Internal mouse shortcuts.
     ,* Beware that overloading Button1 will disable the selection.
     ,*/
    static MouseShortcut mshortcuts[] = {
	    /* mask                 button   function        argument       release */
	    { XK_ANY_MOD,           Button2, selpaste,       {.i = 0},      1 },
	    { ShiftMask,            Button4, ttysend,        {.s = "\033[5;2~"} },
	    { XK_ANY_MOD,           Button4, ttysend,        {.s = "\031"} },
	    { ShiftMask,            Button5, ttysend,        {.s = "\033[6;2~"} },
	    { XK_ANY_MOD,           Button5, ttysend,        {.s = "\005"} },
    };

    /* Internal keyboard shortcuts. */
    #define MODKEY Mod1Mask
    #define TERMMOD (ControlMask|ShiftMask)

    static Shortcut shortcuts[] = {
	    /* mask                 keysym          function        argument */
	    { XK_ANY_MOD,           XK_Break,       sendbreak,      {.i =  0} },
	    { ControlMask,          XK_Print,       toggleprinter,  {.i =  0} },
	    { ShiftMask,            XK_Print,       printscreen,    {.i =  0} },
	    { XK_ANY_MOD,           XK_Print,       printsel,       {.i =  0} },
	    { TERMMOD,              XK_Prior,       zoom,           {.f = +1} },
	    { TERMMOD,              XK_Next,        zoom,           {.f = -1} },
	    { TERMMOD,              XK_Home,        zoomreset,      {.f =  0} },
	    { TERMMOD,              XK_C,           clipcopy,       {.i =  0} },
	    { TERMMOD,              XK_V,           clippaste,      {.i =  0} },
	    { TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
	    { ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
	    { TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
    };

    /*
     ,* Special keys (change & recompile st.info accordingly)
     ,*
     ,* Mask value:
     ,* * Use XK_ANY_MOD to match the key no matter modifiers state
     ,* * Use XK_NO_MOD to match the key alone (no modifiers)
     ,* appkey value:
     ,* * 0: no value
     ,* * > 0: keypad application mode enabled
     ,* *   = 2: term.numlock = 1
     ,* * < 0: keypad application mode disabled
     ,* appcursor value:
     ,* * 0: no value
     ,* * > 0: cursor application mode enabled
     ,* * < 0: cursor application mode disabled
     ,*
     ,* Be careful with the order of the definitions because st searches in
     ,* this table sequentially, so any XK_ANY_MOD must be in the last
     ,* position for a key.
     ,*/

    /*
     ,* If you want keys other than the X11 function keys (0xFD00 - 0xFFFF)
     ,* to be mapped below, add them to this array.
     ,*/
    static KeySym mappedkeys[] = { -1 };

    /*
     ,* State bits to ignore when matching key or button events.  By default,
     ,* numlock (Mod2Mask) and keyboard layout (XK_SWITCH_MOD) are ignored.
     ,*/
    static uint ignoremod = Mod2Mask|XK_SWITCH_MOD;

    /*
     ,* This is the huge key array which defines all compatibility to the Linux
     ,* world. Please decide about changes wisely.
     ,*/
    static Key key[] = {
	    /* keysym           mask            string      appkey appcursor */
	    { XK_KP_Home,       ShiftMask,      "\033[2J",       0,   -1},
	    { XK_KP_Home,       ShiftMask,      "\033[1;2H",     0,   +1},
	    { XK_KP_Home,       XK_ANY_MOD,     "\033[H",        0,   -1},
	    { XK_KP_Home,       XK_ANY_MOD,     "\033[1~",       0,   +1},
	    { XK_KP_Up,         XK_ANY_MOD,     "\033Ox",       +1,    0},
	    { XK_KP_Up,         XK_ANY_MOD,     "\033[A",        0,   -1},
	    { XK_KP_Up,         XK_ANY_MOD,     "\033OA",        0,   +1},
	    { XK_KP_Down,       XK_ANY_MOD,     "\033Or",       +1,    0},
	    { XK_KP_Down,       XK_ANY_MOD,     "\033[B",        0,   -1},
	    { XK_KP_Down,       XK_ANY_MOD,     "\033OB",        0,   +1},
	    { XK_KP_Left,       XK_ANY_MOD,     "\033Ot",       +1,    0},
	    { XK_KP_Left,       XK_ANY_MOD,     "\033[D",        0,   -1},
	    { XK_KP_Left,       XK_ANY_MOD,     "\033OD",        0,   +1},
	    { XK_KP_Right,      XK_ANY_MOD,     "\033Ov",       +1,    0},
	    { XK_KP_Right,      XK_ANY_MOD,     "\033[C",        0,   -1},
	    { XK_KP_Right,      XK_ANY_MOD,     "\033OC",        0,   +1},
	    { XK_KP_Prior,      ShiftMask,      "\033[5;2~",     0,    0},
	    { XK_KP_Prior,      XK_ANY_MOD,     "\033[5~",       0,    0},
	    { XK_KP_Begin,      XK_ANY_MOD,     "\033[E",        0,    0},
	    { XK_KP_End,        ControlMask,    "\033[J",       -1,    0},
	    { XK_KP_End,        ControlMask,    "\033[1;5F",    +1,    0},
	    { XK_KP_End,        ShiftMask,      "\033[K",       -1,    0},
	    { XK_KP_End,        ShiftMask,      "\033[1;2F",    +1,    0},
	    { XK_KP_End,        XK_ANY_MOD,     "\033[4~",       0,    0},
	    { XK_KP_Next,       ShiftMask,      "\033[6;2~",     0,    0},
	    { XK_KP_Next,       XK_ANY_MOD,     "\033[6~",       0,    0},
	    { XK_KP_Insert,     ShiftMask,      "\033[2;2~",    +1,    0},
	    { XK_KP_Insert,     ShiftMask,      "\033[4l",      -1,    0},
	    { XK_KP_Insert,     ControlMask,    "\033[L",       -1,    0},
	    { XK_KP_Insert,     ControlMask,    "\033[2;5~",    +1,    0},
	    { XK_KP_Insert,     XK_ANY_MOD,     "\033[4h",      -1,    0},
	    { XK_KP_Insert,     XK_ANY_MOD,     "\033[2~",      +1,    0},
	    { XK_KP_Delete,     ControlMask,    "\033[M",       -1,    0},
	    { XK_KP_Delete,     ControlMask,    "\033[3;5~",    +1,    0},
	    { XK_KP_Delete,     ShiftMask,      "\033[2K",      -1,    0},
	    { XK_KP_Delete,     ShiftMask,      "\033[3;2~",    +1,    0},
	    { XK_KP_Delete,     XK_ANY_MOD,     "\033[P",       -1,    0},
	    { XK_KP_Delete,     XK_ANY_MOD,     "\033[3~",      +1,    0},
	    { XK_KP_Multiply,   XK_ANY_MOD,     "\033Oj",       +2,    0},
	    { XK_KP_Add,        XK_ANY_MOD,     "\033Ok",       +2,    0},
	    { XK_KP_Enter,      XK_ANY_MOD,     "\033OM",       +2,    0},
	    { XK_KP_Enter,      XK_ANY_MOD,     "\r",           -1,    0},
	    { XK_KP_Subtract,   XK_ANY_MOD,     "\033Om",       +2,    0},
	    { XK_KP_Decimal,    XK_ANY_MOD,     "\033On",       +2,    0},
	    { XK_KP_Divide,     XK_ANY_MOD,     "\033Oo",       +2,    0},
	    { XK_KP_0,          XK_ANY_MOD,     "\033Op",       +2,    0},
	    { XK_KP_1,          XK_ANY_MOD,     "\033Oq",       +2,    0},
	    { XK_KP_2,          XK_ANY_MOD,     "\033Or",       +2,    0},
	    { XK_KP_3,          XK_ANY_MOD,     "\033Os",       +2,    0},
	    { XK_KP_4,          XK_ANY_MOD,     "\033Ot",       +2,    0},
	    { XK_KP_5,          XK_ANY_MOD,     "\033Ou",       +2,    0},
	    { XK_KP_6,          XK_ANY_MOD,     "\033Ov",       +2,    0},
	    { XK_KP_7,          XK_ANY_MOD,     "\033Ow",       +2,    0},
	    { XK_KP_8,          XK_ANY_MOD,     "\033Ox",       +2,    0},
	    { XK_KP_9,          XK_ANY_MOD,     "\033Oy",       +2,    0},
	    { XK_Up,            ShiftMask,      "\033[1;2A",     0,    0},
	    { XK_Up,            Mod1Mask,       "\033[1;3A",     0,    0},
	    { XK_Up,         ShiftMask|Mod1Mask,"\033[1;4A",     0,    0},
	    { XK_Up,            ControlMask,    "\033[1;5A",     0,    0},
	    { XK_Up,      ShiftMask|ControlMask,"\033[1;6A",     0,    0},
	    { XK_Up,       ControlMask|Mod1Mask,"\033[1;7A",     0,    0},
	    { XK_Up,ShiftMask|ControlMask|Mod1Mask,"\033[1;8A",  0,    0},
	    { XK_Up,            XK_ANY_MOD,     "\033[A",        0,   -1},
	    { XK_Up,            XK_ANY_MOD,     "\033OA",        0,   +1},
	    { XK_Down,          ShiftMask,      "\033[1;2B",     0,    0},
	    { XK_Down,          Mod1Mask,       "\033[1;3B",     0,    0},
	    { XK_Down,       ShiftMask|Mod1Mask,"\033[1;4B",     0,    0},
	    { XK_Down,          ControlMask,    "\033[1;5B",     0,    0},
	    { XK_Down,    ShiftMask|ControlMask,"\033[1;6B",     0,    0},
	    { XK_Down,     ControlMask|Mod1Mask,"\033[1;7B",     0,    0},
	    { XK_Down,ShiftMask|ControlMask|Mod1Mask,"\033[1;8B",0,    0},
	    { XK_Down,          XK_ANY_MOD,     "\033[B",        0,   -1},
	    { XK_Down,          XK_ANY_MOD,     "\033OB",        0,   +1},
	    { XK_Left,          ShiftMask,      "\033[1;2D",     0,    0},
	    { XK_Left,          Mod1Mask,       "\033[1;3D",     0,    0},
	    { XK_Left,       ShiftMask|Mod1Mask,"\033[1;4D",     0,    0},
	    { XK_Left,          ControlMask,    "\033[1;5D",     0,    0},
	    { XK_Left,    ShiftMask|ControlMask,"\033[1;6D",     0,    0},
	    { XK_Left,     ControlMask|Mod1Mask,"\033[1;7D",     0,    0},
	    { XK_Left,ShiftMask|ControlMask|Mod1Mask,"\033[1;8D",0,    0},
	    { XK_Left,          XK_ANY_MOD,     "\033[D",        0,   -1},
	    { XK_Left,          XK_ANY_MOD,     "\033OD",        0,   +1},
	    { XK_Right,         ShiftMask,      "\033[1;2C",     0,    0},
	    { XK_Right,         Mod1Mask,       "\033[1;3C",     0,    0},
	    { XK_Right,      ShiftMask|Mod1Mask,"\033[1;4C",     0,    0},
	    { XK_Right,         ControlMask,    "\033[1;5C",     0,    0},
	    { XK_Right,   ShiftMask|ControlMask,"\033[1;6C",     0,    0},
	    { XK_Right,    ControlMask|Mod1Mask,"\033[1;7C",     0,    0},
	    { XK_Right,ShiftMask|ControlMask|Mod1Mask,"\033[1;8C",0,   0},
	    { XK_Right,         XK_ANY_MOD,     "\033[C",        0,   -1},
	    { XK_Right,         XK_ANY_MOD,     "\033OC",        0,   +1},
	    { XK_ISO_Left_Tab,  ShiftMask,      "\033[Z",        0,    0},
	    { XK_Return,        Mod1Mask,       "\033\r",        0,    0},
	    { XK_Return,        XK_ANY_MOD,     "\r",            0,    0},
	    { XK_Insert,        ShiftMask,      "\033[4l",      -1,    0},
	    { XK_Insert,        ShiftMask,      "\033[2;2~",    +1,    0},
	    { XK_Insert,        ControlMask,    "\033[L",       -1,    0},
	    { XK_Insert,        ControlMask,    "\033[2;5~",    +1,    0},
	    { XK_Insert,        XK_ANY_MOD,     "\033[4h",      -1,    0},
	    { XK_Insert,        XK_ANY_MOD,     "\033[2~",      +1,    0},
	    { XK_Delete,        ControlMask,    "\033[M",       -1,    0},
	    { XK_Delete,        ControlMask,    "\033[3;5~",    +1,    0},
	    { XK_Delete,        ShiftMask,      "\033[2K",      -1,    0},
	    { XK_Delete,        ShiftMask,      "\033[3;2~",    +1,    0},
	    { XK_Delete,        XK_ANY_MOD,     "\033[P",       -1,    0},
	    { XK_Delete,        XK_ANY_MOD,     "\033[3~",      +1,    0},
	    { XK_BackSpace,     XK_NO_MOD,      "\177",          0,    0},
	    { XK_BackSpace,     Mod1Mask,       "\033\177",      0,    0},
	    { XK_Home,          ShiftMask,      "\033[2J",       0,   -1},
	    { XK_Home,          ShiftMask,      "\033[1;2H",     0,   +1},
	    { XK_Home,          XK_ANY_MOD,     "\033[H",        0,   -1},
	    { XK_Home,          XK_ANY_MOD,     "\033[1~",       0,   +1},
	    { XK_End,           ControlMask,    "\033[J",       -1,    0},
	    { XK_End,           ControlMask,    "\033[1;5F",    +1,    0},
	    { XK_End,           ShiftMask,      "\033[K",       -1,    0},
	    { XK_End,           ShiftMask,      "\033[1;2F",    +1,    0},
	    { XK_End,           XK_ANY_MOD,     "\033[4~",       0,    0},
	    { XK_Prior,         ControlMask,    "\033[5;5~",     0,    0},
	    { XK_Prior,         ShiftMask,      "\033[5;2~",     0,    0},
	    { XK_Prior,         XK_ANY_MOD,     "\033[5~",       0,    0},
	    { XK_Next,          ControlMask,    "\033[6;5~",     0,    0},
	    { XK_Next,          ShiftMask,      "\033[6;2~",     0,    0},
	    { XK_Next,          XK_ANY_MOD,     "\033[6~",       0,    0},
	    { XK_F1,            XK_NO_MOD,      "\033OP" ,       0,    0},
	    { XK_F1, /* F13 */  ShiftMask,      "\033[1;2P",     0,    0},
	    { XK_F1, /* F25 */  ControlMask,    "\033[1;5P",     0,    0},
	    { XK_F1, /* F37 */  Mod4Mask,       "\033[1;6P",     0,    0},
	    { XK_F1, /* F49 */  Mod1Mask,       "\033[1;3P",     0,    0},
	    { XK_F1, /* F61 */  Mod3Mask,       "\033[1;4P",     0,    0},
	    { XK_F2,            XK_NO_MOD,      "\033OQ" ,       0,    0},
	    { XK_F2, /* F14 */  ShiftMask,      "\033[1;2Q",     0,    0},
	    { XK_F2, /* F26 */  ControlMask,    "\033[1;5Q",     0,    0},
	    { XK_F2, /* F38 */  Mod4Mask,       "\033[1;6Q",     0,    0},
	    { XK_F2, /* F50 */  Mod1Mask,       "\033[1;3Q",     0,    0},
	    { XK_F2, /* F62 */  Mod3Mask,       "\033[1;4Q",     0,    0},
	    { XK_F3,            XK_NO_MOD,      "\033OR" ,       0,    0},
	    { XK_F3, /* F15 */  ShiftMask,      "\033[1;2R",     0,    0},
	    { XK_F3, /* F27 */  ControlMask,    "\033[1;5R",     0,    0},
	    { XK_F3, /* F39 */  Mod4Mask,       "\033[1;6R",     0,    0},
	    { XK_F3, /* F51 */  Mod1Mask,       "\033[1;3R",     0,    0},
	    { XK_F3, /* F63 */  Mod3Mask,       "\033[1;4R",     0,    0},
	    { XK_F4,            XK_NO_MOD,      "\033OS" ,       0,    0},
	    { XK_F4, /* F16 */  ShiftMask,      "\033[1;2S",     0,    0},
	    { XK_F4, /* F28 */  ControlMask,    "\033[1;5S",     0,    0},
	    { XK_F4, /* F40 */  Mod4Mask,       "\033[1;6S",     0,    0},
	    { XK_F4, /* F52 */  Mod1Mask,       "\033[1;3S",     0,    0},
	    { XK_F5,            XK_NO_MOD,      "\033[15~",      0,    0},
	    { XK_F5, /* F17 */  ShiftMask,      "\033[15;2~",    0,    0},
	    { XK_F5, /* F29 */  ControlMask,    "\033[15;5~",    0,    0},
	    { XK_F5, /* F41 */  Mod4Mask,       "\033[15;6~",    0,    0},
	    { XK_F5, /* F53 */  Mod1Mask,       "\033[15;3~",    0,    0},
	    { XK_F6,            XK_NO_MOD,      "\033[17~",      0,    0},
	    { XK_F6, /* F18 */  ShiftMask,      "\033[17;2~",    0,    0},
	    { XK_F6, /* F30 */  ControlMask,    "\033[17;5~",    0,    0},
	    { XK_F6, /* F42 */  Mod4Mask,       "\033[17;6~",    0,    0},
	    { XK_F6, /* F54 */  Mod1Mask,       "\033[17;3~",    0,    0},
	    { XK_F7,            XK_NO_MOD,      "\033[18~",      0,    0},
	    { XK_F7, /* F19 */  ShiftMask,      "\033[18;2~",    0,    0},
	    { XK_F7, /* F31 */  ControlMask,    "\033[18;5~",    0,    0},
	    { XK_F7, /* F43 */  Mod4Mask,       "\033[18;6~",    0,    0},
	    { XK_F7, /* F55 */  Mod1Mask,       "\033[18;3~",    0,    0},
	    { XK_F8,            XK_NO_MOD,      "\033[19~",      0,    0},
	    { XK_F8, /* F20 */  ShiftMask,      "\033[19;2~",    0,    0},
	    { XK_F8, /* F32 */  ControlMask,    "\033[19;5~",    0,    0},
	    { XK_F8, /* F44 */  Mod4Mask,       "\033[19;6~",    0,    0},
	    { XK_F8, /* F56 */  Mod1Mask,       "\033[19;3~",    0,    0},
	    { XK_F9,            XK_NO_MOD,      "\033[20~",      0,    0},
	    { XK_F9, /* F21 */  ShiftMask,      "\033[20;2~",    0,    0},
	    { XK_F9, /* F33 */  ControlMask,    "\033[20;5~",    0,    0},
	    { XK_F9, /* F45 */  Mod4Mask,       "\033[20;6~",    0,    0},
	    { XK_F9, /* F57 */  Mod1Mask,       "\033[20;3~",    0,    0},
	    { XK_F10,           XK_NO_MOD,      "\033[21~",      0,    0},
	    { XK_F10, /* F22 */ ShiftMask,      "\033[21;2~",    0,    0},
	    { XK_F10, /* F34 */ ControlMask,    "\033[21;5~",    0,    0},
	    { XK_F10, /* F46 */ Mod4Mask,       "\033[21;6~",    0,    0},
	    { XK_F10, /* F58 */ Mod1Mask,       "\033[21;3~",    0,    0},
	    { XK_F11,           XK_NO_MOD,      "\033[23~",      0,    0},
	    { XK_F11, /* F23 */ ShiftMask,      "\033[23;2~",    0,    0},
	    { XK_F11, /* F35 */ ControlMask,    "\033[23;5~",    0,    0},
	    { XK_F11, /* F47 */ Mod4Mask,       "\033[23;6~",    0,    0},
	    { XK_F11, /* F59 */ Mod1Mask,       "\033[23;3~",    0,    0},
	    { XK_F12,           XK_NO_MOD,      "\033[24~",      0,    0},
	    { XK_F12, /* F24 */ ShiftMask,      "\033[24;2~",    0,    0},
	    { XK_F12, /* F36 */ ControlMask,    "\033[24;5~",    0,    0},
	    { XK_F12, /* F48 */ Mod4Mask,       "\033[24;6~",    0,    0},
	    { XK_F12, /* F60 */ Mod1Mask,       "\033[24;3~",    0,    0},
	    { XK_F13,           XK_NO_MOD,      "\033[1;2P",     0,    0},
	    { XK_F14,           XK_NO_MOD,      "\033[1;2Q",     0,    0},
	    { XK_F15,           XK_NO_MOD,      "\033[1;2R",     0,    0},
	    { XK_F16,           XK_NO_MOD,      "\033[1;2S",     0,    0},
	    { XK_F17,           XK_NO_MOD,      "\033[15;2~",    0,    0},
	    { XK_F18,           XK_NO_MOD,      "\033[17;2~",    0,    0},
	    { XK_F19,           XK_NO_MOD,      "\033[18;2~",    0,    0},
	    { XK_F20,           XK_NO_MOD,      "\033[19;2~",    0,    0},
	    { XK_F21,           XK_NO_MOD,      "\033[20;2~",    0,    0},
	    { XK_F22,           XK_NO_MOD,      "\033[21;2~",    0,    0},
	    { XK_F23,           XK_NO_MOD,      "\033[23;2~",    0,    0},
	    { XK_F24,           XK_NO_MOD,      "\033[24;2~",    0,    0},
	    { XK_F25,           XK_NO_MOD,      "\033[1;5P",     0,    0},
	    { XK_F26,           XK_NO_MOD,      "\033[1;5Q",     0,    0},
	    { XK_F27,           XK_NO_MOD,      "\033[1;5R",     0,    0},
	    { XK_F28,           XK_NO_MOD,      "\033[1;5S",     0,    0},
	    { XK_F29,           XK_NO_MOD,      "\033[15;5~",    0,    0},
	    { XK_F30,           XK_NO_MOD,      "\033[17;5~",    0,    0},
	    { XK_F31,           XK_NO_MOD,      "\033[18;5~",    0,    0},
	    { XK_F32,           XK_NO_MOD,      "\033[19;5~",    0,    0},
	    { XK_F33,           XK_NO_MOD,      "\033[20;5~",    0,    0},
	    { XK_F34,           XK_NO_MOD,      "\033[21;5~",    0,    0},
	    { XK_F35,           XK_NO_MOD,      "\033[23;5~",    0,    0},
    };

    /*
     ,* Selection types' masks.
     ,* Use the same masks as usual.
     ,* Button1Mask is always unset, to make masks match between ButtonPress.
     ,* ButtonRelease and MotionNotify.
     ,* If no match is found, regular selection is used.
     ,*/
    static uint selmasks[] = {
	    [SEL_RECTANGULAR] = Mod1Mask,
    };

    /*
     ,* Printable characters in ASCII, used to estimate the advance width
     ,* of single wide characters.
     ,*/
    static char ascii_printable[] =
	    " !\"#$%&'()*+,-./0123456789:;<=>?"
	    "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
	    "`abcdefghijklmnopqrstuvwxyz{|}~";
    #+end_src

* Dmenu
** dmenu - record it
     #+BEGIN_SRC shell-script
     #!/bin/sh

     # Usage:
     # `record`: Ask for recording type via dmenu
     # `record screencast`: Record both audio and screen
     # `record video`: Record only screen
     # `record audio`: Record only audio
     # `record kill`: Kill existing recording
     #
     # If there is already a running instance, user will be prompted to end it.

     updateicon() { \
		    echo "$1" > ~/.recordingicon
		    pkill -RTMIN+9 i3blocks
     }

     killrecording() {
	 recpid="$(cat ~/.recordingpid)"
	 # kill with SIGTERM, allowing finishing touches.
	 kill -15 "$recpid"
	 rm -f ~/.recordingpid
	 updateicon ""
	 pkill -RTMIN+9 i3blocks
	 # even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	 sleep 3
	 kill -9 "$recpid"
	 exit
     }

     screencast() { \
		    ffmpeg -y \
			   -f x11grab \
			   -framerate 60 \
			   -s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
			   -i :0.0 \
			   -f alsa -i default \
			   -r 30 \
			   -c:v libx264rgb -crf 0 -preset ultrafast -c:a flac \
			   "$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mkv" &
		    echo $! > ~/.recordingpid
		    updateicon "⏺️🎙️"
     }

     video() { ffmpeg \
		   -f x11grab \
		   -s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
		   -i :0.0 \
		   -c:v libx264 -qp 0 -r 30 \
		   "$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
	       echo $! > ~/.recordingpid
	       updateicon "⏺️"
	     }

     webcamhidef() { ffmpeg \
			 -f v412 \
			 -i /dev/video0 \
			 -video_size 1920x1080 \
			 "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
		     echo $! > ~/.recordingpid
		     updateicon "🎥"
		   }

     webcam() { ffmpeg \
		    -f v412 \
		    -i /dev/video0 \
		    -video_size 640x480 \
		    "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
		echo $! > ~/.recordingpid
		updateicon "🎥"
	      }


     audio() { \
	       ffmpeg \
		   -f alsa -i default \
		   -c:a flac \
		   "$HOME/audio-$(date '+%y%m%d-%H%M-%S').flac" &
	       echo $! > ~/.recordingpid
	       updateicon "🎙️"
     }

     askrecording() { \
		      choice=$(printf "screencast\\nvideo\\naudio\\nwebcam\\nwebcam (hi-def)" | dmenu -i -p "Select recording style:")
		      case "$choice" in
			  screencast) screencast;;
			  audio) audio;;
			  video) video;;
			  webcam) webcamrecord;;
			  "webcam (hi-def)") webcamrecord;;
		      esac
     }

     asktoend() { \
		  response=$(printf "No\\nYes" | dmenu -i -p "Recording still active. End recording?") &&
		      [ "$response" = "Yes" ] &&  killrecording
     }


     case "$1" in
	 screencast) screencast;;
	 audio) audio;;
	 video) video;;
	 kill) killrecording;;
	 ,*) ([ -f ~/.recordingpid ] && asktoend && exit) || askrecording;;
     esac


     #+END_SRC
** dmenu - mount/unmount drives
     #+BEGIN_SRC shell-script

     #!/bin/sh
     # Gives a dmenu prompt to mount unmounted drives.
     # If they're in /etc/fstab, they'll be mounted automatically.
     # Otherwise, you'll be prompted to give a mountpoint from already existsing directories.
     # If you input a novel directory, it will prompt you to create that directory.
     pgrep -x dmenu && exit

     getmount() { \
		  [ -z "$chosen" ] && exit 1
		  mp="$(find $1 | dmenu -i -p "Type in mount point.")"
		  [ "$mp" = "" ] && exit 1
		  if [ ! -d "$mp" ]; then
		      mkdiryn=$(printf "No\\nYes" | dmenu -i -p "$mp does not exist. Create it?")
		      [ "$mkdiryn" = "Yes" ] && (mkdir -p "$mp" || sudo -A mkdir -p "$mp")
		  fi
     }

     mountusb() { \
		  chosen="$(echo "$usbdrives" | dmenu -i -p "Mount which drive?" | awk '{print $1}')"
		  sudo -A mount "$chosen" && notify-send "$chosen mounted." && exit 0
		  getmount "/mnt /media /mount /home -maxdepth 5 -type d"
		  partitiontype="$(lsblk -no "fstype" "$chosen")"
		  case "$partitiontype" in
		      "vfat") sudo -A mount -t vfat "$chosen" "$mp" -o rw,umask=0000;;
		      ,*) sudo -A mount "$chosen" "$mp";;
		  esac
		  notify-send "$chosen mounted to $mp."
     }

     mountandroid() { \
		      chosen=$(echo "$anddrives" | dmenu -i -p "Which Android device?" | cut -d : -f 1)
		      getmount "$HOME -maxdepth 3 -type d"
		      simple-mtpfs --device "$chosen" "$mp"
		      notify-send "Android device mounted to $mp."
     }

     asktype() { \
		 case $(printf "USB\\nAndroid" | dmenu -i -p "Mount a USB drive or Android device?") in
		     USB) mountusb ;;
		     Android) mountandroid ;;
		 esac
     }

     anddrives=$(simple-mtpfs -l 2>/dev/null)
     usbdrives="$(lsblk -rpo "name,type,size,mountpoint" | awk '$2=="part"&&$4==""{printf "%s (%s)\n",$1,$3}')"

     if [ -z "$usbdrives" ]; then
	 [ -z "$anddrives" ] && echo "No USB drive or Android device detected" && exit
	 echo "Android device(s) detected."
	 mountandroid
     else
	 if [ -z "$anddrives" ]; then
	     echo "USB drive(s) detected."
	     mountusb
	 else
	     echo "Mountable USB drive(s) and Android device(s) detected."
	     asktype
	 fi
     fi

     #+END_SRC
