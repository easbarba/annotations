#+TITLE: Dots Config Legacy

* zae
    #+begin_src yaml
    ---
    builddep: builddep
    clean: autoremove
    depends: repoquery --requires --resolve
    download: ''
    fix: fix
    help: help
    info: info
    install: install
    installed: list installed
    remove: remove
    search: search
    sysupgrade: sysupgrade
    update: update
    upgrade: upgrade

    ---
    builddep: ''
    clean: autoremove
    depends: ''
    download: fetch
    fix: fix
    help: help
    info: query
    install: install
    installed: version
    remove: remove
    search: search
    sysupgrade: ''
    update: update
    upgrade: upgrade
    ---
    builddep: ''
    clean: autoremove
    depends: ''
    download: fetch
    fix: fix
    help: help
    info: query
    install: install
    installed: version
    remove: remove
    search: search
    sysupgrade: ''
    update: update
    upgrade: upgrade

    ---
    builddep: build-dep
    clean: nix-store --gc
    depends: depends
    download: download
    fix: install -f
    help: help
    info: show
    install: nix-env --install
    install+: nix-env --install -A
    installed: nix-env -qa
    remove: nix-env --uninstall
    search: nix-env -qa
    sysupgrade: ''
    update: nix-env --update
    upgrade: nix-env --upgrade


    ---
    builddep: ''
    clean: ''
    depends: ''
    download: ''
    fix: ''
    help: help
    info: ''
    install: "-S"
    installed: ''
    remove: "-R"
    search: "-Ss"
    sysupgrade: ''
    update: "-Syy"
    upgrade: "-Syu"


    ---
    builddep: ''
    clean: autoremove
    depends: ''
    download: fetch
    fix: fix
    help: help
    info: query
    install: install
    installed: version
    remove: remove
    search: search
    sysupgrade: ''
    update: update
    upgrade: upgrade

    #+end_src
* qas
** devops
#+begin_src csv
cedon-k8s,master,https://gitlab.com/cedon/curso-k8s
book-of-kubernetes/examples,main,https://github.com/book-of-kubernetes/examples
kelseyhightower/kubernetes-the-hard-way,master,https://github.com/kelseyhightower/kubernetes-the-hard-way
ydamni-kubernetes-the-iac-way,main,https://github.com/ydamni/kubernetes-the-iac-way
michaelcade-90daysofdevops,main,https://github.com/MichaelCade/90DaysOfDevOps
#+end_src
** ruby
#+begin_src csv
name,branch,url
ruby-lsp,main,https://github.com/Shopify/ruby-lsp
sidekiq,main,https://github.com/mperham/sidekiq
fluentd,master,https://github.com/fluent/fluentd
rake,master,https://github.com/ruby/rake
ruby,master,https://github.com/ruby/ruby
#+end_src
** elixir
#+begin_src csv
name,branch,url
elixir-ls,master,https://github.com/elixir-lsp/elixir-ls
credo,master,https://github.com/rrrene/credo
ecto,master,https://github.com/elixir-ecto/ecto
hex,main,https://github.com/hexpm/hex
phoenix,master,https://github.com/phoenixframework/phoenix
elixir,main,https://github.com/elixir-lang/elixir
#+end_src
** js
#+begin_src csv
name,branch,url
https://github.com/facebook/react/
axios,master,https://github.com/axios/axios
#+end_src
** rust
#+begin_src csv
name,branch,url
kyclark-command-line-rust,master,https://github.com/kyclark/command-line-rust
fd,master,https://github.com/sharkdp/fd
starship,master,https://github.com/starship/starship
bat,master,https://github.com/sharkdp/bat
alacritty,master,https://github.com/alacritty/alacritty
cargo,master,https://github.com/rust-lang/cargo
rust,master,https://github.com/rust-lang/rust
#+end_src
** c
#+begin_src csv
name,branch,url
sway,master,https://github.com/swaywm/sway
openssh,master,https://github.com/openssh/openssh-portable
openssl,master,git://git.openssl.org/openssl
dwm,master,https://git.suckless.org/dwm
tmux,master,https://github.com/tmux/tmux
redis,master,https://github.com/redis/redis
curl,master,https://github.com/curl/curl

#+end_src
** lua
#+begin_src csv
name,branch,url
vicious,master,https://github.com/vicious-widgets/vicious
awesome,master,https://github.com/awesomeWM/awesome
lua-language-server,master,https://github.com/sumneko/lua-language-server
neovim,master,https://github.com/neovim/neovim
luarocks,master,https://github.com/luarocks/luarocks
lua,master,https://github.com/lua/lua
#+end_src
** clojure
#+begin_src csv
name,branch,url
cljfmt,master,https://github.com/weavejester/cljfmt
luminus,master,https://github.com/luminus-framework/luminus
leiningen,main,https://codeberg.org/leiningen/leiningen
clojure-lsp,master,https://github.com/clojure-lsp/clojure-lsp/
clojure,master,https://github.com/clojure/clojure
#+end_src
** python
#+begin_src csv
name,repository
flask,https://github.com/pallets/flask
httpie,https://github.com/httpie/httpie
requests,https://github.com/psf/requests
black,https://github.com/psf/black
mypy,https://github.com/python/mypy
cpython,https://github.com/python/cpython
#+end_src
** go
#+begin_src csv
name,branch,url
mpb,master,https://github.com/vbauerster/mpb
shfmt,master,https://github.com/mvdan/sh
flux2,main,https://github.com/fluxcd/flux2
crossplane,master,https://github.com/crossplane/crossplane
kubernetes,master,https://github.com/kubernetes/kubernetes
consul,main,https://github.com/hashicorp/consul
go,master,https://go.googlesource.com/go
#+end_src
** hare
#+begin_src csv
name,branch,url
hare-irc,master,https://git.sr.ht/~sircmpwn/hare-irc
himitsu,master,https://git.sr.ht/~sircmpwn/himitsu
harec,master,https://git.sr.ht/~sircmpwn/harec
hautils,master,https://git.sr.ht/~sircmpwn/hautils
hare,master,https://git.sr.ht/~sircmpwn/hare
#+end_src
** common lisp
#+begin_src csv
name,branch,url
38a938c2-stumpwm-config,master,https://github.com/38a938c2/stumpwm-config
stumpwm-goodies-joelagnel,master,https://github.com/joelagnel/stumpwm-goodies
stumpwm-config-lepisma,master,https://github.com/lepisma/cfg
stumpwm-config-herbertjones,master,https://github.com/herbertjones/my-stumpwm-config
stumpwm-config-paulownia,master,https://github.com/stumpwm/paulownia
stumpwm-config-mahogany,master,https://github.com/stumpwm/mahogany
stumpwm-config-nicolaspetton,master,https://github.com/NicolasPetton/stumpwm.d
stumpwm-config-alezost,master,https://github.com/alezost/stumpwm-config
nyxt,master,https://github.com/atlas-engineer/nyxt
stumpwm-contrib,master,https://github.com/stumpwm/stumpwm-contrib
stumpwm,master,https://github.com/stumpwm/stumpwm
cl-cookbook,master,https://github.com/LispCookbook/cl-cookbook
quicklisp-client,master,https://github.com/quicklisp/quicklisp-client
quicklisp-bootstrap,master,https://github.com/quicklisp/quicklisp-bootstrap
quicklisp-controller,master,https://github.com/quicklisp/quicklisp-controller
clx,master,https://github.com/franzinc/clx
clpm,main,https://gitlab.common-lisp.net/clpm/clpm
alexandria,master,https://gitlab.common-lisp.net/alexandria/alexandria
asdf,master,https://gitlab.common-lisp.net/asdf/asdf
sbcl,master,git://git.code.sf.net/p/sbcl/sbcl
#+end_src
** kotlin
#+begin_src csv
name,branch,url
kotlin,master,https://github.com/JetBrains/kotlin
#+end_src
** swift
#+begin_src csv
name,branch,url
mastodon-ios,main,https://github.com/mastodon/mastodon-ios
sourcekit-lsp,main,https://github.com/apple/sourcekit-lsp
swift-format,main,https://github.com/apple/swift-format
swift,main,https://github.com/apple/swift
#+end_src
** dart
#+begin_src csv
name,branch,url
dart-sass,main,https://github.com/sass/dart-sass
flutter,master,https://github.com/flutter/flutter
dart-pad,master,https://github.com/dart-lang/dart-pad
dart-test,master,https://github.com/dart-lang/test
dart,main,https://github.com/dart-lang/sdk
#+end_src
** php
#+begin_src csv
,name,branch,repository
guzzle,master,https://github.com/guzzle/guzzle
phpunit,main,https://github.com/sebastianbergmann/phpunit
composer,main,https://github.com/composer/composer
laravel-framework,9.x,https://github.com/laravel/framework
laravel,9.x,https://github.com/laravel/laravel
php-doc-en,master,https://github.com/php/doc-en
php-src,master,https://github.com/php/php-src
#+end_src
** misc
#+begin_src csv
name,repository
zero.sh,https://github.com/zero-sh/zero.sh
ansible,https://github.com/ansible/ansible
#+end_src

** css
#+begin_src yaml
   --- # css
   - https://github.com/IanLunn/Hover
   - https://github.com/jgthms/bulma
   - https://github.com/daneden/animate.css
   - https://github.com/oddbird/susy
   - https://github.com/necolas/normalize.css
   - https://github.com/mozdevs/cssremedy
#+end_src
** haskell
#+begin_src yaml
--- # Haskell
- https://gitlab.haskell.org/ghc/ghc
- https://gitlab.haskell.org/haskell/ghcup
- https://github.com/haskell/cabal
- https://github.com/commercialhaskell/stack
- https://github.com/haskell/haskell-language-server
- https://github.com/koalaman/shellcheck
- https://github.com/jgm/pandoc
- https://github.com/elm/compiler
#+end_src
** zig
#+begin_src yaml
name,repository
zig,https://github.com/ziglang/zig
nitter,https://github.com/zedeus/nitter
river,https://github.com/ifreund/river
zls,https://github.com/zigtools/zls
zig-bootstrap,https://github.com/ziglang/zig-bootstrap
#+end_src
** perl
#+begin_src yaml
   --- # Perl
   - https://github.com/perltidy/perltidy
   - https://github.com/moose/Moose
   - https://github.com/richterger/Perl-LanguageServer
   - https://github.com/imapsync/imapsync
   - https://github.com/ddclient/ddclient
   - https://github.com/apache/avro
   - https://github.com/mojolicious/mojo
   - https://github.com/i3/i3
   - https://github.com/bugzilla/bugzilla
   - https://github.com/hachiojipm/awesome-perl
   - https://github.com/Perl/perl5
#+end_src
** dart
#+begin_src yaml
   --- # Dart
   - https://github.com/roughike/inKino
   - https://github.com/flame-engine/flame
   - https://github.com/felangel/bloc
   - https://github.com/flutter/plugins
   - https://github.com/dart-lang/build
   - https://github.com/dart-lang/sdk

#+end_src
** php
#+begin_src yaml
   --- # php
   - https://github.com/PacktPublishing/Mastering-PHP-7
   - https://github.com/bcit-ci/CodeIgniter
   - https://github.com/felixfbecker/php-language-server
   - https://github.com/vimeo/psalm
   - https://github.com/laravel/lumen
   - https://github.com/nikic/php-parser
   - https://github.com/phpstan/phpstan
   - https://github.com/composer/composer
   - https://github.com/symfony/symfony
   - https://github.com/laravel/laravel
   - https://github.com/php/php-src
#+end_src
** python
#+begin_src yaml
   --- # python
   - https://github.com/python/cpython
   - https://github.com/python/mypy
   - https://github.com/python/peps
   - https://github.com/pypa/pip
   - https://github.com/pypa/wheel
   - https://github.com/pytest-dev/pytest
   - https://github.com/pypa/setuptools
   - https://github.com/PyCQA/pylint
   - https://github.com/nedbat/coveragepy
   - https://github.com/psf/black
#+end_src
* Guix Config
   #+begin_src scheme

   (locale "pt_BR.utf8")

   (locale-definitions
    (list (locale-definition (source "en_US") (name "en_US.utf8"))
	  (locale-definition (source "pt_BR") (name "pt_BR.utf8"))))

   ("/usr/bin/sh"
    ,(file-append (canonical-package coreutils)
		  "/bin/sh"))
   ("/usr/bin/bash"
    ,(file-append (canonical-package coreutils)
		  "/bin/bash"))

   ("/bin/pwd"
    ,(file-append (canonical-package coreutils)
		  "/bin/pwd"))


   ("/bin/startx" ,(xorg-start-command))

   #+end_src
* sway
#+begin_src config
### Output configuration
#
# Default wallpaper (more resolutions are available in @datadir@/backgrounds/sway/)
#output * bg ~/Pictures/wallpaper/fullsizephoto774797.jpg fill
#
# Example configuration:
#
   # output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.
#+end_src

* stumpwm
#+begin_src lisp
;; (defun executables ()
;;   (loop with path = (uiop:getenv "PATH")
;;         for p in (uiop:split-string path :separator ":")
;;         for dir = (probe-file p)
;;         when (uiop:directory-exists-p dir)
;;           append (uiop:directory-files dir)))

;; (defun find-executable (name)
;;   (find name (executables)
;;         :test #'equalp
;;         :key #'pathname-name))

;; (defun eas/anyexec (lst)
;;   "Return first executable that exist in lst"
;;   (dolist (current lst)
;;     (when (eas/commandv current)
;;       current)))


;; (defun eas/run-app (cmd prop &optional args) ;; FIX: fix
;;   "Run an instance of `cmd' with property `prop' (and any optional arguments `args')"
;;   (if (null args)
;;       (run-or-raise cmd prop)
;;       (run-or-raise (cat cmd " " args) prop)))

;; ;; (defcommand run-editor () ()
;;   "Run an instance of `*editor*' with property`:instance'."
;;   (eas/run-app *editor* (list :instance *editor*)))

;; (defcommand run-ide () ()
;;   "Run an instance of `*ide*' with property`:instance'."
;;   (eas/run-app *ide* (list :instance *ide*)))

;; (defcommand run-browser () ()
;;   "Run an instance of `*browser*' with property`:instance'."
;;   (eas/run-app *browser* (list :instance *browser*)))

;; (defcommand run-terminal () ()
;;   "Run an instance of `*terminal*' with property`:instance'."
;;   (eas/run-app *terminal* (list :instance *terminal*)))

;; (defcommand run-locker () ()
;;   "Run an instance of `*locker*' with property`:instance'."
;;   (eas/run-app *locker* (list :instance *locker*)))

;; (define-key *top-map* (kbd "s-RET") "run-terminal")
;; (define-key *top-map* (kbd "s-l") "run-locker")
;; (define-key *top-map* (kbd "s-b") "run-browser")
;; (define-key *top-map* (kbd "s-e") "run-editor")

;; -----------------
;; EXTERNAL SOFTWARE
;; -----------------

;; GLOBAL MACROS
;; (defmacro search-on-web (name url-prefix)
;;   `(defcommand ,name (search)
;;      ((:rest ,(concatenate 'string (symbol-name name) ": ")))
;;      (run-shell-command (format nil "~A ~A"
;; 				*browser*
;; 				(concat ,url-prefix (substitute #\+ #\Space search))))))

;; (search-on-web google "http://www.google.com/search?q=")
;; (search-on-web wikipedia "http://en.wikipedia.org/wiki/Special:Search?fulltext=Search&search=")
;; (search-on-web youtube "http://youtube.com/results?search_query=")

;; (defun runner (program &optional args)
;;   ".NET like Runnner."
;;   (uiop:run-program (concatenate 'string program " " args)))


;; (defcommand tocador () ()
;;   (let ((link (trivial-clipboard:text))
;; 	(player "mpv")
;; 	(args "--no-config --no-audio-display"))
;;     (runner "mpv" (concatenate 'string args
;; 			       " "
;; 			       link))))
;; (define-key *top-map* (kbd "s-P") "tocador")

;; ;; WALLPAPER
;; (defun waller()
;;   (let ((setter "feh")
;; 	(setter-args "--randomize --bg-fill")
;; 	(wallpapers (concatenate 'string *pictures* "/papelparede")))
;;     (run-shell-command (concatenate 'string  setter " " setter-args " " wallpapers))))

;; (when (eas/commandv "feh")
;;   (waller))

;; -----------------
;; CUSTOM COMMANDS
;; -----------------

;; (defcommand safe-quit () ()
;;   "Checks if any windows are open before quitting."
;;   (let ((win-count 0)) ;; count the windows in each group
;;     (dolist (group (screen-groups (current-screen)))
;;       (setq win-count (+ (length (group-windows group)) win-count)))
;;     (if (= win-count 0) ;; display the number of open windows or quit
;; 	(run-commands "quit")
;; 	(message (format nil "You have ~d ~a open" win-count
;; 			 (if (= win-count 1) "window" "windows"))))))

#+end_src
* Nixos
** Config
    #+begin_src nix
    #efiInstallAsRemovable = true; # in case canTouchEfiVariables doesn't work for your system

    #boot.loader.systemd-boot.enable = true;

	  # services.xserver.xkbOptions = "eurosign:e";

	  # Some programs need SUID wrappers, can be configured further or are
	  # started in user sessions.
	  # programs.mtr.enable = true;
	  # programs.gnupg.agent = {
	  #   enable = true;
	  #   enableSSHSupport = true;
	  #   pinentryFlavor = "gnome3";
	  # };

	  # * Firewall
	  # networking.firewall.allowedTCPPorts = [ ... ];
	  # networking.firewall.allowedUDPPorts = [ ... ];
	  # Or disable the firewall altogether.
	  # networking.firewall.enable = false;

	  # Enable CUPS to print documents.
	  # services.printing.enable = true;

    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

    # Select internationalisation properties.
    # i18n.defaultLocale = "en_US.UTF-8";
    # console = {
    #   font = "Lat2-Terminus16";
    #   keyMap = "us";
    # };

    #+end_src
* Nyxt
   #+begin_src conf ~/.config/nyxt/init.lisp :mkdirp yes
   (in-package :next-user)

   ;; Search Engines
   (defvar a/search-engines
     '(("bi" . "https://bing.com/?q=~a")
       ("dg" . "https://duckduckgo.com/?q=~a")
       ("g" . "https://www.google.com/search?ion=1&q=~a")
       ("gh" . "https://github.com/search?ref=simplesearch&q=~a")
       ("q" .  "http://quickdocs.org/search?q=~a")
       ("s" .  "http://stackoverflow.com/search?q=~a")
       ("wp" . "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=~a")
       ("yt" . "https://www.youtube.com/results?search_query=~a")))

   (defclass my-browser (gtk-browser)
     ((search-engines :initform
		      (append
		       a/search-engines
		       (get-default 'browser 'search-engines)))))

   (setf *browser-class* 'my-browser)
   #+end_src
** Config
    #+begin_src lisp
    (defvar *my-keymap* (make-keymap)  "My keymap.")

    (define-command play-page-video (&optional (buffer (current-buffer)))
      "Play video in the currently open buffer."
      (uiop:run-program (list "mpv" (url buffer))))
    (define-key :keymap *my-keymap*  "C-M-c v" #'play-page-video)

    (define-command play-video-in-current-page (&optional (buffer (current-buffer)))
      "Play video in the currently open buffer."
      (uiop:run-program (list "mpv" (url buffer))))

    (defvar *my-keymap* (make-keymap)
      "My keymap.")

    (define-mode my-mode ()
      "Dummy mode for the custom key bindings in `*my-keymap*'."
      ((keymap-schemes :initform (list :emacs *my-keymap*
				       :vi-normal *my-keymap*))))

    Debugging
    (setf *swank-port* 4006)


    Use development platform port.
    (setf +platform-port-command+
	  "~/.local/bin/next-gtk-webkit")

    open-file
    (defun my-open-videos (filename)
      "Open videos with mpv."
      (handler-case (let ((extension (pathname-type filename)))
		      (match extension
			     ((or "webm" "mkv" "mp4")
			      (uiop:launch-program (list "mpv" filename)))
			     (_
			      (next/file-manager-mode:open-file-function filename))))
	(error (c) (log:error "Error opening ~a: ~a" filename c))))

    (setf next/file-manager-mode:*open-file-function* #'my-open-videos)


    (define-key :keymap *my-keymap* "C-M-c v" #'play-video-in-current-page)


    -- a-FUNCTIONS (m-x)
    (defun a-play-video ()
      "Play current page's video"
      (with-result (url (buffer-get-url))
	(uiop:launch-program (list "mpv" url))))

    (define-command a-get-video ()
      "Download current page's video"
      (with-result (url (buffer-get-url))
	(uiop:launch-program (list "youtube-dl" url "&"))))

    (define-command a-bookmark-url ()
      "Allow the user to bookmark a URL via minibuffer input."
      (with-result (url (read-from-minibuffer (minibuffer *interface*)))
	(%bookmark-url url)))

    ;; Zoom
    ;; (setf *zoom-ratio-default* 1.6)

    HOME PAGE
    (setf (get-default 'remote-interface 'start-page-url) "https://cnn.com")

    ;; Minibuffer
    (setf (get-default 'minibuffer 'minibuffer-style)
	  (cl-css:inline-css
	   '((body :border-top "14px solid red"))))

    #+end_src
* gtk-3.0
   #+begin_src conf
   [Settings]
   gtk-fallback-icon-theme=Numix
   gtk-icon-theme-name=Canta
   gtk-key-theme-name=Emacs
   gtk-theme-name=Canta
   #+end_src
* pycodestyle
   #+begin_src conf
   [pycodestyle]
   max-line-length = 90
   #+end_src
* flake
   #+begin_src conf
   [flake8]
   max-line-length = 88
   exclude = tests/*
   max-complexity = 10
   #+end_src
* tmux
   #+begin_src conf
   set-option -g default-shell "/usr/bin/bash"

   24-bit color
   set -ga terminal-overrides ",xterm-termite:Tc"

   24 Colors
   set -g default-terminal "screen-256color-italic"
   set-option -ga terminal-overrides ",xterm-256color*:Tc:smso"

   mouse
   bind-key m set-option -g mouse on \; display 'Mouse: ON'
   bind-key M set-option -g mouse off \; display 'Mouse: OFF'

   #+end_src
* fontconfig
   #+begin_src conf
   <?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
   <fontconfig>
     <alias>
       <family>serif</family>
       <prefer>
	 <family>Noto Color Emoji</family>
       </prefer>
     </alias>
     <alias>
       <family>sans-serif</family>
       <prefer>
	 <family>Noto Color Emoji</family>
       </prefer>
     </alias>
     <alias>
       <family>monospace</family>
       <prefer>
	 <family>Noto Color Emoji</family>
       </prefer>
     </alias>
   </fontconfig>
   #+end_src
