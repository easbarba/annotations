#+TITLE: Dots | .config | Legacy

* qas
** cpp
#+begin_src json
{
    "lang": "cpp",
    "projects": [
        {
        "name": "fffaraz-awesome-cpp",
        "branch": "master",
        "url": "https://github.com/fffaraz/awesome-cpp"
    },
        {
        "name": "kdeconnect",
        "branch": "master",
        "url": "https://github.com/KDE/kdeconnect-kde"
    },
        {
        "name": "kdenlive",
        "branch": "master",
        "url": "https://github.com/KDE/kdenlive"
    },
        {
        "name": "krita",
        "branch": "master",
        "url": "https://github.com/KDE/krita"
    },
        {
        "name": "beast",
        "branch": "develop",
        "url": "https://github.com/boostorg/beast"
    },
        {
        "name": "taglib",
        "branch": "master",
        "url": "https://github.com/taglib/taglib"
    },
        {
        "name": "ncmpcpp",
        "branch": "master",
        "url": "https://github.com/ncmpcpp/ncmpcpp"
    },
        {
        "name": "aria2",
        "branch": "master",
        "url": "https://github.com/aria2/aria2"
    },
        {
        "name": "gnupg",
        "branch": "master",
        "url": "https://dev.gnupg.org/source/gnupg.git"
    },
        {
        "name": "apt",
        "branch": "main",
        "url": "https://salsa.debian.org/apt-team/apt"
    }
    ]
}

#+end_src
** php
#+begin_src json
{
    "lang": "php",
    "projects":[
        {
        "name": "psysh",
        "branch": "main",
        "url": "https://github.com/bobthecow/psysh"
    },

        {
        "name": "laravel-framework",
        "branch": "9.x",
        "url": "https://github.com/laravel/framework"
    },
        {
        "name": "laravel",
        "branch": "9.x",
        "url": "https://github.com/laravel/laravel"
    },
        {
        "name": "phpactor",
        "branch": "master",
        "url": "https://github.com/phpactor/phpactor"
    },
        {
        "name": "composer",
        "branch": "main",
        "url": "https://github.com/composer/composer"
    },
        {
        "name": "php",
        "branch": "master",
        "url": "https://github.com/php/php-src"
    }
    ]
}
#+end_src
** c
#+begin_src json
{
    "lang": "c",
    "projects": [
        {
        "name": "sway",
        "branch": "master",
        "url": "https://github.com/swaywm/sway"
    },
        {
        "name": "openssh",
        "branch": "master",
        "url": "https://github.com/openssh/openssh-portable"
    },
        {
        "name": "openssl",
        "branch": "master",
        "url": "git://git.openssl.org/openssl"
    },
        {
        "name": "dwm",
        "branch": "master",
        "url": "https://git.suckless.org/dwm"
    },
        {
        "name": "tmux",
        "branch": "master",
        "url": "https://github.com/tmux/tmux"
    },
        {
        "name": "redis",
        "branch": "unstable",
        "url": "https://github.com/redis/redis"
    },
        {
        "name": "curl",
        "branch": "master",
        "url": "https://github.com/curl/curl"
    }
    ]
}
#+end_src
** clojure
#+begin_src json
{
    "lang": "clojure",
    "projects":
    [
        {
        "name": "pedestal",
        "branch": "master",
        "url": "https://github.com/pedestal/pedestal"
    },
        {
        "name": "ring",
        "branch": "master",
        "url": "https://github.com/ring-clojure/ring"
    },
        {
        "name": "babashka",
        "branch": "master",
        "url": "https://github.com/babashka/babashka"
    },
        {
        "name": "cljfmt",
        "branch": "master",
        "url": "https://github.com/weavejester/cljfmt"
    },
        {
        "name": "luminus",
        "branch": "master",
        "url": "https://github.com/luminus-framework/luminus"
    },
        {
        "name": "leiningen",
        "branch": "main",
        "url": "https://codeberg.org/leiningen/leiningen"
    },
        {
        "name": "clojure-lsp",
        "branch": "master",
        "url": "https://github.com/clojure-lsp/clojure-lsp"
    },
        {
        "name": "clojure",
        "branch": "master",
        "url": "https://github.com/clojure/clojure"
    }
    ]
}
#+end_src
** golang
#+begin_src json
#+end_src
** study
#+begin_src json
,
        {
        "name": "oliveiralex-course-springboot-2",
        "branch": "master",
        "url": "https://github.com/oliveiralex/course-springboot-2"
    },
        {
        "name": "parking-control-api",
        "branch": "main",
        "url": "https://github.com/MichelliBrito/parking-control-api"
    },
        {
        "name": "Full-Stack-Development-with-Spring-Boot-and-React",
        "branch": "main",
        "url": "https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-and-React"
    },
        {
        "name": "springit",
        "branch": "master",
        "url": "https://github.com/danvega/springit"
    },
        {
        "name": "OKaluzny-spring-boot-docker-postgres",
        "branch": "master",
        "url": "https://github.com/OKaluzny/spring-boot-docker-postgres"
    },
        {
        "name": "bezkoder-docker-compose-spring-boot-mysql",
        "branch": "master",
        "url": "https://github.com/bezkoder/docker-compose-spring-boot-mysql"
    },
        {
        "name": "binkley-modern-java-practices",
        "branch": "master",
        "url": "https://github.com/binkley/modern-java-practices"
    },
        {
        "name": "sivaprasadreddy-devzone",
        "branch": "main",
        "url": "https://github.com/sivaprasadreddy/devzone"
    },
        {
        "name": "junit-in-action-third-edition",
        "branch": "master",
        "url": "https://github.com/ctudose/junit-in-action-third-edition"
    },
        {
        "name": "fullstack-springboot2",
        "branch": "master",
        "url": "https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2-and-React-Second-Edition"
    },
        {
        "name": "springboot-up-and-running",
        "branch": "master",
        "url": "https://github.com/mkheck/SpringBootUpAndRunning"
    }


        {
        "name": "jonashackt-spring-boot-vuejs",
        "branch": "master",
        "url": "https://github.com/jonashackt/spring-boot-vuejs"
    },
        {
        "name": "eddycjy-go-gin-example",
        "branch": "master",
        "url": "https://github.com/eddycjy/go-gin-example"
    },
        {
        "name": "Building-Distributed-Applications-in-Gin",
        "branch": "main",
        "url": "https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin"
    },
        {
        "name": "quii-learn-go-with-tests",
        "branch": "main",
        "url": "https://github.com/quii/learn-go-with-tests"
    },
        {
        "name": "martenwallewein-go-sample-microservice",
        "branch": "master",
        "url": "https://github.com/martenwallewein/go-sample-microservice"
    },
        {
        "name": "book-of-kubernetes-examples",
        "branch": "main",
        "url": "https://github.com/book-of-kubernetes/examples"
    },

#+end_src
** javascript
#+begin_src json
{
    "lang": "node",
    "projects":[
        {
        "name": "typescript-language-server",
        "branch": "master",
        "url": "https://github.com/typescript-language-server/typescript-language-server"
    },
        {
        "name": "vite",
        "branch": "main",
        "url": "https://github.com/vitejs/vite"
    }
        {
        "name": "yargs",
        "branch": "main",
        "url": "https://github.com/yargs/yargs"
    }
#+end_src
** rust
#+begin_src csv
name,branch,url
kyclark-command-line-rust,master,https://github.com/kyclark/command-line-rust
starship,master,https://github.com/starship/starship
alacritty,master,https://github.com/alacritty/alacritty
actix-web,master,https://github.com/actix/actix-web
axum,main,https://github.com/tokio-rs/axum
rust-analyzer,master,https://github.com/rust-lang/rust-analyzer
cargo,master,https://github.com/rust-lang/cargo
rust,master,https://github.com/rust-lang/rust
#+end_src
** elixir
#+begin_src csv
name,branch,url
elixir-ls,master,https://github.com/elixir-lsp/elixir-ls
credo,master,https://github.com/rrrene/credo
ecto,master,https://github.com/elixir-ecto/ecto
hex,main,https://github.com/hexpm/hex
phoenix,master,https://github.com/phoenixframework/phoenix
elixir,main,https://github.com/elixir-lang/elixir
#+end_src
** hare
#+begin_src csv
name,branch,url
hare-irc,master,https://git.sr.ht/~sircmpwn/hare-irc
himitsu,master,https://git.sr.ht/~sircmpwn/himitsu
harec,master,https://git.sr.ht/~sircmpwn/harec
hautils,master,https://git.sr.ht/~sircmpwn/hautils
hare,master,https://git.sr.ht/~sircmpwn/hare
#+end_src
** lua
#+begin_src csv
name,branch,url
vicious,master,https://github.com/vicious-widgets/vicious
awesome,master,https://github.com/awesomeWM/awesome
lua-language-server,master,https://github.com/sumneko/lua-language-server
neovim,master,https://github.com/neovim/neovim
luarocks,master,https://github.com/luarocks/luarocks
lua,master,https://github.com/lua/lua
#+end_src
** python
#+begin_src csv
name,repository
flask,https://github.com/pallets/flask
httpie,https://github.com/httpie/httpie
requests,https://github.com/psf/requests
black,https://github.com/psf/black
mypy,https://github.com/python/mypy
cpython,https://github.com/python/cpython
#+end_src
** common lisp
#+begin_src csv
name,branch,url
38a938c2-stumpwm-config,master,https://github.com/38a938c2/stumpwm-config
stumpwm-goodies-joelagnel,master,https://github.com/joelagnel/stumpwm-goodies
stumpwm-config-lepisma,master,https://github.com/lepisma/cfg
stumpwm-config-herbertjones,master,https://github.com/herbertjones/my-stumpwm-config
stumpwm-config-paulownia,master,https://github.com/stumpwm/paulownia
stumpwm-config-mahogany,master,https://github.com/stumpwm/mahogany
stumpwm-config-nicolaspetton,master,https://github.com/NicolasPetton/stumpwm.d
stumpwm-config-alezost,master,https://github.com/alezost/stumpwm-config
nyxt,master,https://github.com/atlas-engineer/nyxt
stumpwm-contrib,master,https://github.com/stumpwm/stumpwm-contrib
stumpwm,master,https://github.com/stumpwm/stumpwm
cl-cookbook,master,https://github.com/LispCookbook/cl-cookbook
quicklisp-client,master,https://github.com/quicklisp/quicklisp-client
quicklisp-bootstrap,master,https://github.com/quicklisp/quicklisp-bootstrap
quicklisp-controller,master,https://github.com/quicklisp/quicklisp-controller
clx,master,https://github.com/franzinc/clx
clpm,main,https://gitlab.common-lisp.net/clpm/clpm
alexandria,master,https://gitlab.common-lisp.net/alexandria/alexandria
asdf,master,https://gitlab.common-lisp.net/asdf/asdf
sbcl,master,git://git.code.sf.net/p/sbcl/sbcl
#+end_src
** kotlin
#+begin_src csv
name,branch,url
kotlin,master,https://github.com/JetBrains/kotlin
#+end_src
** swift
#+begin_src csv
name,branch,url
mastodon-ios,main,https://github.com/mastodon/mastodon-ios
sourcekit-lsp,main,https://github.com/apple/sourcekit-lsp
swift-format,main,https://github.com/apple/swift-format
swift,main,https://github.com/apple/swift
#+end_src
** dart
#+begin_src json
{
    "lang": "dart",
    "projects": [
        {
        "name": "dart-sass",
        "branch": "main",
        "url": "https://github.com/sass/dart-sass"
    },
        {
        "name": "flutter",
        "branch": "master",
        "url": "https://github.com/flutter/flutter"
    },
        {
        "name": "dart-pad",
        "branch": "master",
        "url": "https://github.com/dart-lang/dart-pad"
    },
        {
        "name": "dart-test",
        "branch": "master",
        "url": "https://github.com/dart-lang/test"
    },
        {
        "name": "dart",
        "branch": "main",
        "url": "https://github.com/dart-lang/sdk"
    }
    ]
}

#+end_src
** css
#+begin_src yaml
   --- # css
   - https://github.com/IanLunn/Hover
   - https://github.com/jgthms/bulma
   - https://github.com/daneden/animate.css
   - https://github.com/oddbird/susy
   - https://github.com/necolas/normalize.css
   - https://github.com/mozdevs/cssremedy
#+end_src
** haskell
#+begin_src yaml
--- # Haskell
- https://gitlab.haskell.org/ghc/ghc
- https://gitlab.haskell.org/haskell/ghcup
- https://github.com/haskell/cabal
- https://github.com/commercialhaskell/stack
- https://github.com/haskell/haskell-language-server
- https://github.com/koalaman/shellcheck
- https://github.com/jgm/pandoc
- https://github.com/elm/compiler
#+end_src
** zig
#+begin_src yaml
name,repository
zig,https://github.com/ziglang/zig
nitter,https://github.com/zedeus/nitter
river,https://github.com/ifreund/river
zls,https://github.com/zigtools/zls
zig-bootstrap,https://github.com/ziglang/zig-bootstrap
#+end_src
** perl
#+begin_src yaml
   --- # Perl
   - https://github.com/perltidy/perltidy
   - https://github.com/moose/Moose
   - https://github.com/richterger/Perl-LanguageServer
   - https://github.com/imapsync/imapsync
   - https://github.com/ddclient/ddclient
   - https://github.com/apache/avro
   - https://github.com/mojolicious/mojo
   - https://github.com/i3/i3
   - https://github.com/bugzilla/bugzilla
   - https://github.com/hachiojipm/awesome-perl
   - https://github.com/Perl/perl5
#+end_src
* zae
    #+begin_src yaml
    ---
    builddep: builddep
    clean: autoremove
    depends: repoquery --requires --resolve
    download: ''
    fix: fix
    help: help
    info: info
    install: install
    installed: list installed
    remove: remove
    search: search
    sysupgrade: sysupgrade
    update: update
    upgrade: upgrade

    ---
    builddep: ''
    clean: autoremove
    depends: ''
    download: fetch
    fix: fix
    help: help
    info: query
    install: install
    installed: version
    remove: remove
    search: search
    sysupgrade: ''
    update: update
    upgrade: upgrade
    ---
    builddep: ''
    clean: autoremove
    depends: ''
    download: fetch
    fix: fix
    help: help
    info: query
    install: install
    installed: version
    remove: remove
    search: search
    sysupgrade: ''
    update: update
    upgrade: upgrade

    ---
    builddep: build-dep
    clean: nix-store --gc
    depends: depends
    download: download
    fix: install -f
    help: help
    info: show
    install: nix-env --install
    install+: nix-env --install -A
    installed: nix-env -qa
    remove: nix-env --uninstall
    search: nix-env -qa
    sysupgrade: ''
    update: nix-env --update
    upgrade: nix-env --upgrade


    ---
    builddep: ''
    clean: ''
    depends: ''
    download: ''
    fix: ''
    help: help
    info: ''
    install: "-S"
    installed: ''
    remove: "-R"
    search: "-Ss"
    sysupgrade: ''
    update: "-Syy"
    upgrade: "-Syu"


    ---
    builddep: ''
    clean: autoremove
    depends: ''
    download: fetch
    fix: fix
    help: help
    info: query
    install: install
    installed: version
    remove: remove
    search: search
    sysupgrade: ''
    update: update
    upgrade: upgrade

    #+end_src
* Dot
** golang
#+begin_src golang
package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	root := flag.String("deploy", "", "deploy dotfiles links")
	force := flag.Bool("force", false, "force redeployment of dotfiles links")
	flag.Parse()

	if *root == "" {
		flag.Usage()
		os.Exit(1)
	}

	ignore, err := ioutil.ReadFile(filepath.Join(*root, ".dotsignore"))

	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	fixed_ignored := strings.Split(string(ignore), "\n")
	fixed_root := filepath.Clean(*root)
	crawler(fixed_root, fixed_ignored, *force)
}

func crawler(root string, ignored []string, force bool) {
	filepath.Walk(root,
		func(path string, info os.FileInfo, err error) error {
			if err != nil {
				fmt.Println(err)
				return err
			}

			// check if it is to ignore file
			if filterOut(root, ignored) {
				return nil
			}

			linkFile(path, force)
			return nil
		})

	println("")
	fmt.Println("Ignored: ", ignored)
	fmt.Print("Root: ", root)
}

// ignore file if its is in .dotsignored
func filterOut(root string, ignored []string) bool {
	for _, item := range ignored {
		rooted_item := filepath.Join(root, item)
		if item == "" || strings.HasPrefix(root, rooted_item) {
			return true
		}
	}

	return false
}

func linkFile(path string, force bool) {
	if force {
		fmt.Print("Forcing re-linking")
	}

	// finally, print file to be linked
	fmt.Println(path)
}

#+end_src
** java
#+begin_src java
///usr/bin/env jbang "$0" "$@" ; exit $?
//DEPS info.picocli:picocli:4.6.3

// Instalation: curl -Ls https://sh.jbang.dev | bash -s - app setup

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;

@Command(name = "Dot", mixinStandardHelpOptions = true, version = "Dot 0.1",
         description = "create symbolic links of a folder mirroring its tree structure into $HOME or custom folder")
class Main implements Callable<Integer> {

  @Option(names = { "-o", "--overwrite" }, description = "overwrite existent links.")
  private boolean overwrite;

  @Option(names = { "-p", "--pretend" }, description = "demonstrate files linking.")
  private boolean pretend;

  @Option(names = { "-c", "--create" }, description = "create links of dotfiles.")
  private boolean create;

  @Option(names = { "-i", "--info" }, description = "provide more information.")
  private boolean information;

  @Option(names = { "-f", "--from" }, paramLabel = "FOLDER", description = "source folder with all dotfiles.", required = true)
  String source;

  @Option(names = { "-t", "--to" }, paramLabel = "FOLDER", description = "folder to deliver symbolic links.")
  File destination;

  public static void main(String... args) {
    int exitCode = new CommandLine(new Main()).execute(args);
    System.exit(exitCode);
  }

  String infoList() {
    var result = String.format("-- information -- \n from: %s - to: %s - over: %s - pret: %s - create: %s\n",
                               source, destination, overwrite, pretend, create);

    return result;
  }

  @Override
  public Integer call() throws Exception { // your business logic goes here...

    if (source.isEmpty()) {

    }

    if (information) {
      System.out.println(infoList());
    }

    var ignore = new Ignored(source);
    System.out.println(String.format("Ignored: %s", ignore.finaList()));

    // var create = new Create(source, null);
    // create.run();

    return 0;
  }
}

class Ignored {
  String source;

  public Ignored(String source) {
    this.source = source;
  }

  final String[] defaultOnes = { ".git", ".dotsignore" };

  List<String> ignoredOnes() {
    var dotsFile = Path.of(this.source, ".dotsignore");
    List<String> dots = null;

    try {
      Stream<String> listedDots = Files.lines(dotsFile);
      dots = listedDots
        .distinct()
        .sorted(Comparator.reverseOrder())
        .collect(Collectors.toList());

      listedDots.close();
    } catch (IOException e) {
      System.out.println("Caught " + e);
    }

    return dots;
  }

  public List<String> finaList() {
    List<String> result = new ArrayList<>(Arrays.asList(defaultOnes));
    result.addAll(ignoredOnes());

    return result;
  }
}

class Create {
  List<String> ignoredOnes;
  String source;
  String destination;
  String home = System.getProperty("user.home");

  public Create(String source, String destination, List<String> ignoredOnes) {
    this.source = source;
    this.destination = destination;
    this.ignoredOnes = ignoredOnes;
  }

  public void clean() {
    throw new UnsupportedOperationException("not implemented");
  }

  public void overwrite() {
    throw new UnsupportedOperationException("not implemented");
  }

  public void pretend() {
    throw new UnsupportedOperationException("not implemented");

  }

  void apply() {
    throw new UnsupportedOperationException("not implemented");
    // Path start = FileSystems.getDefault().getPath(source);

    // try {
    // Files.walk(start)
    // .filter(path -> ignoredOnes.stream().map(i -> Path.of(source,
    // i).toString().startsWith(path.toString())))
    // .forEach(link -> {
    // // .filter(path -> path.toFile().isFile())
    // make_folder(link);
    // backup_item(link);
    // rm_faulty_link(link);
    // link_file(link); // target
    // fix_perm(link);
    // });
    // } catch (IOException e) {
    // System.out.println(e);
    // }
  }

  private void make_folder(String link) {
    throw new UnsupportedOperationException("not implemented");
  }

  private void backup_item(String link) {
    throw new UnsupportedOperationException("not implemented");
  }

  private void remove_faulty_link(String link) {
    throw new UnsupportedOperationException("not implemented");
  }

  private void link_file(String target, String link) {
    throw new UnsupportedOperationException("not implemented");
  }

  private void fix_permission(String link) {
    throw new UnsupportedOperationException("not implemented");
  }
}

#+end_src
** perl
#+begin_src perl
#!/usr/bin/perl -w

use v5.32;
use utf8;
use warnings;
use strict;
use Getopt::Long 'HelpMessage';
use Time::Piece;

# CLI PARSER

GetOptions(
    'from=s' => \my $from_name,
    'to=s' => \(my $to_name = '/home/'),
    'deploy' => \(my $deploy = 0),
    'pretend' => \(my $pretend = 0),
    'overwrite' => \(my $overwrite = 0),
    'info' =>  sub { say info() },
    'help' => sub { HelpMessage(0) }
) or HelpMessage(1);

die "\nFROM folder is required (--to)\n" unless $from_name;

# die unless we got the mandatory argument
HelpMessage(1) unless $from_name;

sub info
{
    return "-- general information --
from:
to: $to_name
deploy: $deploy
pretend: $pretend
overwrite: $overwrite"
}


# tbc
sub print_license { ... }

=head1 NAME

license - get license texts at the command line!

=head1 SYNOPSIS

  --from,-f        folder with dotfiles (required)
  --to,-to         location where to link files (defaults to $HOME)
  --pretend,-p     mimic deployment of symbolic links
  --deploy,-d      deploy dotfiles links
  --overwrite,-o   force redeployment of dotfiles links
  --info,-i        general information of internals commands
  --help,-h        Print this help

=head1 VERSION

0.01

=cut
#+end_src
** elixir
#+begin_src elixir
#! /usr/bin/env elixir

# Description: An opitionated dotfile deployer base on guix home and nix homemanager.

# Features:
# - the dotsignore file at the folder root behaves just like git's one ignoring undesired dotfiles.
# - Folders are not symlinked but created.
# - dry-run mode
# - remove faulty symlinks if found
# - backup non-symlink files to $HOME/.backup
# - fully implemented cli interface
# - GNU-Linux/BSD distros only

# TODO: walk through directories and perform actions per folder
# TODO: Accept git commit sha as source to symlink deployment.
# TODO: Read-only symlinks.
# TODO: dotsignore to accept hash-like folder. eg: .config{foo,bar,meh,forevis}
# TODO: set minimal permission to 0744

defmodule Dots do
  defp ignored(root, {:ok, files}) do
    File.stream!(files)
    |> Enum.map(&String.trim(&1))
    |> Enum.concat([".dotsignore"])
    |> Enum.map(&Path.join(root, &1))
    |> MapSet.new()
  end

  defp ignored(_root, {:error, nil}) do
    []
  end

  defp ignored_exist?(root) do
    root = Path.join(root, ".dotsignore")
    if File.exists?(root), do: {:ok, root}, else: {:error, nil}
  end

  defp ignore_me?(root, item) do
    ignored(root, ignored_exist?(root))
    |> Enum.any?(&String.starts_with?(item, &1))
  end

  def ls_r(path) do
    cond do
      File.regular?(path) ->
        [path]

      File.dir?(path) ->
        File.ls!(path)
        |> Enum.map(&Path.join(path, &1))
        |> Enum.map(&ls_r/1)
        |> Enum.concat()

      true ->
        []
    end
  end

  def run(root) do
    items = ls_r(root)

    for item <- items do
      unless ignore_me?(root, item) do
        target = item
        link_name = to_home(item, root)

        make_folder(link_name)
        link_file(target, link_name)
      end
    end
  end

  def to_home(item, root) do
    # /data/dots/.config/mpd/mpd.conf to $HOME/.config/mpd/mpd.conf
    String.replace(item, root, System.user_home())
  end

  def make_folder(link_name) do
    link_dir = Path.dirname(link_name)

    unless File.exists?(link_dir) do
      File.mkdir_p!(link_dir)
    end
  end

  def link_file(target, link_name) do
    unless File.exists?(link_name) do
      IO.puts("#{target} -> #{link_name}")
      File.ln_s!(target, link_name)
    end
  end

  def deploy(root) do
    run(root)
  end

  def pretend(root) do
    IO.puts("pretend-mode")
    IO.inspect(root)
  end

  def info(root) do
    IO.puts("root: #{root}")
  end
end

defmodule CLI do
  def main(args) do
    args
    |> OptionParser.parse(
      switches: [deploy: :string, pretend: :string, help: :boolean],
      aliases: [D: :deploy, P: :pretend, H: :help]
    )
    |> elem(0)
    |> run()
  end

  def help do
    IO.puts("Usage: dots [options]
  -D, --deploy                    symlink all dotfiles
  -P, --pretend                   pretend to symlink all dotfiles
  -H, --help                      cli options information")

    System.halt(0)
  end

  def run(deploy: root) do
    root = Path.dirname(IO.chardata_to_string(root))
    Dots.deploy(root)
  end

  def run(pretend: root) do
    root = Path.dirname(IO.chardata_to_string(root))
    Dots.pretend(root)
  end

  def run(help: true) do
    help()
  end

  def run(_) do
    help()
  end
end

CLI.main(System.argv())

#+end_src
* Cejo
** Ruby
     #+begin_src ruby
     def get_name_files(folder)
       name = folder.to_path
       files = []

       folder.children.each do |f|
	 files << f if f.file?
       end

       { name => files }
     end

     def prepare_folders
       Find.find(a) do |f|
	 next if f.start_with? a.join('.git').to_path # ignore .git folder

	 x = Pathname.new f
	 puts x.parent.to_path
       end

       # result = {}

       # SOURCE_FOLDER.children.each do |f|
       #   next unless f.basename.to_s != '.git' && f.directory?

       #   x = get_name_files f
       #   result[x.keys.first] = x.values
       # end

       # result
     end

     #+end_src
** .NET
*** Projects
      #+begin_src csharp
      using System.Collections.Generic;
      using System.IO;

      using Cero.Services;

      namespace Cero.Sections.Projects
      {
	  /// <summary>
	  ///  A set of values used to specify a project information to start.
	  /// </summary>
	  public class Cpython : IProject
	  {
	      private readonly Folders _folders;
	      private readonly Git _git;
	      private readonly Runners _runners;

	      public Cpython(Folders folders, Git git, Runners runners) =>
		  (_folders, _git, _runners) = (folders, git, runners);

	      ProjectInfo Info() => new ProjectInfo()
	      {
		  Name = "cpython",
		  Url = "https://github.com/python/cpython",
		  Folder = Path.Join(_folders.Builds, "cpython"),
		  Tag = "v3.8.2",
		  Commands = new List<(string, string)>
		  {                ("mkdir", "-pv build"),
		      ("make", "distclean"),
		      ("sh", $@"configure --prefix={ _folders.Local } --enable-optimizations --with-lto --with-pydebug"),
		      ("make", "-s"),
		      ("make", "-j2 install"),
		  }
	      };

	      public void Start() =>
		  new ProjectBuilder(_git, _runners, Info()).Build();
	  }
      }


      using System.Collections.Generic;
      using System.IO;

      using Cero.Services;

      namespace Cero.Sections.Projects
      {
	  /// <summary>
	  ///  A set of values used to specify a project information to start.
	  /// </summary>
	  public class Nyxt : IProject
	  {
	      private readonly Folders _folders;
	      private readonly Git _git;
	      private readonly Runners _runners;

	      public Nyxt(Folders folders, Git git, Runners runners) =>
		  (_folders, _git, _runners) = (folders, git, runners);


	      ProjectInfo Info() => new ProjectInfo()
	      {
		  Name = "nyxt",
		  Url = "https://github.com/atlas-engineer/nyxt",
		  Folder = Path.Join(_folders.Builds, "nyxt"),
		  Commands = new List<(string, string)>
		  {
		      ("make", "all NYXT_INTERNAL_QUICKLISP=true"),
		      ("make", $"install PREFIX={ _folders.Local }")
		  }
	      };

	      public void Start() =>
		  new ProjectBuilder(_git, _runners, Info()).Build();
	  }
      }
#+end_src
*** Packers
      #+begin_src csharp

      // "redhat.java",
      // "vscjava.vscode-java-debug",
      // "vscjava.vscode-maven",
      // "vscjava.vscode-java-test",
      // "vscjava.vscode-java-pack",
      // "vscjava.vscode-java-dependency",
      // "ms-vscode.go",
      // "ms-vscode.cpptools",
      // "ms-python.python",
      // "ms-python.anaconda-extension-pack",
      // "ms-python.anaconda-extension-pack",

      using Cero.Library;

      namespace Cero.Sections.Packers
      {
	  public class Go : IPacker
	  {
	      Di _di;

	      public string _name = "go";
	      public string _manager = "get";
	      string[] _packages = new string[]
	      {
		  "github.com/sourcegraph/go-langserver",
		  "golang.org/x/tools/cmd/gopls",
		  "golang.org/x/tools/cmd/goimports",
		  "github.com/saibing/bingo"
	      };

	      public Go(Di di) =>
		  _di = di;

	      public void Start()
	      {
		  dolist (var pack in _packages)
		      _di._runners.RunCommand(_name, $"{ _manager } -u -v { pack }");
	      }
	  }
      }


      using System.Linq;

      using Cero.Services;

      namespace Cero.Sections.Packers
      {
	  public class Cabal : IPacker
	  {
	      private readonly Runners _runners;

	      private readonly string _name;
	      private readonly string _manager;
	      private readonly string[] _packages;

	      public Cabal(Runners runners)
	      {
		  _runners = runners;

		  _name = "cabal";
		  _manager = "new-install";
		  _packages = new string[] { "hlint", "xmonad", "xmonad-contrib" };
	      }

	      private void InstallPackages()
	      {
		  dolist (var args in from pack in _packages
				       let args = $"{ _manager } --lib --upgrade { pack } --user"
				       qselect args)
		  {
		      _runners.RunCommand(_name, args);
		  }
	      }

	      public void Start()
	      {
		  _runners.RunCommand(_name, $"update");
		  InstallPackages();
	      }
	  }
      }

      using System.Linq;

      using Cero.Services;

      namespace Cero.Sections.Packers
      {
	  public class Cargo : IPacker
	  {
	      private readonly Runners _runners;

	      private readonly string _name;
	      private readonly string _manager;
	      private readonly string[] _packages;

	      public Cargo(Runners runners)
	      {
		  _runners = runners;

		  _name = "cargo";
		  _manager = "install";
		  _packages = new string[] { "ripgrep" };
	      }

	      public void Start()
	      {
		  dolist (var args in from pack in _packages
				       let args = $"{_manager} { pack }"
				       select args)
		  {
		      _runners.RunCommand(_name, args);
		  }
	      }
	  }
      }

      using System.IO;
      using System.Net;
      using System.Linq;

      using Cero.Services;

      namespace Cero.Sections.Packers
      {
	  public class QuickLisp : IPacker
	  {
	      private readonly WebClient _webClient;
	      private readonly Runners _runners;
	      private readonly Folders _folders;

	      private readonly string _name;
	      private readonly string[] _packages = default!;
	      private readonly string _quickLispFile;
	      private readonly string _quickLispSetupFile;

	      public QuickLisp(WebClient webClient, Folders folders, Runners runners)
	      {
		  _webClient = webClient;
		  _folders = folders;
		  _runners = runners;

		  _name = "sbcl";
		  _packages = new string[]
		  {
		      ":quicklisp-slime-helper", ":swank", ":clx", ":cl-ppcre", ":alexandria",
		      ":xembed", ":xml-emitter", ":dbus", ":prove", ":swank"
		  };
		  _quickLispFile = Path.Join(_folders.Home, "quicklisp.lisp");
		  _quickLispSetupFile = Path.Combine(_folders.Home, "quicklisp", "setup.lisp");
	      }

	      private void GetQuickLispFile()
	      {
		  if (File.Exists(_quickLispFile)) { return; }

		  _webClient.DownloadFile("https://beta.quicklisp.org/quicklisp.lisp", _quickLispFile);
	      }

	      private void InstallQuickLisp()
	      {
		  if (File.Exists(_quickLispSetupFile)) { return; }

		  var args = $@"--load { _quickLispFile } --eval (quicklisp-quickstart:install) --eval (quit)";
		  _runners.RunCommand(_name, args);
	      }

	      private void InstallPackages()
	      {
		  dolist (var args in from pack in _packages
				       let args = $@"--eval ""(ql:quickload ""{ pack }"")"" --eval (quit)"
				       select args)
		  {
		      _runners.RunCommand(_name, args);
		  }
	      }

	      public void Start()
	      {
		  GetQuickLispFile();
		  InstallQuickLisp();
		  InstallPackages();
	      }
	  }
      }


      using System.IO;
      using System.Net;

      using Cero.Services;
      using System.Linq;

      namespace Cero.Sections.Packers
      {
	  public class RustUp : IPacker
	  {
	      WebClient _webClient;
	      private readonly Folders _folders;
	      private readonly Runners _runners;

	      private readonly string _name;
	      private readonly string _manager;
	      private readonly string[] _packages;

	      public RustUp(WebClient webClient, Folders folders, Runners runners)
	      {
		  _webClient = webClient;
		  _folders = folders;
		  _runners = runners;

		  _name = "rustup";
		  _manager = "component";
		  _packages = new string[] { "rls", "rust-analysis", "rust-src", "clippy" };
	      }

	      string RustInit() =>
		  Path.Join(_folders.Home, "rustup-init.sh");

	      void GetRustUp()
	      {
		  if (File.Exists(RustInit())) { return; }

		  _webClient.DownloadFile(
		      "https://raw.githubusercontent.com/rust-lang/rustup/master/rustup-init.sh",
		      RustInit());
	      }

	      void InstallRustUp()
	      {
		  if (File.Exists(Path.Join(_folders.Home, ".rustup"))) { return; }

		  _runners.RunCommand("sh", $"{ RustInit() }");
	      }

	      public void InstallPackages()
	      {
		  dolist (var args in from pack in _packages
				       let args = $"{_manager} add { pack }"
				       select args)
		  {
		      _runners.RunCommand(_name, args);
		  }
	      }

	      public void Start()
	      {
		  GetRustUp();
		  InstallRustUp();
		  InstallPackages();
	      }
	  }
      }
      #+end_src
** Python
#+begin_src python

	 def advice(self) -> None:
	     """Additional instruction before building."""
	     from shutil import copy2

	     definitions = VARS.build / folder / "config.def.h"
	     config = VARS.build / folder / "config.h"
	     for file in definitions, config:
		 file.unlink()

	     source = VARS.software / "st_config.def.h"
	     copy2(source, definitions)


     pip  = ("requests",
	     "pyre-check",
	     "pyxdg",
	     "pillow",
	     "pyqt5",
	     "doc8",
	     "html5lib",
	     "grip",
	     "ninja",
	     "scipy",
	     "pep8",
	     "virtualenvwrapper",
	     "dulwich",
	     "fastapi",
	     "autopep8",
	     "pysimplegui",
	     "sympy",
	     "PyOpenAL",
	     "click",
	     "buku",
	     "bandit",
	     "django",
	     "pylint-django",
	     "flask",
	     "meson",
	     "sphinx",
	     "lxml",
	     "selenium",
	     "watchman",
	     "notebook",
	     "mutagen",
	     "pyperclip",
	     "pandas",
	     "pre-commit",
	     "pipenv",
	     "matplotlib",
	     "wily",
	     "monkeytype",
	     "astroid",
	     "flake8-bugbear",
	     "pyperf",
	     "hy",
	     "pip-tools",
	     "beautifulsoup4",
	     "prospector",
	     "jedi",
	     "jc",)


     PACKAGERS_COMMANDS: dict = {  # abstract command and real command
	 "apt": {  # Debian Family
	     "install": "install",
	     "search": "search",
	     "remove": "remove",
	     "upgrade": "upgrade",
	     "dist-upgrade": "dist-upgrade",
	     "update": "update",
	     "autoremove": "autoremove",
	     "download": "download",
	     "depends": "depends",
	     "system-upgrade": "dist-upgrade",
	     "installed": ["list", "--installed"],
	     "fix": "fix",
	     "info": "show",
	 },
	 "dnf": {  # Fedora
	     "install": "install",
	     "search": "search",
	     "remove": "remove",
	     "upgrade": "upgrade",
	     "update": "update",
	     "autoremove": "autoremove",
	     "system-upgrade": "system-upgrade",
	     "depends": ["repoquery", "--requires", "--resolve"],
	     "installed": ["list", "installed"],
	     "build-dep": "builddep",
	     "fix": "fix",
	     "info": "info",
	     "help": "help",
	 },
	 "pacman": {  # ArchLinux
	     "install": "-S",
	     "search": "-Ss",
	     "remove": "-R",
	     "upgrade": "-Syu",
	     "update": "-Syy",
	 },
	 "pkg": {  # FreeBSD
	     "install": "install",
	     "search": "search",
	     "remove": "remove",
	     "upgrade": "upgrade",
	     "update": "update",
	     "download": "fetch",
	     "autoremove": "autoremove",
	     "installed": "version",
	     "fix": "fix",
	     "info": "query",
	     "help": "help",
	 },
	 "help": {
	     "install": "Install a Package from Repositories",
	     "file": "Install a Package from the Local Filesystem",
	     "search": "Find a Package",
	     "remove": "Remove One or More Installed Packages",
	     "upgrade": "Upgrade Installed Packages",
	     "update": "Update Package Lists",
	     "autoremove": "Remove unused packages",
	     "system-upgrade": "Upgrade System",
	     "depends": "Package dependencies",
	     "installed": "List installed",
	     "build-dep": "Get dependencies to build package",
	     "fix": "Fix common issues in System",
	     "info": "View Info About a Specific Package",
	 },  # source: digitalocean
     }


     sleep(360)  # main terminal closing in...
     run(["killall", "kdeconnectd"], check=False, shell=False)



     # GLOBAL VARS
     GLOBAL_VARIABLES: dict = {
	 "HOME": Path.home(),
	 "DOCUMENTS": Path.home().joinpath("Documents"),
	 "BIN": Path.home().joinpath("bin"),
	 "VIDEOS": Path.home().joinpath("Videos"),
	 "PICTURES": Path.home().joinpath("Pictures"),
	 "MUSIC": Path.home().joinpath("Music"),
	 "DOWNLOADS": Path.home().joinpath("Downloads"),
	 "BUILD": Path.home().joinpath("Downloads/Build"),
	 "PROJECTS": Path.home().joinpath("Projects"),
	 "SOFTWARE": Path.home().joinpath("Documents/Settings"),
	 "XDG_CONFIG_HOME": Path.home().joinpath(".config"),
	 "HOME_LOCAL": Path.home().joinpath(".local"),
	 "HOME_LOCAL_BIN": Path.home().joinpath(".local/bin"),
	 "HOME_LOCAL_LIB": Path.home().joinpath(".local/lib"),
	 "XDG_DATA_HOME": Path.home().joinpath(".local/share"),
	 "PERSONAL": Path.home().joinpath("/data/Personal"),
	 "FONTS": Path.home().joinpath(".local/share/fonts"),
	 "DESCRIPTION": "An elegant collection of system automation solutions and software interface",
     }


     class Struct:
	 """Global Variables."""

	 def __init__(self, **entries):
	     """Literal Dict to Class attributes."""
	     self.__dict__.update(entries)


     VARS = Struct(**GLOBAL_VARIABLES)



     for packer in {"apt", "pacman", "dnf", "pkg"}:
	     if executable_exist(packer):
		 distro = packer

     except OSError:
	 LOGGER.exception("Unable to play media!")
	 LOGGER.exception("Could not download media")
	 LOGGER.exception("Unable to extract file.")
	 LOGGER.exception("Unable to compress")
	 LOGGER.exception("Unable to turn on/off network")
	 LOGGER.exception("SSH - Unable to set keys!")
	 LOGGER.exception("Unable to save screnshot")
	 LOGGER.exception("Unable to build dwm!")
	 LOGGER.exception("Unable to build st!")
	 LOGGER.exception("Unable to build Qtile!")
	 LOGGER.exception("Unable to install QuickLisp!")
	 LOGGER.exception("Go - Unable to install package!")
	 LOGGER.exception("Unable to install QuickLisp Packages!")
	 LOGGER.exception("NPM Unable to set prefix!")
	 LOGGER.exception("NPM - Unable to install package!")
	 LOGGER.exception("VSCode: Unable to install package!")
	 LOGGER.exception("Pip - Unable to install package.")
	 LOGGER.exception("Unable to send notification!")
	 LOGGER.exception("No permission to clean projects!")
	 LOGGER.exception("No permission to move file")
	 LOGGER.exception("Unable to retrieve item!")
	 LOGGER.exception("No permission to symlink file!")

     subprocess.run(  # Remove untracked files
	 ["git", "clean", "-fdx"],
	 cwd=folder,
	 check=False,
	 stdout=subprocess.DEVNULL,
     )

     # <kapsh> Do you need them to be functions and not class methods? You can write
     #         simple class with __getattr__(name): getattr(self, "do_" + name)()


     registry = {}


     def register(func):
	 registry[func.__name__] = func
	 return func

     import re
     # find all functions that begins with do_NAME
     funcs_name = re.findall(r"do_\w+", Path(__file__).resolve().read_text())
     # create a dict with function name and functio object references. eg: {"do_homer", <function do_homer at 0x7fe19d72d70>}
     functions = {key: eval(value) for key, value in zip(funcs_name, funcs_name)}


     HOME = Path.home()
     DOCUMENTS = HOME / "Documents"
     SOFTWARE = DOCUMENTS / "software"
     VIDEOS = HOME / "Videos"
     PICTURES = HOME / "Pictures"
     MUSIC = HOME / "Music"
     DOWNLOADS = HOME / "Downloads"
     PROJECTS = HOME / "Projects"
     HOME_LOCAL = HOME / ".local"
     HOME_LOCAL_BIN = HOME_LOCAL / "bin"
     HOME_LOCAL_LIB = HOME_LOCAL / "lib"
     XDG_CONFIG_HOME = HOME / ".config"
     XDG_DATA_HOME = HOME_LOCAL / "share"
     DATA = Path("/data")
     PERSONAL = DATA / "Personal"



     # TODO
     def do_wakeup(minutes) -> None:
	 """Wake up, Mr Freeman."""
	 # Start alarm in a give minutes
	 return minutes


     # TODO
     def do_help() -> None:
	 """List all functions available."""
	 # Use regext matching string to find all functions starting with "def do_*("


     def ts(fld):
	 import os

	 for root, dir, files in os.walk(fld):
	     for file in files:
		 print(os.path.isdir(root), os.path.isdir(file))


     def path_walk(top, topdown=False, followlinks=False):
	 """
	      See Python docs for os.walk, exact same behavior but it yields Path() instances instead
	 """
	 names = list(top.iterdir())

	 dirs = (node for node in names if node.is_dir() is True)
	 nondirs = (node for node in names if node.is_dir() is False)

	 if topdown:
	     yield top, dirs, nondirs

	 for name in dirs:
	     if followlinks or name.is_symlink() is False:
		 for x in path_walk(name, topdown, followlinks):
		     yield x

	 if topdown is not True:
	     yield top, dirs, nondirs


     (".css", ".js", ".svg", ".html", "iku.jpg")

     def ts(fld):
	 """Test."""
	 import os

	 for root, dir, files in os.walk(fld):
	     for file in files:
		 print(os.path.isdir(root), os.path.isdir(file))

     print(f"Download {pj_name}")  # Github only!
     pj_github_url = f"{pj_url}/archive/master.{compress_format}"
     pj_new_name = zip_folder / f"{pj_name}.{compress_format}"
     _retrieve_this(pj_github_url, pj_new_name)

     from urllib.request import urlopen
     import json

     try:
	 with urlopen("http://wttr.in/Brasilia?format=j1") as url:
	     data = json.loads(url.read().decode())
	     weather = data.get("weather")[0].get("hourly")[0].get("tempC")
     except Exception as why:
	 print(why)
     else:
	 con = "ON"

     def internet_on():
	 """Internet connection is on."""

	 import urllib.error

	 try:
	     urllib.request.urlopen("http://216.58.192.142", timeout=1)  # google
	 except urllib.error.URLError:
	     return False
	 else:
	     del urllib.error
	     return True

     folder = PROJECTS / parent / os.path.basename(url)
     #+end_src
*** Makefile
      #+begin_src makefile
      # Licensed under the Apache License: http://www.apache.org/licenses/LICENSE-2.0
      .POSIX:
      SHELL=sh
      PYTHON=python3
      PROJECT=pan
      PIP= $(PYTHON) -m pip

      help:
	      @echo "make install        "	"---    "  fresh install of package
	      @echo "make dev            "	"---    "  set up development env and toolings
	      @echo "make doc            "	"---    "  generate documentation in /docsn
	      @echo "make clean          "	"---    "  clean project non-essential files
	      @echo "make all            "	"---    "  install package and set up devel toolings


      install:
	      $(PIP) install --user .

      clean:
	      $(PIP) uninstall $(PROJECT)

      doc:
	      sphinx-build -b html sourcedir builddir

      dev:
	      $(PYTHON) devel/deploy.py


      ENV=env
      BIN=~/bin

      env:
	      $(PYTHON) -m venv env

      req:
	      $(PIP) install -r requirements.txt

      req-dev:
	      $(PIP) install -r requirements-dev.txt

      script:
	      mkdir -pv ~/bin
	      ln -sf $(PWD)/pan/__main__.py $(BIN)/pan.py

      script-clean:
	      rm $(BIN)/pan.py

      #+end_src
* Guix Config
   #+begin_src scheme

   (locale "pt_BR.utf8")

   (locale-definitions
    (list (locale-definition (source "en_US") (name "en_US.utf8"))
	  (locale-definition (source "pt_BR") (name "pt_BR.utf8"))))

   ("/usr/bin/sh"
    ,(file-append (canonical-package coreutils)
		  "/bin/sh"))
   ("/usr/bin/bash"
    ,(file-append (canonical-package coreutils)
		  "/bin/bash"))

   ("/bin/pwd"
    ,(file-append (canonical-package coreutils)
		  "/bin/pwd"))


   ("/bin/startx" ,(xorg-start-command))

   #+end_src
* sway
#+begin_src config
### Output configuration
#
# Default wallpaper (more resolutions are available in @datadir@/backgrounds/sway/)
#output * bg ~/Pictures/wallpaper/fullsizephoto774797.jpg fill
#
# Example configuration:
#
   # output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.
#+end_src

* stumpwm
#+begin_src lisp
;; (defun executables ()
;;   (loop with path = (uiop:getenv "PATH")
;;         for p in (uiop:split-string path :separator ":")
;;         for dir = (probe-file p)
;;         when (uiop:directory-exists-p dir)
;;           append (uiop:directory-files dir)))

;; (defun find-executable (name)
;;   (find name (executables)
;;         :test #'equalp
;;         :key #'pathname-name))

;; (defun eas/anyexec (lst)
;;   "Return first executable that exist in lst"
;;   (dolist (current lst)
;;     (when (eas/commandv current)
;;       current)))


;; (defun eas/run-app (cmd prop &optional args) ;; FIX: fix
;;   "Run an instance of `cmd' with property `prop' (and any optional arguments `args')"
;;   (if (null args)
;;       (run-or-raise cmd prop)
;;       (run-or-raise (cat cmd " " args) prop)))

;; ;; (defcommand run-editor () ()
;;   "Run an instance of `*editor*' with property`:instance'."
;;   (eas/run-app *editor* (list :instance *editor*)))

;; (defcommand run-ide () ()
;;   "Run an instance of `*ide*' with property`:instance'."
;;   (eas/run-app *ide* (list :instance *ide*)))

;; (defcommand run-browser () ()
;;   "Run an instance of `*browser*' with property`:instance'."
;;   (eas/run-app *browser* (list :instance *browser*)))

;; (defcommand run-terminal () ()
;;   "Run an instance of `*terminal*' with property`:instance'."
;;   (eas/run-app *terminal* (list :instance *terminal*)))

;; (defcommand run-locker () ()
;;   "Run an instance of `*locker*' with property`:instance'."
;;   (eas/run-app *locker* (list :instance *locker*)))

;; (define-key *top-map* (kbd "s-RET") "run-terminal")
;; (define-key *top-map* (kbd "s-l") "run-locker")
;; (define-key *top-map* (kbd "s-b") "run-browser")
;; (define-key *top-map* (kbd "s-e") "run-editor")

;; -----------------
;; EXTERNAL SOFTWARE
;; -----------------

;; GLOBAL MACROS
;; (defmacro search-on-web (name url-prefix)
;;   `(defcommand ,name (search)
;;      ((:rest ,(concatenate 'string (symbol-name name) ": ")))
;;      (run-shell-command (format nil "~A ~A"
;; 				*browser*
;; 				(concat ,url-prefix (substitute #\+ #\Space search))))))

;; (search-on-web google "http://www.google.com/search?q=")
;; (search-on-web wikipedia "http://en.wikipedia.org/wiki/Special:Search?fulltext=Search&search=")
;; (search-on-web youtube "http://youtube.com/results?search_query=")

;; (defun runner (program &optional args)
;;   ".NET like Runnner."
;;   (uiop:run-program (concatenate 'string program " " args)))


;; (defcommand tocador () ()
;;   (let ((link (trivial-clipboard:text))
;; 	(player "mpv")
;; 	(args "--no-config --no-audio-display"))
;;     (runner "mpv" (concatenate 'string args
;; 			       " "
;; 			       link))))
;; (define-key *top-map* (kbd "s-P") "tocador")

;; ;; WALLPAPER
;; (defun waller()
;;   (let ((setter "feh")
;; 	(setter-args "--randomize --bg-fill")
;; 	(wallpapers (concatenate 'string *pictures* "/papelparede")))
;;     (run-shell-command (concatenate 'string  setter " " setter-args " " wallpapers))))

;; (when (eas/commandv "feh")
;;   (waller))

;; -----------------
;; CUSTOM COMMANDS
;; -----------------

;; (defcommand safe-quit () ()
;;   "Checks if any windows are open before quitting."
;;   (let ((win-count 0)) ;; count the windows in each group
;;     (dolist (group (screen-groups (current-screen)))
;;       (setq win-count (+ (length (group-windows group)) win-count)))
;;     (if (= win-count 0) ;; display the number of open windows or quit
;; 	(run-commands "quit")
;; 	(message (format nil "You have ~d ~a open" win-count
;; 			 (if (= win-count 1) "window" "windows"))))))

#+end_src
* Nixos
** Config
    #+begin_src nix
    #efiInstallAsRemovable = true; # in case canTouchEfiVariables doesn't work for your system

    #boot.loader.systemd-boot.enable = true;

	  # services.xserver.xkbOptions = "eurosign:e";

	  # Some programs need SUID wrappers, can be configured further or are
	  # started in user sessions.
	  # programs.mtr.enable = true;
	  # programs.gnupg.agent = {
	  #   enable = true;
	  #   enableSSHSupport = true;
	  #   pinentryFlavor = "gnome3";
	  # };

	  # * Firewall
	  # networking.firewall.allowedTCPPorts = [ ... ];
	  # networking.firewall.allowedUDPPorts = [ ... ];
	  # Or disable the firewall altogether.
	  # networking.firewall.enable = false;

	  # Enable CUPS to print documents.
	  # services.printing.enable = true;

    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

    # Select internationalisation properties.
    # i18n.defaultLocale = "en_US.UTF-8";
    # console = {
    #   font = "Lat2-Terminus16";
    #   keyMap = "us";
    # };

    #+end_src
* Nyxt
   #+begin_src conf ~/.config/nyxt/init.lisp :mkdirp yes
   (in-package :next-user)

   ;; Search Engines
   (defvar a/search-engines
     '(("bi" . "https://bing.com/?q=~a")
       ("dg" . "https://duckduckgo.com/?q=~a")
       ("g" . "https://www.google.com/search?ion=1&q=~a")
       ("gh" . "https://github.com/search?ref=simplesearch&q=~a")
       ("q" .  "http://quickdocs.org/search?q=~a")
       ("s" .  "http://stackoverflow.com/search?q=~a")
       ("wp" . "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=~a")
       ("yt" . "https://www.youtube.com/results?search_query=~a")))

   (defclass my-browser (gtk-browser)
     ((search-engines :initform
		      (append
		       a/search-engines
		       (get-default 'browser 'search-engines)))))

   (setf *browser-class* 'my-browser)
   #+end_src
** Config
    #+begin_src lisp
    (defvar *my-keymap* (make-keymap)  "My keymap.")

    (define-command play-page-video (&optional (buffer (current-buffer)))
      "Play video in the currently open buffer."
      (uiop:run-program (list "mpv" (url buffer))))
    (define-key :keymap *my-keymap*  "C-M-c v" #'play-page-video)

    (define-command play-video-in-current-page (&optional (buffer (current-buffer)))
      "Play video in the currently open buffer."
      (uiop:run-program (list "mpv" (url buffer))))

    (defvar *my-keymap* (make-keymap)
      "My keymap.")

    (define-mode my-mode ()
      "Dummy mode for the custom key bindings in `*my-keymap*'."
      ((keymap-schemes :initform (list :emacs *my-keymap*
				       :vi-normal *my-keymap*))))

    Debugging
    (setf *swank-port* 4006)


    Use development platform port.
    (setf +platform-port-command+
	  "~/.local/bin/next-gtk-webkit")

    open-file
    (defun my-open-videos (filename)
      "Open videos with mpv."
      (handler-case (let ((extension (pathname-type filename)))
		      (match extension
			     ((or "webm" "mkv" "mp4")
			      (uiop:launch-program (list "mpv" filename)))
			     (_
			      (next/file-manager-mode:open-file-function filename))))
	(error (c) (log:error "Error opening ~a: ~a" filename c))))

    (setf next/file-manager-mode:*open-file-function* #'my-open-videos)


    (define-key :keymap *my-keymap* "C-M-c v" #'play-video-in-current-page)


    -- a-FUNCTIONS (m-x)
    (defun a-play-video ()
      "Play current page's video"
      (with-result (url (buffer-get-url))
	(uiop:launch-program (list "mpv" url))))

    (define-command a-get-video ()
      "Download current page's video"
      (with-result (url (buffer-get-url))
	(uiop:launch-program (list "youtube-dl" url "&"))))

    (define-command a-bookmark-url ()
      "Allow the user to bookmark a URL via minibuffer input."
      (with-result (url (read-from-minibuffer (minibuffer *interface*)))
	(%bookmark-url url)))

    ;; Zoom
    ;; (setf *zoom-ratio-default* 1.6)

    HOME PAGE
    (setf (get-default 'remote-interface 'start-page-url) "https://cnn.com")

    ;; Minibuffer
    (setf (get-default 'minibuffer 'minibuffer-style)
	  (cl-css:inline-css
	   '((body :border-top "14px solid red"))))

    #+end_src
* gtk-3.0
   #+begin_src conf
   [Settings]
   gtk-fallback-icon-theme=Numix
   gtk-icon-theme-name=Canta
   gtk-key-theme-name=Emacs
   gtk-theme-name=Canta
   #+end_src
* pycodestyle
   #+begin_src conf
   [pycodestyle]
   max-line-length = 90
   #+end_src
* flake
   #+begin_src conf
   [flake8]
   max-line-length = 88
   exclude = tests/*
   max-complexity = 10
   #+end_src
* tmux
   #+begin_src conf
   set-option -g default-shell "/usr/bin/bash"

   24-bit color
   set -ga terminal-overrides ",xterm-termite:Tc"

   24 Colors
   set -g default-terminal "screen-256color-italic"
   set-option -ga terminal-overrides ",xterm-256color*:Tc:smso"

   mouse
   bind-key m set-option -g mouse on \; display 'Mouse: ON'
   bind-key M set-option -g mouse off \; display 'Mouse: OFF'

   #+end_src
* fontconfig
   #+begin_src conf
   <?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
   <fontconfig>
     <alias>
       <family>serif</family>
       <prefer>
	 <family>Noto Color Emoji</family>
       </prefer>
     </alias>
     <alias>
       <family>sans-serif</family>
       <prefer>
	 <family>Noto Color Emoji</family>
       </prefer>
     </alias>
     <alias>
       <family>monospace</family>
       <prefer>
	 <family>Noto Color Emoji</family>
       </prefer>
     </alias>
   </fontconfig>
   #+end_src
