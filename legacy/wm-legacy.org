#+TITLE: WM Legacy

* dwm
    #+begin_src c
/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 0;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayonleft = 0;   	/* 0: systray in the right corner, >0: systray on left of status text */
static const unsigned int systrayspacing = 2;   /* systray spacing */
static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
static const int showsystray        = 1;     /* 0 means no systray */
static const int showbar            = 1;     /* 0 means no bar */
static const int topbar             = 1;     /* 0 means bottom bar */
static const char *fonts[]          = { "monospace:size=10" };
static const char dmenufont[]       = "monospace:size=10";
static const char col_gray1[]       = "#222222";
static const char col_gray2[]       = "#444444";
static const char col_gray3[]       = "#bbbbbb";
static const char col_gray4[]       = "#eeeeee";
static const char col_cyan[]        = "#005577";
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
};

/* tagging */
static const char *tags[] = { "mx", "read", "term", "www", "media" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "Emacs",                NULL,       NULL,       1 <<  0,      0,           -1 },
	{ "Code",                 NULL,       NULL,       1 <<  0,      0,           -1 },
	{ "Atril",                NULL,       NULL,       1 <<  1,      0,           -1 },
	{ "st",                   NULL,       NULL,       1 <<  2,      0,           -1 },
	{ "Alacritty",            NULL,       NULL,       1 <<  2,      0,           -1 },
	{ "Firefox",              NULL,       NULL,       1 <<  3,      0,           -1 },
	{ "Google-chrome",        NULL,       NULL,       1 <<  3,      0,           -1 },
	{ "Chromium",             NULL,       NULL,       1 <<  3,      0,           -1 },
	{ "mpv",                  NULL,       NULL,       1 <<  4,      0,           -1 },
	{ "vlc",                  NULL,       NULL,       1 <<  4,      0,           -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define AltMask Mod1Mask
#define XF86MonBrightnessDown  0x1008ff03
#define XF86MonBrightnessUp    0x1008ff02
#define XF86AudioMute	       0x1008ff12
#define XF86AudioLowerVolume   0x1008ff11
#define XF86AudioRaiseVolume   0x1008ff13
#define XF86AudioMicMute       0x1008FFB2
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
static const char *termcmd[]  = { "st", NULL };
static const char *lockercmd[] = { "s-wm-lock", NULL };
static const char *volupcmd[] = { "s-wm-volume", "--up", NULL };
static const char *voldowncmd[] = { "s-wm-volume", "--down", NULL };
static const char *volmutecmd[] = { "s-wm-volume", "--toggle", NULL };
static const char *tuneupcmd[] = { "mpc", "volume", "+3", NULL };
static const char *tunedowncmd[] = { "mpc", "volume", "-3", NULL };
static const char *tunetogglecmd[] = { "mpc", "toggle", NULL };
static const char *backupcmd[] = { "s-wm-backlight", "up",  NULL };
static const char *backdowncmd[] = { "s-wm-backlight", "down",  NULL };
static const char *shotfullcmd[] = { "s-wm-shot", "--full", NULL };
static const char *shotpartialcmd[] = { "s-wm-shot", "--partial", NULL };

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY|ShiftMask,             XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
	{ MODKEY,               XK_e,                      spawn,         {.v = volmutecmd} },
	{ MODKEY,               XK_w,                      spawn,         {.v = volupcmd}   },
	{ MODKEY,               XK_s,                      spawn,         {.v = voldowncmd} },
	{ 0,                    XK_Print,                  spawn,         {.v = shotfullcmd} },
	{ ShiftMask,            XK_Print,                  spawn,         {.v = shotpartialcmd} },
	{ MODKEY,               XK_l,                      spawn,         {.v = lockercmd}  },
	{ MODKEY,               XK_x,                      spawn,         {.v = dmenucmd}  },
	{ MODKEY|ShiftMask,     XK_a,                      spawn,         {.v = backupcmd} },
	{ MODKEY|ShiftMask,     XK_d,                      spawn,         {.v = backdowncmd} },
	{ MODKEY|ShiftMask,     XK_w,                      spawn,         {.v = tuneupcmd} },
	{ MODKEY|ShiftMask,     XK_e,                      spawn,         {.v = tunedowncmd} },
	{ MODKEY,               XK_space,                  spawn,         {.v = tunetogglecmd} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};
   #+end_src

* st
#+begin_src c
/* See LICENSE file for copyright and license details. */

/*
 * appearance
 *
 * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
 */
static char *font = "Liberation Mono:pixelsize=22:antialias=true:autohint=true";
static int borderpx = 2;

/*
 * What program is execed by st depends of these precedence rules:
 * 1: program passed with -e
 * 2: scroll and/or utmp
 * 3: SHELL environment variable
 * 4: value of shell in /etc/passwd
 * 5: value of shell in config.h
 */
static char *shell = "/bin/bash";
char *utmp = NULL;
/* scroll program: to enable use a string like "scroll" */
char *scroll = NULL;
char *stty_args = "stty raw pass8 nl -echo -iexten -cstopb 38400";

/* identification sequence returned in DA and DECID */
char *vtiden = "\033[?6c";

/* Kerning / character bounding-box multipliers */
static float cwscale = 1.0;
static float chscale = 1.0;

/*
 * word delimiter string
 *
 * More advanced example: L" `'\"()[]{}"
 */
wchar_t *worddelimiters = L" ";

/* selection timeouts (in milliseconds) */
static unsigned int doubleclicktimeout = 300;
static unsigned int tripleclicktimeout = 600;

/* alt screens */
int allowaltscreen = 1;

/* allow certain non-interactive (insecure) window operations such as:
   setting the clipboard text */
int allowwindowops = 0;

/*
 * draw latency range in ms - from new content/keypress/etc until drawing.
 * within this range, st draws when content stops arriving (idle). mostly it's
 * near minlatency, but it waits longer for slow updates to avoid partial draw.
 * low minlatency will tear/flicker more, as it can "detect" idle too early.
 */
static double minlatency = 8;
static double maxlatency = 33;

/*
 * blinking timeout (set to 0 to disable blinking) for the terminal blinking
 * attribute.
 */
static unsigned int blinktimeout = 800;

/*
 * thickness of underline and bar cursors
 */
static unsigned int cursorthickness = 2;

/*
 * bell volume. It must be a value between -100 and 100. Use 0 for disabling
 * it
 */
static int bellvolume = 0;

/* default TERM value */
char *termname = "st-256color";

/*
 * spaces per tab
 *
 * When you are changing this value, don't forget to adapt the »it« value in
 * the st.info and appropriately install the st.info in the environment where
 * you use this st version.
 *
 *	it#$tabspaces,
 *
 * Secondly make sure your kernel is not expanding tabs. When running `stty
 * -a` »tab0« should appear. You can tell the terminal to not expand tabs by
 *  running following command:
 *
 *	stty tabs
 */
unsigned int tabspaces = 8;

/* Terminal colors (16 first used in escape sequence) */
static const char *colorname[] = {
    /* 8 normal colors */
    "black", "red3", "green3", "yellow3", "blue2", "magenta3", "cyan3",
    "gray90",

    /* 8 bright colors */
    "gray50", "red", "green", "yellow", "#5c5cff", "magenta", "cyan", "white",

    [255] = 0,

    /* more colors can be added after 255 to use with DefaultXX */
    "#cccccc", "#555555", "gray90", /* default foreground colour */
    "black",                        /* default background colour */
};

/*
 * Default colors (colorname index)
 * foreground, background, cursor, reverse cursor
 */
unsigned int defaultfg = 258;
unsigned int defaultbg = 259;
unsigned int defaultcs = 256;
static unsigned int defaultrcs = 257;

/*
 * Default shape of cursor
 * 2: Block ("█")
 * 4: Underline ("_")
 * 6: Bar ("|")
 * 7: Snowman ("☃")
 */
static unsigned int cursorshape = 2;

/*
 * Default columns and rows numbers
 */

static unsigned int cols = 80;
static unsigned int rows = 24;

/*
 * Default colour and shape of the mouse cursor
 */
static unsigned int mouseshape = XC_xterm;
static unsigned int mousefg = 7;
static unsigned int mousebg = 0;

/*
 * Color used to display font attributes when fontconfig selected a font which
 * doesn't match the ones requested.
 */
static unsigned int defaultattr = 11;

/*
 * Force mouse select/shortcuts while mask is active (when MODE_MOUSE is set).
 * Note that if you want to use ShiftMask with selmasks, set this to an other
 * modifier, set to 0 to not use it.
 */
static uint forcemousemod = ShiftMask;

/*
 * Internal mouse shortcuts.
 * Beware that overloading Button1 will disable the selection.
 */
static MouseShortcut mshortcuts[] = {
    /* mask                 button   function        argument       release */
    {XK_ANY_MOD, Button2, selpaste, {.i = 0}, 1},
    {ShiftMask, Button4, ttysend, {.s = "\033[5;2~"}},
    {XK_ANY_MOD, Button4, ttysend, {.s = "\031"}},
    {ShiftMask, Button5, ttysend, {.s = "\033[6;2~"}},
    {XK_ANY_MOD, Button5, ttysend, {.s = "\005"}},
};

/* Internal keyboard shortcuts. */
#define MODKEY Mod1Mask
#define TERMMOD (ControlMask | ShiftMask)

static Shortcut shortcuts[] = {
    /* mask                 keysym          function        argument */
    {XK_ANY_MOD, XK_Break, sendbreak, {.i = 0}},
    {ControlMask, XK_Print, toggleprinter, {.i = 0}},
    {ShiftMask, XK_Print, printscreen, {.i = 0}},
    {XK_ANY_MOD, XK_Print, printsel, {.i = 0}},
    {TERMMOD, XK_Prior, zoom, {.f = +1}},
    {TERMMOD, XK_Next, zoom, {.f = -1}},
    {TERMMOD, XK_Home, zoomreset, {.f = 0}},
    {TERMMOD, XK_C, clipcopy, {.i = 0}},
    {TERMMOD, XK_V, clippaste, {.i = 0}},
    {TERMMOD, XK_Y, selpaste, {.i = 0}},
    {ShiftMask, XK_Insert, selpaste, {.i = 0}},
    {TERMMOD, XK_Num_Lock, numlock, {.i = 0}},
};

/*
 * Special keys (change & recompile st.info accordingly)
 *
 * Mask value:
 * * Use XK_ANY_MOD to match the key no matter modifiers state
 * * Use XK_NO_MOD to match the key alone (no modifiers)
 * appkey value:
 * * 0: no value
 * * > 0: keypad application mode enabled
 * *   = 2: term.numlock = 1
 * * < 0: keypad application mode disabled
 * appcursor value:
 * * 0: no value
 * * > 0: cursor application mode enabled
 * * < 0: cursor application mode disabled
 *
 * Be careful with the order of the definitions because st searches in
 * this table sequentially, so any XK_ANY_MOD must be in the last
 * position for a key.
 */

/*
 * If you want keys other than the X11 function keys (0xFD00 - 0xFFFF)
 * to be mapped below, add them to this array.
 */
static KeySym mappedkeys[] = {-1};

/*
 * State bits to ignore when matching key or button events.  By default,
 * numlock (Mod2Mask) and keyboard layout (XK_SWITCH_MOD) are ignored.
 */
static uint ignoremod = Mod2Mask | XK_SWITCH_MOD;

/*
 * This is the huge key array which defines all compatibility to the Linux
 * world. Please decide about changes wisely.
 */
static Key key[] = {
    /* keysym           mask            string      appkey appcursor */
    {XK_KP_Home, ShiftMask, "\033[2J", 0, -1},
    {XK_KP_Home, ShiftMask, "\033[1;2H", 0, +1},
    {XK_KP_Home, XK_ANY_MOD, "\033[H", 0, -1},
    {XK_KP_Home, XK_ANY_MOD, "\033[1~", 0, +1},
    {XK_KP_Up, XK_ANY_MOD, "\033Ox", +1, 0},
    {XK_KP_Up, XK_ANY_MOD, "\033[A", 0, -1},
    {XK_KP_Up, XK_ANY_MOD, "\033OA", 0, +1},
    {XK_KP_Down, XK_ANY_MOD, "\033Or", +1, 0},
    {XK_KP_Down, XK_ANY_MOD, "\033[B", 0, -1},
    {XK_KP_Down, XK_ANY_MOD, "\033OB", 0, +1},
    {XK_KP_Left, XK_ANY_MOD, "\033Ot", +1, 0},
    {XK_KP_Left, XK_ANY_MOD, "\033[D", 0, -1},
    {XK_KP_Left, XK_ANY_MOD, "\033OD", 0, +1},
    {XK_KP_Right, XK_ANY_MOD, "\033Ov", +1, 0},
    {XK_KP_Right, XK_ANY_MOD, "\033[C", 0, -1},
    {XK_KP_Right, XK_ANY_MOD, "\033OC", 0, +1},
    {XK_KP_Prior, ShiftMask, "\033[5;2~", 0, 0},
    {XK_KP_Prior, XK_ANY_MOD, "\033[5~", 0, 0},
    {XK_KP_Begin, XK_ANY_MOD, "\033[E", 0, 0},
    {XK_KP_End, ControlMask, "\033[J", -1, 0},
    {XK_KP_End, ControlMask, "\033[1;5F", +1, 0},
    {XK_KP_End, ShiftMask, "\033[K", -1, 0},
    {XK_KP_End, ShiftMask, "\033[1;2F", +1, 0},
    {XK_KP_End, XK_ANY_MOD, "\033[4~", 0, 0},
    {XK_KP_Next, ShiftMask, "\033[6;2~", 0, 0},
    {XK_KP_Next, XK_ANY_MOD, "\033[6~", 0, 0},
    {XK_KP_Insert, ShiftMask, "\033[2;2~", +1, 0},
    {XK_KP_Insert, ShiftMask, "\033[4l", -1, 0},
    {XK_KP_Insert, ControlMask, "\033[L", -1, 0},
    {XK_KP_Insert, ControlMask, "\033[2;5~", +1, 0},
    {XK_KP_Insert, XK_ANY_MOD, "\033[4h", -1, 0},
    {XK_KP_Insert, XK_ANY_MOD, "\033[2~", +1, 0},
    {XK_KP_Delete, ControlMask, "\033[M", -1, 0},
    {XK_KP_Delete, ControlMask, "\033[3;5~", +1, 0},
    {XK_KP_Delete, ShiftMask, "\033[2K", -1, 0},
    {XK_KP_Delete, ShiftMask, "\033[3;2~", +1, 0},
    {XK_KP_Delete, XK_ANY_MOD, "\033[P", -1, 0},
    {XK_KP_Delete, XK_ANY_MOD, "\033[3~", +1, 0},
    {XK_KP_Multiply, XK_ANY_MOD, "\033Oj", +2, 0},
    {XK_KP_Add, XK_ANY_MOD, "\033Ok", +2, 0},
    {XK_KP_Enter, XK_ANY_MOD, "\033OM", +2, 0},
    {XK_KP_Enter, XK_ANY_MOD, "\r", -1, 0},
    {XK_KP_Subtract, XK_ANY_MOD, "\033Om", +2, 0},
    {XK_KP_Decimal, XK_ANY_MOD, "\033On", +2, 0},
    {XK_KP_Divide, XK_ANY_MOD, "\033Oo", +2, 0},
    {XK_KP_0, XK_ANY_MOD, "\033Op", +2, 0},
    {XK_KP_1, XK_ANY_MOD, "\033Oq", +2, 0},
    {XK_KP_2, XK_ANY_MOD, "\033Or", +2, 0},
    {XK_KP_3, XK_ANY_MOD, "\033Os", +2, 0},
    {XK_KP_4, XK_ANY_MOD, "\033Ot", +2, 0},
    {XK_KP_5, XK_ANY_MOD, "\033Ou", +2, 0},
    {XK_KP_6, XK_ANY_MOD, "\033Ov", +2, 0},
    {XK_KP_7, XK_ANY_MOD, "\033Ow", +2, 0},
    {XK_KP_8, XK_ANY_MOD, "\033Ox", +2, 0},
    {XK_KP_9, XK_ANY_MOD, "\033Oy", +2, 0},
    {XK_Up, ShiftMask, "\033[1;2A", 0, 0},
    {XK_Up, Mod1Mask, "\033[1;3A", 0, 0},
    {XK_Up, ShiftMask | Mod1Mask, "\033[1;4A", 0, 0},
    {XK_Up, ControlMask, "\033[1;5A", 0, 0},
    {XK_Up, ShiftMask | ControlMask, "\033[1;6A", 0, 0},
    {XK_Up, ControlMask | Mod1Mask, "\033[1;7A", 0, 0},
    {XK_Up, ShiftMask | ControlMask | Mod1Mask, "\033[1;8A", 0, 0},
    {XK_Up, XK_ANY_MOD, "\033[A", 0, -1},
    {XK_Up, XK_ANY_MOD, "\033OA", 0, +1},
    {XK_Down, ShiftMask, "\033[1;2B", 0, 0},
    {XK_Down, Mod1Mask, "\033[1;3B", 0, 0},
    {XK_Down, ShiftMask | Mod1Mask, "\033[1;4B", 0, 0},
    {XK_Down, ControlMask, "\033[1;5B", 0, 0},
    {XK_Down, ShiftMask | ControlMask, "\033[1;6B", 0, 0},
    {XK_Down, ControlMask | Mod1Mask, "\033[1;7B", 0, 0},
    {XK_Down, ShiftMask | ControlMask | Mod1Mask, "\033[1;8B", 0, 0},
    {XK_Down, XK_ANY_MOD, "\033[B", 0, -1},
    {XK_Down, XK_ANY_MOD, "\033OB", 0, +1},
    {XK_Left, ShiftMask, "\033[1;2D", 0, 0},
    {XK_Left, Mod1Mask, "\033[1;3D", 0, 0},
    {XK_Left, ShiftMask | Mod1Mask, "\033[1;4D", 0, 0},
    {XK_Left, ControlMask, "\033[1;5D", 0, 0},
    {XK_Left, ShiftMask | ControlMask, "\033[1;6D", 0, 0},
    {XK_Left, ControlMask | Mod1Mask, "\033[1;7D", 0, 0},
    {XK_Left, ShiftMask | ControlMask | Mod1Mask, "\033[1;8D", 0, 0},
    {XK_Left, XK_ANY_MOD, "\033[D", 0, -1},
    {XK_Left, XK_ANY_MOD, "\033OD", 0, +1},
    {XK_Right, ShiftMask, "\033[1;2C", 0, 0},
    {XK_Right, Mod1Mask, "\033[1;3C", 0, 0},
    {XK_Right, ShiftMask | Mod1Mask, "\033[1;4C", 0, 0},
    {XK_Right, ControlMask, "\033[1;5C", 0, 0},
    {XK_Right, ShiftMask | ControlMask, "\033[1;6C", 0, 0},
    {XK_Right, ControlMask | Mod1Mask, "\033[1;7C", 0, 0},
    {XK_Right, ShiftMask | ControlMask | Mod1Mask, "\033[1;8C", 0, 0},
    {XK_Right, XK_ANY_MOD, "\033[C", 0, -1},
    {XK_Right, XK_ANY_MOD, "\033OC", 0, +1},
    {XK_ISO_Left_Tab, ShiftMask, "\033[Z", 0, 0},
    {XK_Return, Mod1Mask, "\033\r", 0, 0},
    {XK_Return, XK_ANY_MOD, "\r", 0, 0},
    {XK_Insert, ShiftMask, "\033[4l", -1, 0},
    {XK_Insert, ShiftMask, "\033[2;2~", +1, 0},
    {XK_Insert, ControlMask, "\033[L", -1, 0},
    {XK_Insert, ControlMask, "\033[2;5~", +1, 0},
    {XK_Insert, XK_ANY_MOD, "\033[4h", -1, 0},
    {XK_Insert, XK_ANY_MOD, "\033[2~", +1, 0},
    {XK_Delete, ControlMask, "\033[M", -1, 0},
    {XK_Delete, ControlMask, "\033[3;5~", +1, 0},
    {XK_Delete, ShiftMask, "\033[2K", -1, 0},
    {XK_Delete, ShiftMask, "\033[3;2~", +1, 0},
    {XK_Delete, XK_ANY_MOD, "\033[P", -1, 0},
    {XK_Delete, XK_ANY_MOD, "\033[3~", +1, 0},
    {XK_BackSpace, XK_NO_MOD, "\177", 0, 0},
    {XK_BackSpace, Mod1Mask, "\033\177", 0, 0},
    {XK_Home, ShiftMask, "\033[2J", 0, -1},
    {XK_Home, ShiftMask, "\033[1;2H", 0, +1},
    {XK_Home, XK_ANY_MOD, "\033[H", 0, -1},
    {XK_Home, XK_ANY_MOD, "\033[1~", 0, +1},
    {XK_End, ControlMask, "\033[J", -1, 0},
    {XK_End, ControlMask, "\033[1;5F", +1, 0},
    {XK_End, ShiftMask, "\033[K", -1, 0},
    {XK_End, ShiftMask, "\033[1;2F", +1, 0},
    {XK_End, XK_ANY_MOD, "\033[4~", 0, 0},
    {XK_Prior, ControlMask, "\033[5;5~", 0, 0},
    {XK_Prior, ShiftMask, "\033[5;2~", 0, 0},
    {XK_Prior, XK_ANY_MOD, "\033[5~", 0, 0},
    {XK_Next, ControlMask, "\033[6;5~", 0, 0},
    {XK_Next, ShiftMask, "\033[6;2~", 0, 0},
    {XK_Next, XK_ANY_MOD, "\033[6~", 0, 0},
    {XK_F1, XK_NO_MOD, "\033OP", 0, 0},
    {XK_F1, /* F13 */ ShiftMask, "\033[1;2P", 0, 0},
    {XK_F1, /* F25 */ ControlMask, "\033[1;5P", 0, 0},
    {XK_F1, /* F37 */ Mod4Mask, "\033[1;6P", 0, 0},
    {XK_F1, /* F49 */ Mod1Mask, "\033[1;3P", 0, 0},
    {XK_F1, /* F61 */ Mod3Mask, "\033[1;4P", 0, 0},
    {XK_F2, XK_NO_MOD, "\033OQ", 0, 0},
    {XK_F2, /* F14 */ ShiftMask, "\033[1;2Q", 0, 0},
    {XK_F2, /* F26 */ ControlMask, "\033[1;5Q", 0, 0},
    {XK_F2, /* F38 */ Mod4Mask, "\033[1;6Q", 0, 0},
    {XK_F2, /* F50 */ Mod1Mask, "\033[1;3Q", 0, 0},
    {XK_F2, /* F62 */ Mod3Mask, "\033[1;4Q", 0, 0},
    {XK_F3, XK_NO_MOD, "\033OR", 0, 0},
    {XK_F3, /* F15 */ ShiftMask, "\033[1;2R", 0, 0},
    {XK_F3, /* F27 */ ControlMask, "\033[1;5R", 0, 0},
    {XK_F3, /* F39 */ Mod4Mask, "\033[1;6R", 0, 0},
    {XK_F3, /* F51 */ Mod1Mask, "\033[1;3R", 0, 0},
    {XK_F3, /* F63 */ Mod3Mask, "\033[1;4R", 0, 0},
    {XK_F4, XK_NO_MOD, "\033OS", 0, 0},
    {XK_F4, /* F16 */ ShiftMask, "\033[1;2S", 0, 0},
    {XK_F4, /* F28 */ ControlMask, "\033[1;5S", 0, 0},
    {XK_F4, /* F40 */ Mod4Mask, "\033[1;6S", 0, 0},
    {XK_F4, /* F52 */ Mod1Mask, "\033[1;3S", 0, 0},
    {XK_F5, XK_NO_MOD, "\033[15~", 0, 0},
    {XK_F5, /* F17 */ ShiftMask, "\033[15;2~", 0, 0},
    {XK_F5, /* F29 */ ControlMask, "\033[15;5~", 0, 0},
    {XK_F5, /* F41 */ Mod4Mask, "\033[15;6~", 0, 0},
    {XK_F5, /* F53 */ Mod1Mask, "\033[15;3~", 0, 0},
    {XK_F6, XK_NO_MOD, "\033[17~", 0, 0},
    {XK_F6, /* F18 */ ShiftMask, "\033[17;2~", 0, 0},
    {XK_F6, /* F30 */ ControlMask, "\033[17;5~", 0, 0},
    {XK_F6, /* F42 */ Mod4Mask, "\033[17;6~", 0, 0},
    {XK_F6, /* F54 */ Mod1Mask, "\033[17;3~", 0, 0},
    {XK_F7, XK_NO_MOD, "\033[18~", 0, 0},
    {XK_F7, /* F19 */ ShiftMask, "\033[18;2~", 0, 0},
    {XK_F7, /* F31 */ ControlMask, "\033[18;5~", 0, 0},
    {XK_F7, /* F43 */ Mod4Mask, "\033[18;6~", 0, 0},
    {XK_F7, /* F55 */ Mod1Mask, "\033[18;3~", 0, 0},
    {XK_F8, XK_NO_MOD, "\033[19~", 0, 0},
    {XK_F8, /* F20 */ ShiftMask, "\033[19;2~", 0, 0},
    {XK_F8, /* F32 */ ControlMask, "\033[19;5~", 0, 0},
    {XK_F8, /* F44 */ Mod4Mask, "\033[19;6~", 0, 0},
    {XK_F8, /* F56 */ Mod1Mask, "\033[19;3~", 0, 0},
    {XK_F9, XK_NO_MOD, "\033[20~", 0, 0},
    {XK_F9, /* F21 */ ShiftMask, "\033[20;2~", 0, 0},
    {XK_F9, /* F33 */ ControlMask, "\033[20;5~", 0, 0},
    {XK_F9, /* F45 */ Mod4Mask, "\033[20;6~", 0, 0},
    {XK_F9, /* F57 */ Mod1Mask, "\033[20;3~", 0, 0},
    {XK_F10, XK_NO_MOD, "\033[21~", 0, 0},
    {XK_F10, /* F22 */ ShiftMask, "\033[21;2~", 0, 0},
    {XK_F10, /* F34 */ ControlMask, "\033[21;5~", 0, 0},
    {XK_F10, /* F46 */ Mod4Mask, "\033[21;6~", 0, 0},
    {XK_F10, /* F58 */ Mod1Mask, "\033[21;3~", 0, 0},
    {XK_F11, XK_NO_MOD, "\033[23~", 0, 0},
    {XK_F11, /* F23 */ ShiftMask, "\033[23;2~", 0, 0},
    {XK_F11, /* F35 */ ControlMask, "\033[23;5~", 0, 0},
    {XK_F11, /* F47 */ Mod4Mask, "\033[23;6~", 0, 0},
    {XK_F11, /* F59 */ Mod1Mask, "\033[23;3~", 0, 0},
    {XK_F12, XK_NO_MOD, "\033[24~", 0, 0},
    {XK_F12, /* F24 */ ShiftMask, "\033[24;2~", 0, 0},
    {XK_F12, /* F36 */ ControlMask, "\033[24;5~", 0, 0},
    {XK_F12, /* F48 */ Mod4Mask, "\033[24;6~", 0, 0},
    {XK_F12, /* F60 */ Mod1Mask, "\033[24;3~", 0, 0},
    {XK_F13, XK_NO_MOD, "\033[1;2P", 0, 0},
    {XK_F14, XK_NO_MOD, "\033[1;2Q", 0, 0},
    {XK_F15, XK_NO_MOD, "\033[1;2R", 0, 0},
    {XK_F16, XK_NO_MOD, "\033[1;2S", 0, 0},
    {XK_F17, XK_NO_MOD, "\033[15;2~", 0, 0},
    {XK_F18, XK_NO_MOD, "\033[17;2~", 0, 0},
    {XK_F19, XK_NO_MOD, "\033[18;2~", 0, 0},
    {XK_F20, XK_NO_MOD, "\033[19;2~", 0, 0},
    {XK_F21, XK_NO_MOD, "\033[20;2~", 0, 0},
    {XK_F22, XK_NO_MOD, "\033[21;2~", 0, 0},
    {XK_F23, XK_NO_MOD, "\033[23;2~", 0, 0},
    {XK_F24, XK_NO_MOD, "\033[24;2~", 0, 0},
    {XK_F25, XK_NO_MOD, "\033[1;5P", 0, 0},
    {XK_F26, XK_NO_MOD, "\033[1;5Q", 0, 0},
    {XK_F27, XK_NO_MOD, "\033[1;5R", 0, 0},
    {XK_F28, XK_NO_MOD, "\033[1;5S", 0, 0},
    {XK_F29, XK_NO_MOD, "\033[15;5~", 0, 0},
    {XK_F30, XK_NO_MOD, "\033[17;5~", 0, 0},
    {XK_F31, XK_NO_MOD, "\033[18;5~", 0, 0},
    {XK_F32, XK_NO_MOD, "\033[19;5~", 0, 0},
    {XK_F33, XK_NO_MOD, "\033[20;5~", 0, 0},
    {XK_F34, XK_NO_MOD, "\033[21;5~", 0, 0},
    {XK_F35, XK_NO_MOD, "\033[23;5~", 0, 0},
};

/*
 * Selection types' masks.
 * Use the same masks as usual.
 * Button1Mask is always unset, to make masks match between ButtonPress.
 * ButtonRelease and MotionNotify.
 * If no match is found, regular selection is used.
 */
static uint selmasks[] = {
    [SEL_RECTANGULAR] = Mod1Mask,
};

/*
 * Printable characters in ASCII, used to estimate the advance width
 * of single wide characters.
 */
static char ascii_printable[] = " !\"#$%&'()*+,-./0123456789:;<=>?"
                                "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
                                "`abcdefghijklmnopqrstuvwxyz{|}~";

#+end_src
* slstatus
#+begin_src c
/* See LICENSE file for copyright and license details. */

/* interval between updates (in ms) */
const unsigned int interval = 1000;

/* text to show if no value can be retrieved */
static const char unknown_str[] = "n/a";

/* maximum output string length */
#define MAXLEN 2048

/*
 * function            description                     argument (example)
 *
 * battery_perc        battery percentage              battery name (BAT0)
 *                                                     NULL on OpenBSD/FreeBSD
 * battery_state       battery charging state          battery name (BAT0)
 *                                                     NULL on OpenBSD/FreeBSD
 * battery_remaining   battery remaining HH:MM         battery name (BAT0)
 *                                                     NULL on OpenBSD/FreeBSD
 * cpu_perc            cpu usage in percent            NULL
 * cpu_freq            cpu frequency in MHz            NULL
 * datetime            date and time                   format string (%F %T)
 * disk_free           free disk space in GB           mountpoint path (/)
 * disk_perc           disk usage in percent           mountpoint path (/)
 * disk_total          total disk space in GB          mountpoint path (/")
 * disk_used           used disk space in GB           mountpoint path (/)
 * entropy             available entropy               NULL
 * gid                 GID of current user             NULL
 * hostname            hostname                        NULL
 * ipv4                IPv4 address                    interface name (eth0)
 * ipv6                IPv6 address                    interface name (eth0)
 * kernel_release      `uname -r`                      NULL
 * keyboard_indicators caps/num lock indicators        format string (c?n?)
 *                                                     see keyboard_indicators.c
 * keymap              layout (variant) of current     NULL
 *                     keymap
 * load_avg            load average                    NULL
 * netspeed_rx         receive network speed           interface name (wlan0)
 * netspeed_tx         transfer network speed          interface name (wlan0)
 * num_files           number of files in a directory  path
 *                                                     (/home/foo/Inbox/cur)
 * ram_free            free memory in GB               NULL
 * ram_perc            memory usage in percent         NULL
 * ram_total           total memory size in GB         NULL
 * ram_used            used memory in GB               NULL
 * run_command         custom shell command            command (echo foo)
 * separator           string to echo                  NULL
 * swap_free           free swap in GB                 NULL
 * swap_perc           swap usage in percent           NULL
 * swap_total          total swap size in GB           NULL
 * swap_used           used swap in GB                 NULL
 * temp                temperature in degree celsius   sensor file
 *                                                     (/sys/class/thermal/...)
 *                                                     NULL on OpenBSD
 *                                                     thermal zone on FreeBSD
 *                                                     (tz0, tz1, etc.)
 * uid                 UID of current user             NULL
 * uptime              system uptime                   NULL
 * username            username of current user        NULL
 * vol_perc            OSS/ALSA volume in percent      mixer file (/dev/mixer)
 *                                                     NULL on OpenBSD
 * wifi_perc           WiFi signal in percent          interface name (wlan0)
 * wifi_essid          WiFi ESSID                      interface name (wlan0)
 */
static const struct arg args[] = {
    /* function format          argument */
    {run_command, "VOL: %4s",
     "pactl list sinks | gawk '/Volume: front/ {print$5}'"},
    {separator, " | ", NULL},
    {temp, "GPUT: %s°C", "/sys/class/hwmon/hwmon2/temp1_input"},
    {separator, " | ", NULL},
    {temp, "CPUT: %s°C", "/sys/class/hwmon/hwmon3/temp1_input"},
    {separator, " | ", NULL},
    {temp, "MOBOT: %s°C", "/sys/class/hwmon/hwmon1/temp1_input"},
    {separator, " | ", NULL},
    {temp, "BATT: %s°C", "/sys/class/hwmon/hwmon0/in0_input"},
    {separator, " | ", NULL},
    {cpu_perc, "CPUP: %s%%", NULL},
    {separator, " | ", NULL},
    {ram_perc, "RAM: %2s%%", NULL},
    {separator, " | ", NULL},
    {battery_perc, "BAT: %s%%", "BAT0"},
    {separator, " | ", NULL},
    {datetime, "%s", "%F %T"},
};

#+end_src

* Qtile
   #+begin_src python
		    widget.Sep(padding=10),
		    widget.KeyboardLayout(
			configured_keyboards=["us", "br"], foreground=COLORS.pink,
		    ),
		    widget.Wallpaper(random_selection=True, label=False),

    widget.CheckUpdates(
			colour_no_updates=COLORS.black,
			colour_have_updates=COLORS.red,
			custom_command="checkupdates",
		    ),
		    widget.Sep(padding=10),
		    widget.CapsNumLockIndicator(foreground=COLORS.white),
		    widget.Sep(padding=10),
		    widget.KeyboardLayout(
			configured_keyboards=["us", "pt"], foreground=COLORS.white
		    ),
		    widget.Sep(padding=10),
		    widget.Sep(padding=10),
		    widget.Battery(
			format="{percent:2.0%} {hour:d}:{min:02d}",
			update_delay=5,
			foreground=COLORS.white,
			low_foreground=COLORS.red,
		    ),


   keys_external = []
   keys = keys + keys_external

    Bucks
   COLORS = {
       "black": "000000",
       "white": "eee1c6",
       "red": "e81e17",
       "blue": "0077c0",
       "yellow": "9A7500",
       "orange": "e3a32d",
       "gray": "7a6e53",
       "green": "00471b",
   }

    Nord Light
   COLORS = {
       "black": "2E3440",
       "white": "E5E9F0",
       "red": "ff6655",
       "blue": "60728C",
       "yellow": "9A7500",
       "orange": "AC4426",
       "gray": "dfdfdf",
       "green": "4F894C",
   }

   screens = [
       Screen(
	   top=bar.Bar(
	       [
		   widget.GroupBox(
		       highlight_method="block",
		       rounded=False,
		       this_current_screen_border=COLORS["red"],
		       inactive=COLORS["white"],
		       active=COLORS["white"],
		       urgent_text=COLORS["green"],
		       background=COLORS["blue"],
		       foreground=COLORS["gray"],
		       hide_unused=True,
		   ),
		   widget.WindowName(
		       fontsize=12,
		       foreground=COLORS["black"],
		       padding=10,
		       show_state=False,
		   ),
		   widget.Prompt(foreground=COLORS["black"], ignore_dups_history=True),
		   widget.Systray(padding=10, foreground=COLORS["black"]),
		   widget.Sep(padding=10),
		   widget.Volume(
		       update_interval=5,
		       foreground=COLORS["black"],
			emoji=True,
		       padding=10,
		   ),
		   widget.Sep(padding=10),
		   widget.ThermalSensor(foreground=COLORS["black"]),
		   widget.Sep(padding=10),
		    widget.CheckUpdates(
			colour_no_updates=COLORS["black"],
			colour_have_updates=COLORS["red"],
			custom_command="checkupdates",
		    ),
		    widget.Sep(padding=10),
		    widget.CapsNumLockIndicator(foreground=COLORS["black"]),
		    widget.Sep(padding=10),
		    widget.KeyboardLayout(
			configured_keyboards=["us", "pt"], foreground=COLORS["black"]
		    ),
		    widget.Sep(padding=10),
		   widget.Memory(foreground=COLORS["black"]),
		    widget.Sep(padding=10),
		    widget.Battery(
			format="{percent:2.0%} {hour:d}:{min:02d}",
			update_delay=5,
			foreground=COLORS["black"],
			low_foreground=COLORS["red"],
		    ),
		   widget.Sep(padding=10),
		   widget.Clock(format=" %a %d %b %I:%M %p ", foreground=COLORS["black"]),
		   widget.Wallpaper(
		       random_selection=True, foreground=COLORS["black"], label=False
		   ),
	       ],
	       size=25,
	       background=COLORS["white"],
	   ),
       ),
   ]


	for x in {
	    "emacs",
	    "st",
	    "nm-applet",
	    "dunst",
	    "unclutter",
	    f"feh --recursive --randomize --bg-fill {PICTURES}/wallpapers".split(),
	    "udiskie --use-udisks2".split(),
	}:
	    subprocess.run([x], check=False)
	subprocess.Popen(["nm-applet"])

   #+end_src
* Xmobar
   #+begin_src haskell
	   -- -- weather monitor
	   -- , Run Weather "SBBR" [ "--template", "<skyCondition> | <fc=#4682B4><tempC></fc>°C | <fc=#4682B4><rh></fc>% | <fc=#4682B4><pressure></fc>hPa"
	   --                      ] 13000
   -- %StdinReader% }{
	   -- -- screen brightness
	   -- , Run Brightness ["-t", "Brightness: [<bar>]"] 10

   position = Static { xpos = 0, ypos = 750, width = 1346, height = 20 }
   #+end_src
* Xmonad
   #+begin_src haskell
   import Graphics.X11.ExtraTypes.XF86

   , ( (0, xF86XK_AudioRaiseVolume), spawn  "pactl set-sink-volume @DEFAULT_SINK@ +5%")
   , ( (0, xF86XK_AudioLowerVolume), spawn  "pactl set-sink-volume @DEFAULT_SINK@ -5%")
   , ( (0, xF86XK_AudioMute)       , spawn  "pactl set-sink-mute @DEFAULT_SINK@ toggle")

	 -- Toggle the status bar gap
       -- Use this binding with avoidStruts from Hooks.ManageDocks.
       -- See also the statusBar function from Hooks.DynamicLog.
       --
       -- , ((modm .|. altMask, xK_b     ), sendMessage ToggleStruts)


       -- ++

       -- --
       -- -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
       -- -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
       -- --
       -- [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
       --     | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
       --     , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]

   #+end_src
* StumpWM
   #+BEGIN_SRC lisp

   ;; ------------
   ;; SWANK / SLYNK
   ;; ------------

   ;; (require 'swank)
   ;; (swank:create-server)


   (ql:quickload "clx-truetype")
   (load-module "ttf-fonts")
   (set-font (make-instance 'xft:font :family "Hack Mono" :subfamily "Book" :size 11))


   ;; (define-key *top-map* (kbd "s-R") "kill-and-remove")
   ;; (define-key *top-map* (kbd "s-v") "split-and-switch")
   ;; (define-key *top-map* (kbd "s-h") "hsplit-and-switch")


   ;;*time-modeline-string* "%a %b %e %k:%M"
   ;; (ql:quickload :clx)
   ;; (ql:quickload :cl-ppcre)
   ;; (ql:quickload :swank)
   ;; (ql:quickload :stumpwm)
   ;; (stumpwm:stumpwm)
   ;; (quit)

   ;; ---------------
   ;; Fixed window numbers for certain programs

   ;; (defparameter *window-class-renumber*
   ;;   '(("Emacs" . 0)
   ;;     ("Next" . 1)
   ;;     ("mpv" . 2)
   ;;     ("firefox" . 3)
   ;;     ("st" . 4))
   ;;   "Alist of window classes to be renumbered, and their target numbers.")

   ;; (defun renumber-window-by-class (win)
   ;;   "Renumber window if its class matches *window-class-renumber*."

   ;;   (let* ((class (window-class win))
   ;;          (target-number (cdr (assoc class *window-class-renumber*
   ;;                                     :test #'string=))))

   ;;     (when target-number
   ;;       (let ((other-win (find-if #'(lambda (win)
   ;;                                     (= (window-number win) target-number))
   ;;                                 (group-windows (window-group win)))))
   ;;         (if other-win
   ;;             (when (string-not-equal class (window-class other-win))
   ;;               ;; other window, different class; switch numbers
   ;;               (setf (window-number other-win) (window-number win))
   ;;               (setf (window-number win) target-number))
   ;;             ;; if there's already a window of this class, do nothing.
   ;;             ;; just keep the new number for this window.

   ;;             ;; else: no other window; target number is free.
   ;;             (setf (window-number win) target-number))

   ;;         ;; finally
   ;;         (update-all-mode-lines)))))

   ;; (add-hook *new-window-hook* 'renumber-window-by-class)
   ;; wifi: %I
   ;; (^B%n^b)

   ;; (progn
   ;;   (load-module "kbd-layouts")
   ;;   (keyboard-layout-list "us" "pt-br"))

   ;; -- STUMPWM CONTRIB MODULES
   ;; (add-to-load-path "~/.local/share/quicklisp/setup.lisp")

   ;; (load-module "ttf-fonts")
   ;; (xft:cache-fonts)
   ;; (set-font (make-instance 'xft:font :family "Hack" :subfamily "Regular" :size 10))



   ;;*time-modeline-string* "%a %b %e %k:%M"


   (define-frame-preference "code"
       (0 t t :class "Emacs"))
   (define-frame-preference "browse"
       (0 t t :class "Chromium"))
   (define-frame-preference "browse"
       (0 t t :class "Firefox"))
   (define-frame-preference "browse"
       (0 t t :class "Next"))
   (define-frame-preference "system"
       (0 t t :class "Xfce4-terminal"))
   (define-frame-preference "media"
       (0 t t :class "mpv"))


   (run-commands
    "grename code"
    "gnewbg browse"
    "gnewbg system"
    "gnewbg media"
    "gnewbg misc"
    "gnewbg 6"
    "gnewbg 7")

   ;; (setf (group-name (car (screen-groups (current-screen)))) "code")
   ;; (gnewbg "system")
   ;; (gnewbg "media")
   ;; (gnewbg "misc")


   (define-key *root-map* (kbd "s-c") "colon1 exec firefox http://www.")

   (run-shell-command "dunst &")
   (run-shell-command "stalonetray -t -p --window-type normal")
   (run-shell-command "gnome-settings-daemon")
   (run-shell-command "gnome-power-manager")
   (run-shell-command "bluetooth-applet &")
   (run-shell-command "pactl load-module module-x11-xsmp &")

   ;; COLORS
   (set-focus-color "#3B4252")
   (set-unfocus-color "#232731")
   (set-win-bg-color "#22272F")

   (defcommand vsplit-and-switch () ()
	       "Splits vertically and switches to next window"
	       (vsplit)
	       (fnext))

   (defcommand hsplit-and-switch () ()
	       "Splits horizontally and switches to next window"
	       (hsplit)
	       (fnext))

   (defcommand toogle-mode-line () ()
	       "Hide/Show Modeline"
	       (stumpwm:toggle-mode-line (stumpwm:current-screen)
					 (stumpwm:current-head)))

   (mapc (lambda (head)
	   (toggle-mode-line (current-screen) head))
	 (screen-heads (current-screen)))


   (defcommand kill-and-remove () ()
	       "Kills the window and removes the frame"
	       (kill)
	       (remove))


   ;; prompt the user for an interactive command. The first arg is an
   ;; optional initial contents.
   ;; (defcommand colon1 (&optional (initial "")) (:rest)
   ;;             (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
   ;;               (when cmd
   ;;                 (eval-command cmd t))))


   ;; ;; Read some doc
   ;; (define-key *root-map* (kbd "d") "exec gv")

   ;; ;; Ssh somewhere
   ;; (define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh ")

   ;; ;; Web jump (works for Google and Imdb)
   ;; (defmacro make-web-jump (name prefix)
   ;;   `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
   ;;      (substitute #\+ #\Space search)
   ;;      (run-shell-command (concatenate 'string ,prefix search))))

   ;; (make-web-jump "google" "firefox http://www.google.fr/search?q=")
   ;; (make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")

   ;; ;; C-t M-s is a terrble binding, but you get the idea.
   ;; (define-key *root-map* (kbd "M-s") "google")
   ;; (define-key *root-map* (kbd "i") "imdb")

   ;; Message window font
   ;; (set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

   ;; ;;; Define window placement policy...

   ;; Last rule to match takes precedence!
   ;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
   ;; match is performed.
   ;; TIP: if the :create flag is set then a missing group will be created and
   ;; restored from *data-dir*/create file.
   ;; TIP: if the :restore flag is set then group dump is restored even for an
   ;; existing group using *data-dir*/restore file.
   ;; (define-frame-preference "Default"
   ;;     ;; frame raise lock (lock AND raise == jumpto)
   ;;     (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
   ;;   (1 t nil :class "XTerm"))

   ;; (define-frame-preference "Ardour"
   ;;     (0 t   t   :instance "ardour_editor" :type :normal)
   ;;   (0 t   t   :title "Ardour - Session Control")
   ;;   (0 nil nil :class "XTerm")
   ;;   (1 t   nil :type :normal)
   ;;   (1 t   t   :instance "ardour_mixer")
   ;;   (2 t   t   :instance "jvmetro")
   ;;   (1 t   t   :instance "qjackctl")
   ;;   (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

   ;; (define-frame-preference "Shareland"
   ;;     (0 t   nil :class "XTerm")
   ;;   (1 nil t   :class "aMule"))

   ;; (define-frame-preference "Emacs"
   ;;     (1 t t :restore "emacs-editing-dump" :title "...xdvi")
   ;;   (0 t t :create "emacs-dump" :class "Emacs"))
   #+END_SRC
* Xmobar
   #+begin_src haskell  ~/.xmobarrc
   -- -*- haskell -*-

   Config {

      -- appearance
	font             = "xft:JetBrains Mono:size=9:bold:antialias=true"
      , bgColor          = "#172030"
      , fgColor          = "#c6797e"
      , position         =  Bottom

      -- layout
      , sepChar          = "%"   -- delineator between plugin names and straight text
      , alignSep         = "}{"  -- separator between left-right alignment

      -- general behavior
      , lowerOnStart     = True    -- send to bottom of window stack on start
      , hideOnStart      = False   -- start with window unmapped (hidden)
      , allDesktops      = True    -- show on all desktops
      , overrideRedirect = True    -- set the Override Redirect flag (Xlib)
      , pickBroadest     = False   -- choose widest display (multi-monitor)
      , persistent       = True    -- enable/disable hiding (True = disabled)
      , template         = " O sol seja louvado! } {  %wifi% %multicpu%  %coretemp%  %battery%  %memory%  %date% "

      -- http://projects.haskell.org/xmobar/#system-monitor-plugins.
      , commands         =
	   -- network activity monitor (dynamic interface resolution)
	   [ Run DynNetwork     [ "--template" , "<dev>: <tx>kB/s|<rx>kB/s"
				, "--Low"      , "1000"       -- units: B/s
				, "--High"     , "5000"       -- units: B/s
				, "--low"      , "darkgray"
				, "--normal"   , "orange"
				, "--high"     , "red"
				] 10


	   , Run Brightness ["-t", ""] 60

	   , Run Com "wmbar-info" [] "wifi" 30

	   -- cpu activity monitor
	   , Run MultiCpu       [ "--template" , "CPU: <total0>% <total1>%"
				, "--Low"      , "50"         -- units: %
				, "--High"     , "85"         -- units: %
				, "--low"      , "darkgray"
				, "--normal"   , "orange"
				, "--high"     , "red"
				] 10

	   -- cpu core temperature monitor
	   , Run CoreTemp       [ "--template" , "TEMP: <core0>°C <core1>°C"
				, "--Low"      , "70"        -- units: °C
				, "--High"     , "80"        -- units: °C
				, "--low"      , "darkgray"
				, "--normal"   , "orange"
				, "--high"     , "red"
				] 50

	   -- memory usage monitor
	   , Run Memory         [ "--template" ,"MEM: <usedratio>%"
				, "--Low"      , "20"        -- units: %
				, "--High"     , "90"        -- units: %
				, "--low"      , "darkgray"
				, "--normal"   , "orange"
				, "--high"     , "red"
				] 10

	   -- battery monitor
	   , Run Battery        [ "--template" , "BAT: <acstatus>"
				, "--Low"      , "10"        -- units: %
				, "--High"     , "80"        -- units: %
				, "--low"      , "red"
				, "--normal"   , "orange"
				, "--high"     , "red"

				, "--" -- battery specific options
					  -- discharging status
					  , "-o"	, "<left>% (<tceimeleft>)"
					  -- AC "on" status
					  , "-O"	, "<fc=#eabe9a>Charging</fc>"
					  -- charged status
					  , "-i"	, "<fc=#1E6378>Charged</fc>"
				] 50

	   -- time and date indicator
	   , Run Date           "<fc=#ABABAB>%F (%a) %T</fc>" "date" 10
	   ]
      }
   #+end_src
* StaloneTray
   #+begin_src conf
   decorations none
   transparent false
   dockapp_mode none
   geometry 1x1-0+750
   background "#172030"
   kludges force_icons_size
   grow_gravity NW
   icon_gravity NW
   icon_size 18
   sticky true
   #window_strut none
   window_type dock
   window_layer bottom
   no_shrink false
   skip_taskbar true
   #+End_src
