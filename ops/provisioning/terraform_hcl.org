#+TITLE: Terraform HCL

* Summary
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#summary][Summary]]
- [[#progresso][Progresso]]
  - [[#livros][Livros]]
- [[#variables][Variables]]
  - [[#input-variables][Input variables]]
  - [[#output-vars][output vars]]
- [[#functions][Functions]]
  - [[#shuffle][shuffle()]]
  - [[#uuid][uuid()]]
  - [[#timestamp][timestamp()]]
  - [[#templatefile][templatefile()]]
:END:

* Progresso
** Livros
| Livros | Capitol | em |
|--------+---------+----|
|        |         |    |
* Variables
** Input variables

- variable blocks accept four input arguments: default, description, type, validation
- can be accessed within a given module by using the expression var.<VARIABLE_NAME>

#+begin_src hcl
variable "NAME" {
  [CONFIG ...]
}
#+end_src

#+begin_src hcl
variable "number_example" {
  description = "An example of a number variable in Terraform"
  type = number
  default = 42
}

variable "list_example" {
  description = "An example of a list in Terraform"
  type = list
  default = ["a", "b", "c"]
}

variable "map_example" {
  description = "An example of a map in Terraform"
  type        = map(string)
  default = {
    key1 = "value1"
    key2 = "value2"
    key3 = "value3"
  }
}

variable "list_numeric_example" {
  description = "An example of a numeric list in WOW! eBookwww.wowebook.orgTerraform"
  type        = list(number)
  default     = [1, 2, 3]
}
#+end_src

#+begin_src hcl
variable "server_port" {
  description = "The port the server will use for HTTPrequests"
  type        = number
  default     = 8080
}

resource "aws_security_group" "instance" {
...
   ingress {
    from_port   = var.server_port
    to_port     = var.server_port
  }
}
#+end_src

*Variable definition file*

- files ending in either .tfvars or .tfvars.Jason.

#+begin_src terraform
words = {
  nouns      = ["army", "panther", "walnuts", "sandwich", "Zeus", "banana", "cat", "jellyfish", "jigsaw", "violin", "milk", "sun"]
  adjectives = ["bitter", "sticky", "thundering", "abundant", "chubby", "grumpy"]
  verbs      = ["run", "dance", "love", "respect", "kicked", "baked"]
  adverbs    = ["delicately", "beautifully", "quickly", "truthfully", "wearily"]
  numbers    = [42, 27, 101, 73, -5, 0]
}
#+end_src

*Validating variables*

-  invalid expressions will exit with an error, and the error message error_message.

#+begin_src terraform
variable "words" {
  description = "A word pool to use for Mad Libs"
  type = object({
    nouns      = list(string),
    adjectives = list(string),
    verbs      = list(string),
    adverbs    = list(string),
    numbers    = list(number),
  })
  validation {
    condition     = length(var.words["nouns"]) >= 20
    error_message = "At least 20 nouns must be supplied."
  }
}
#+end_src

** output vars
#+begin_src hcl
output "<NAME>" {
  value = <VALUE>
  [CONFIG ...]
}
#+end_src
* Functions
- expressions that transform inputs into outputs.
- no support for user-defined functions
- cant import functions from external libraries

** shuffle()
** uuid()
** timestamp()
** templatefile()
#+begin_src terraform
templatefile("templates/alice.txt" ,{nouns = ["cat","milk","sun"] ...})
#+end_src
