#+TITLE: Terraform

* Progress
** Books
| Books               | chapter                          | @ |
|---------------------+----------------------------------+---|
| Terraform in Action | 3. How to Manage Terraform State |   |
* HCL
** Variables
*** Input variables

- variable blocks accept four input arguments: default, description, type, validation
- can be accessed within a given module by using the expression var.<VARIABLE_NAME>

#+begin_src hcl
variable "NAME" {
  [CONFIG ...]
}
#+end_src

#+begin_src hcl
variable "number_example" {
  description = "An example of a number variable in Terraform"
  type = number
  default = 42
}

variable "list_example" {
  description = "An example of a list in Terraform"
  type = list
  default = ["a", "b", "c"]
}

variable "map_example" {
  description = "An example of a map in Terraform"
  type        = map(string)
  default = {
    key1 = "value1"
    key2 = "value2"
    key3 = "value3"
  }
}

variable "list_numeric_example" {
  description = "An example of a numeric list in WOW! eBookwww.wowebook.orgTerraform"
  type        = list(number)
  default     = [1, 2, 3]
}
#+end_src

#+begin_src hcl
variable "server_port" {
  description = "The port the server will use for HTTPrequests"
  type        = number
  default     = 8080
}

resource "aws_security_group" "instance" {
...
   ingress {
    from_port   = var.server_port
    to_port     = var.server_port
  }
}
#+end_src

*Variable definition file*

- files ending in either .tfvars or .tfvars.Jason.

#+begin_src terraform
words = {
  nouns      = ["army", "panther", "walnuts", "sandwich", "Zeus", "banana", "cat", "jellyfish", "jigsaw", "violin", "milk", "sun"]
  adjectives = ["bitter", "sticky", "thundering", "abundant", "chubby", "grumpy"]
  verbs      = ["run", "dance", "love", "respect", "kicked", "baked"]
  adverbs    = ["delicately", "beautifully", "quickly", "truthfully", "wearily"]
  numbers    = [42, 27, 101, 73, -5, 0]
}
#+end_src

*Validating variables*

-  invalid expressions will exit with an error, and the error message error_message.

#+begin_src terraform
variable "words" {
  description = "A word pool to use for Mad Libs"
  type = object({
    nouns      = list(string),
    adjectives = list(string),
    verbs      = list(string),
    adverbs    = list(string),
    numbers    = list(number),
  })
  validation {
    condition     = length(var.words["nouns"]) >= 20
    error_message = "At least 20 nouns must be supplied."
  }
}
#+end_src

*** output vars
#+begin_src hcl
output "<NAME>" {
  value = <VALUE>
  [CONFIG ...]
}
#+end_src
** Functions
- expressions that transform inputs into outputs.
- no support for user-defined functions
- cant import functions from external libraries

*** shuffle()
*** uuid()
*** timestamp()
*** templatefile()
#+begin_src terraform
templatefile("templates/alice.txt" ,{nouns = ["cat","milk","sun"] ...})
#+end_src

* Base
** Features
- IaC
- declarative
- mainly provisioning
- can deploy apps
- no meant for management
- more advanced in orchestration
- better for infrastructure

** Resouces
*** ami
The Amazon Machine Image (AMI) to run on the EC2 Instance.
*** instance_type
The type of EC2 Instance to run.
*** tags
*** data
*** local
** Terraform
special configuration block responsible for configuring Terraform
** expression
 anything that returns a value.
*** for
#+begin_src shell
[for i, v in var.list : "${i} is ${v}"]
[for k, v in var.map : length(k) + length(v)]
{for s in var.list : s => upper(s)}
[for s in var.list : upper(s) if s != ""]
#+end_src

#+begin_src terraform
{for k,v in var.words : k => v }
[for s in v : upper(s)]
{for k,v in var.words : k => [for s in v : upper(s)] if k != "numbers"}
#+end_src
*** conditional expression(ternary)
#+begin_src terraform
locals {
  v = length(var.words["nouns"])>=1 ? var.words["nouns"] : [][0]
}
#+end_src
*** splat
** modules
*** minimal structure
- main.tf
- outputs.tf
- variables.tf
- terraform.tfvars
- providers.tf
- versions.tf
- README.md

** output
#+begin_src hcl
output "container_name" {
  value = docker_contianer.my_container.name
  description = "My container name"
}
#+end_src
** variables
- command line (-var option),
- via a file (-var-file option)
- if there is no default value, terraform prompts for one.
- environment variables of the name TF_VAR_<variable_name> will be used.

#+begin_src hcl
variable "image_id" {
  type = string
}

variable "availability_zone_names" {
  type    = list(string)
  default = ["us-west-1a"]
}

variable "docker_ports" {
  type = list(object({
    internal = number
    external = number
    protocol = string
  }))
  default = [
    {
      internal = 8300
      external = 8300
      protocol = "tcp"
    }
  ]
}
#+end_src

#+begin_src shell
terraform plan -var "server_port=8080"

export TF_VAR_server_port=8080 && terraform plan
#+end_src

sensitive variables

#+begin_src hcl
variable "user_information" {
  type = object({
    name    = string
    address = string
  })
  sensitive = true
}

resource "some_resource" "a" {
  name    = var.user_information.name
  address = var.user_information.address
}

#+end_src
** data
*** archive_file
#+begin_src terraform
data "archive_file" "mad_libs" {
  depends_on  = [local_file.mad_libs]
  type        = "zip"
  source_dir  = "${path.module}/madlibs"
  output_path = "${path.cwd}/madlibs.zip"
}
#+end_src
*** user_data
#+begin_src terraform
  user_data = <<-EOF
              #!/bin/bash
              echo "Hello, World" > index.xhtml
              nohup busybox httpd -f -p ${var.server_port} &
              EOF
#+end_src

** locals
#+begin_src terraform
locals {
  uppercase_words = {for k, v in var.words : k => [for s in v : upper(s)]}
}

resource "random_shuffle" "random_nouns" {
  input = local.uppercase_words["nouns"]
}
#+end_src
** types
*** string

interpolation

#+begin_src terraform
"Hello, ${var.name}!"
 %{ for ip in var.list.*.ip }
server ${ip}
%{ endfor }
#+end_src
*** number
*** list
#+begin_src hcl
[1, 2, 3]
["a", "b", "c"]
#+end_src
*** bool
*** map
#+begin_src hcl
default = {
key1 = "value1"
key2 = "value2"
key3 = "value3"
}
#+end_src

** functions
*** join
*** tolist
*** fileset
*** templatefile
*** count
references current value

#+begin_src terraform
count.index
#+end_src
*** substr
#+begin_src terraformsubstr(join("-", [var.namespace, random_string.rand.result]), 0, 24)

#+end_src
** provisioners
*** local
#+begin_src terraform
terraform {
  required_version = ">= 0.15"
  required_providers {
    local = {
      source  = "hashicorp/local"
      version = "~> 2.0"
    }
  }
}


resource "local_file" "literature" {
  filename             = "art_of_war.txt"
  directory_permission = "0744"
  file_permission      = "0744"
  content              = <<-EOT
Sun Tzu said: The art of war is of vital importance to the State.
It is a matter of life and death, a road either to safety or to
ruin. Hence it is a subject of inquiry which can on no account be
neglected.
EOT
}
#+end_src
*** local-exec
*** random
*** archive
*** random_string
** misc
*** splat
container_name[*]
** lifecycle
* Commands
** -- options
*** --var
** apply
relates or updates infrastructure according to Terraform configuration
files in the current directory.

By default, Terraform will generate a new plan and present it for your
approval before taking any action. You can optionally provide a plan
file created by a previous call to "terraform plan", in which case
Terraform will take the actions described in that plan without any
confirmation prompt.

- execute plan

|                |   |
|----------------+---|
| --auto-approve |   |
** console
** refresh
Update the state file of your infrastructure with metadata that matches
the physical resources they are tracking.

This will not modify your infrastructure, but it can modify your
state file to update metadata. This metadata might cause new changes
to occur when you generate a plan or call apply next.

 - does not modify managed existing infrastructure, just Terraform state

** destroy
Destroy Terraform-managed infrastructure.

This command is a convenience alias for:
    terraform apply -destroy

- destroy resources/infrastructure
- remove one by one
- clean up resources
** fmt
** graph
** output
 Reads an output variable from a Terraform state file and prints
  the value. With no additional arguments, output will display all
  the outputs for the root module.  If NAME is not specified, all
  outputs are printed.
** plan
- create an execution plan

*** options
|                 |   |
|-----------------+---|
| --out=PLAN_NAME |   |
** show
#+begin_src shell
terraform show -json plan.out > plan.json
#+end_src
** state
*** list
** refresh
- get from provider current state
* Providers
** aws
*** "aws"
*** resources
**** aws_security_group
#+begin_src terraform
resource "aws_security_group" "instance" {
  name = "terraform-example-instance"

  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
#+end_src
**** aws_instance
**** aws_launch_configuration
*lifecycle*

#+begin_src terraform
resource "aws_launch_configuration" "example" {
  image_id        = "ami-0fb653ca2d3203ac1"
  instance_type   = "t2.micro"
  security_groups = [aws_security_group.instance.id]

  lifecycle {
    create_before_destroy = true
  }
}
#+end_src

*subnet_ids*

**** aws_autoscaling_group
**** aws_lb_listener
**** aws_lb
*** data
**** aws_vpc
#+begin_src terraform
data "aws_vpc" "default" {
  default = true
}
#+end_src
** azure
*** resources
- azurerm_storage_blob
- azurerm_storage_account
- azurerm_storage_container
- azurerm_resource_group
- azurerm_storage_account_sas
- azurerm_app_service_plan
- azurerm_application_insights
- azurerm_function_app
** Fastly
** docker
** podman

* Files
** .tfvars
** .tf
** terraform.tfstate

