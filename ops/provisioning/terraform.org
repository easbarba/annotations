#+TITLE: Terraform

* Summary
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#summary][Summary]]
- [[#progresso][Progresso]]
  - [[#livros][Livros]]
- [[#base][Base]]
  - [[#resouce][resouce]]
    - [[#ami][ami]]
    - [[#instance_type][instance_type]]
    - [[#tags][tags]]
    - [[#data][data]]
  - [[#expression][expression]]
    - [[#for][for]]
  - [[#output][output]]
  - [[#variables][variables]]
  - [[#types][types]]
    - [[#string][string]]
    - [[#number][number]]
    - [[#list][list]]
    - [[#bool][bool]]
    - [[#map][map]]
  - [[#functions][functions]]
    - [[#join][join]]
  - [[#misc][misc]]
    - [[#splat][splat]]
  - [[#lifecycle][lifecycle]]
- [[#files][Files]]
  - [[#mehtfvars][meh.tfvars]]
  - [[#mehtf][meh.tf]]
- [[#commands][Commands]]
  - [[#--options][--options]]
    - [[#-var][-var]]
  - [[#apply][apply]]
  - [[#console][console]]
  - [[#refresh][refresh]]
  - [[#destroy][destroy]]
  - [[#fmt][fmt]]
  - [[#graph][graph]]
  - [[#output][output]]
  - [[#plan][plan]]
    - [[#--][--]]
  - [[#show][show]]
  - [[#state][state]]
    - [[#list][list]]
  - [[#refresh][refresh]]
- [[#providers][Providers]]
  - [[#aws][aws]]
    - [[#aws]["aws"]]
    - [[#resources][resources]]
      - [[#aws_security_group][aws_security_group]]
      - [[#aws_instance][aws_instance]]
      - [[#aws_launch_configuration][aws_launch_configuration]]
      - [[#aws_autoscaling_group][aws_autoscaling_group]]
    - [[#data][data]]
      - [[#aws_vpc][aws_vpc]]
- [[#features][features]]
- [[#providers][Providers]]
  - [[#docker][docker]]
- [[#hcl][hcl]]
  - [[#variables][variables]]
    - [[#input-vars][input vars]]
    - [[#output-vars][output vars]]
- [[#core][core]]
  - [[#providers][providers]]
  - [[#configuration][configuration]]
:END:

* Progresso
** Livros
| Livros                   | Capitulo        | em                        |
|--------------------------+-----------------+---------------------------|
| Terraform Up and running | Getting started | Deploying a Load Balancer |
* Base
** resouce
*** ami
The Amazon Machine Image (AMI) to run on the EC2 Instance.
*** instance_type
The type of EC2 Instance to run.
*** tags
*** data
** expression
 anything that returns a value.
*** for
#+begin_src shell
[for i, v in var.list : "${i} is ${v}"]
[for k, v in var.map : length(k) + length(v)]
{for s in var.list : s => upper(s)}
[for s in var.list : upper(s) if s != ""]
#+end_src
** output
#+begin_src hcl
output "container_name" {
  value = docker_contianer.my_container.name
  description = "My container name"
}
#+end_src
** variables
- command line (-var option),
- via a file (-var-file option)
- if there is no default value, terraform prompts for one.
- environment variables of the name TF_VAR_<variable_name> will be used.

#+begin_src hcl
variable "image_id" {
  type = string
}

variable "availability_zone_names" {
  type    = list(string)
  default = ["us-west-1a"]
}

variable "docker_ports" {
  type = list(object({
    internal = number
    external = number
    protocol = string
  }))
  default = [
    {
      internal = 8300
      external = 8300
      protocol = "tcp"
    }
  ]
}
#+end_src

#+begin_src shell
terraform plan -var "server_port=8080"

export TF_VAR_server_port=8080 && terraform plan
#+end_src

sensitive variables

#+begin_src hcl
variable "user_information" {
  type = object({
    name    = string
    address = string
  })
  sensitive = true
}

resource "some_resource" "a" {
  name    = var.user_information.name
  address = var.user_information.address
}

#+end_src
** types
*** string
*** number
*** list
#+begin_src hcl
[1, 2, 3]
["a", "b", "c"]
#+end_src
*** bool
*** map
#+begin_src hcl
default = {
key1 = "value1"
key2 = "value2"
key3 = "value3"
}
#+end_src

** functions
*** join
** misc
*** splat
container_name[*]
** lifecycle
* Files
** meh.tfvars
** meh.tf
* Commands
** --options
*** -var
** apply
reates or updates infrastructure according to Terraform configuration
files in the current directory.

By default, Terraform will generate a new plan and present it for your
approval before taking any action. You can optionally provide a plan
file created by a previous call to "terraform plan", in which case
Terraform will take the actions described in that plan without any
confirmation prompt.

- execute plan

|                |   |
|----------------+---|
| --auto-approve |   |
** console
** refresh
** destroy
- destroy resources/infrastructure
- remove one by one
- clean up resources
** fmt
** graph
** output
 Reads an output variable from a Terraform state file and prints
  the value. With no additional arguments, output will display all
  the outputs for the root module.  If NAME is not specified, all
  outputs are printed.
** plan
- create an execution plan
*** --
|                 |   |
|-----------------+---|
| --out=PLAN_NAME |   |
** show
** state
*** list
** refresh
- get from provider current state
* Providers
** aws
*** "aws"
*** resources
**** aws_security_group
**** aws_instance
**** aws_launch_configuration
**** aws_autoscaling_group
*** data
**** aws_vpc

* features
- IaC
- declarative
- mainly provisioning
- can deploy apps
- no meant for management
- more advanced in orchestration
- better for infrastructure

* Providers
** docker

* hcl
** variables
*** input vars

#+begin_src hcl
variable "NAME" {
  [CONFIG ...]
}
#+end_src

#+begin_src hcl
variable "number_example" {
  description = "An example of a number variable in Terraform"
  type = number
  default = 42
}

variable "list_example" {
  description = "An example of a list in Terraform"
  type = list
  default = ["a", "b", "c"]
}

variable "map_example" {
  description = "An example of a map in Terraform"
  type        = map(string)
  default = {
    key1 = "value1"
    key2 = "value2"
    key3 = "value3"
  }
}

variable "list_numeric_example" {
  description = "An example of a numeric list in WOW! eBookwww.wowebook.orgTerraform"
  type        = list(number)
  default     = [1, 2, 3]
}
#+end_src

#+begin_src hcl
variable "server_port" {
  description = "The port the server will use for HTTPrequests"
  type        = number
  default     = 8080
}

resource "aws_security_group" "instance" {
...
   ingress {
    from_port   = var.server_port
    to_port     = var.server_port
  }
}
#+end_src
*** output vars
#+begin_src hcl
output "<NAME>" {
  value = <VALUE>
  [CONFIG ...]
}
#+end_src

* core
** providers
     - IaaS: aws, azure
     - PaaS: Kubernetes
     - SaaS: Fastly
** configuration
     - user
     - state
     - providers
