#+TITLE: Terraform

* summary
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#summary][summary]]
- [[#progresso][Progresso]]
  - [[#livros][Livros]]
- [[#base][base]]
  - [[#resouce][resouce]]
    - [[#ami][ami]]
    - [[#instance_type][instance_type]]
    - [[#tags][tags]]
  - [[#expression][expression]]
- [[#features][features]]
- [[#commands][commands]]
  - [[#destroy][destroy]]
  - [[#apply][apply]]
  - [[#output][output]]
  - [[#plan][plan]]
  - [[#refresh][refresh]]
  - [[#graph][graph]]
  - [[#--options][--options]]
    - [[#-var][-var]]
- [[#hcl][hcl]]
  - [[#variables][variables]]
    - [[#input-vars][input vars]]
    - [[#output-vars][output vars]]
- [[#core][core]]
  - [[#providers][providers]]
  - [[#configuration][configuration]]
:END:

* Progresso
** Livros
| Livros                   | Capitulo        | em                                 |
|--------------------------+-----------------+------------------------------------|
| Terraform Up and running | Getting started | Deploying a Cluster of Web Servers |
* base
** resouce
*** ami
The Amazon Machine Image (AMI) to run on the EC2 Instance.
*** instance_type
The type of EC2 Instance to run.
*** tags
** expression
 anything that returns a value.
* features
- IaC
- declarative
- mainly provisioning
- can deploy apps
- no meant for management
- more advanced in orchestration
- better for infrastructure

* commands
** destroy
- destroy resources/infrastructure
- remove one by one
- clean up resources
** apply
reates or updates infrastructure according to Terraform configuration
files in the current directory.

By default, Terraform will generate a new plan and present it for your                                                                
approval before taking any action. You can optionally provide a plan
file created by a previous call to "terraform plan", in which case
Terraform will take the actions described in that plan without any
confirmation prompt.

- execute plan

|                |   |
|----------------+---|
| --auto-approve |   |

** output
 Reads an output variable from a Terraform state file and prints
  the value. With no additional arguments, output will display all
  the outputs for the root module.  If NAME is not specified, all
  outputs are printed.
** plan
- create an execution plan
** refresh
- get from provider current state
** graph
** --options
*** -var

* hcl
** variables
*** input vars

#+begin_src hcl
variable "NAME" {
  [CONFIG ...]
}
#+end_src

#+begin_src hcl
variable "number_example" {
  description = "An example of a number variable in Terraform"
  type = number
  default = 42
}

variable "list_example" {
  description = "An example of a list in Terraform"
  type = list
  default = ["a", "b", "c"]
}

variable "map_example" {
  description = "An example of a map in Terraform"
  type        = map(string)
  default = {
    key1 = "value1"
    key2 = "value2"
    key3 = "value3"
  }
}

variable "list_numeric_example" {
  description = "An example of a numeric list in WOW! eBookwww.wowebook.orgTerraform"
  type        = list(number)
  default     = [1, 2, 3]
}
#+end_src

#+begin_src hcl
variable "server_port" {
  description = "The port the server will use for HTTPrequests"
  type        = number
  default     = 8080
}

resource "aws_security_group" "instance" {
...
   ingress {
    from_port   = var.server_port
    to_port     = var.server_port
  }
}
#+end_src
*** output vars
#+begin_src hcl
output "<NAME>" {
  value = <VALUE>
  [CONFIG ...]
}
#+end_src

* core
** providers
     - IaaS: aws, azure
     - PaaS: Kubernetes
     - SaaS: Fastly
** configuration
     - user
     - state
     - providers
