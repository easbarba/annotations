#+TITLE: Git

* Progress
** Books
| Books            | Capitulo | em                                       | tarde | revisao |
|------------------+----------+------------------------------------------+-------+---------|
| Pro git          | Basics   | Viewing Your Staged and Unstaged Changes |       |         |
| Professional Git |          | CONFIGURING GIT                          |       |         |
* Commands
** add
Add file contents to the index.

#+begin_src shell
git add .
#+end_src
** archive
#+begin_src shell
git archive --format=tar.gz -o my-repo.tar.gz --remote=git://sourceware.org/git/glibc.git master
#+end_src
** bisect
      Find by binary search the change that introduced a bug.
** branch
List, create, or delete branches.

*--delete*

#+begin_src shell
git branch --delete <BRANCH>
git branch -D <BRANCH>
#+end_src
** stash
 takes your uncommitted changes (both staged and unstaged), saves them away for
 later use, and then reverts them from your working copy
** checkout
Switch branches or restore working tree files.

*-b*
new branch
#+begin_src shell
git checkout -b <NEW-BRANCH> [start-point]
#+end_src

** cherry
      Find commits yet to be applied to upstream (branch on the remote).
** cherry-pick
      Apply the changes introduced by some existing commits.
** clean
#+begin_src shell
git clean -f -d
#+end_src
** clone
Clone a repository into a new directory.

<git clone <repo> <dir>

*-â€“depth N*

*--sparse*
Employ a sparse-checkout, with only files in the toplevel directory initially being present.

*--shallow-exclude <BRANCH>*

*--single-branch*
** commit
Record changes to the repository.

*-m*
#+begin_src shell
git commit -m "commit message"
#+end_src

*-a*
#+begin_src shell
git commit -a
#+end_src

#+begin_src shell
git commit -am "commit message"
#+end_src

*--allow-empty*
#+begin_src shell
git commit --allow-empty -m "Trigger CI"
#+end_src

** config
Get and set repository or global options.
*--get*
#+begin_src shell
 --get <name.value>
#+end_src

#+begin_src shell

git config --get remote.origin.url
git config --get user.name
git config --get pull.ff # only

#+end_src

*push.autoSetupRemote* true
#+begin_src shell
git config --global push.autoSetupRemote true
#+end_src

*--global*

*--edit*

#+begin_src shell
git config --global --edit
#+end_src

** diff
Show changes between commits, commits and working tree, and so on.

|                                              |                         |
|----------------------------------------------+-------------------------|
| --oneline --graph <branch>..<current_branch> | differ between branches |
|                                              |                         |

** fetch
Fetch branches and/or tags (collectively, "refs") from one or more other
repositories, along with the objects necessary to complete their histories.
Remote-tracking branches are updated (see the description of <refspec> below for
ways to control this behavior).

** grep
      Print lines matching a pattern.
** help
      Display help information.
** format-patch

|                                   |                                                  |
|-----------------------------------+--------------------------------------------------|
| 6.2 --stdout > ~/newdefault.patch | bundle all commits of branch in one single patch |
| master -o patches                 | patch files in a given directory                 |
|                                   |                                                  |


#+begin_src shell

git format-patch

#+end_src

** log
Show commit logs.

*--format*

#+begin_src
git log --format="%h %an %ar %s"
#+end_src

** merge
Join two or more development histories together.
#+begin_src shell
git checkout feature
git merge main

# Or, you can condense this to a one-liner:

git merge feature main

git merge featureBranch --squash --no-commit
#+end_src

** mv
Move or rename a file, directory, or symlink.
** pull
Fetch from, or integrate with, another repository or a local branch.

#+begin_src shell
git --git-dir=/home/easbarba/Projects/java/spring-boot/.git --work-tree=/home/easbarba/Projects/java/spring-boot -c 'core.quotePath=true' -c 'color.ui=false' pull origin master
#+end_src
** push
Update remote refs along with associated objects.

*--set-upstream origin*
#+begin_src shell
git push --set-upstream origin main
#+end_src

*--force*

#+begin_src shell
git push -f origin main
git push origin +main
#+end_src

*--force-with-lease*

#+begin_src shell
git push origin --force-with-lease
#+end_src


#+begin_quote
only overwrite the branch ref on the server if the branch pushed is related to the branch on the server. So, this avoids to accidentially overwrite the server branch with a completely different branch creating lots of confusion (locally and on the server), maybe not only for yourself.
#+end_quote

** rebase
Forward-port local commits to the updated upstream head.

#+begin_src shell

git rebase -i HEAD~3

#+end_src

On Magit: r i C-c [fp] C-c

** rerere
      Reuse recorded resolution for merged conflicts.

** remote
#+begin_src shell
git remote -v
git remote set-url origin https://github.com/user/repo-2.git
#+end_src

** reset
Reset current HEAD to the specified state.

*unstage all*

#+begin_src
git reset
#+end_src

*--soft*

*HEAD^n*
Undo last n commits

#+begin_src shell
git reset --soft HEAD^4
#+end_src

** restore
discard all changes
 #+begin_src shell
 git restore .
 #+end_src

** revert
      Revert some existing commits.
** rm
      Remove files from the working tree and from the index.

--cached
Upstage files from index (but keep the files locally)

#+begin_src shell
git rm --cached
#+end_src
** show
      Show various types of objects.
** status
Show the working tree status.

|    |                |
|----+----------------|
| -s | shorter status |
|    |                |
** switch
version: 2.3

*-c*
Move existing, uncommitted work to a new branch

#+begin_src shell
git switch -c <new-branch>
#+end_src

#+begin_src shell
git switch --detach <commit>
#+end_src

** submodule
      Initialize, update, or inspect submodules.
** subtree
      Merge subtrees and split repositories into subtrees.
** tag
      Create, list, delete, or verify a tagged object.
** worktree
Manage multiple working trees.
* Options
|--------------------+---------------------------------------------------------------------|
| --since, --after   | Limit the commits to those made after the specified date.           |
| --until, --before  | Limit the commits to those made before the specified date.          |
| --no-merges        | prevent the display of merge commits cluttering up your log history |
| --force-with-lease |                                                                     |

* Files
** .gitigonore
man gitignore
** .gitatributtes
** .config
* Concepts
** Rebasing
** Merging
* Flows
** Trunk-based
** GitFlow
* Tips
** Pull Request a specific commit
     #+BEGIN_SRC shell-script

     git remote add upstream https://github.com/upstream_github_username/upstream_github_repo_name.git

     git fetch --all
     git checkout -b my-single-change upstream/master
     git cherry-pick b50b2e7
     git push -u origin my-single-change
     #+END_SRC

** Force reset Fork to upstream state
     #+BEGIN_SRC shell-script

     # local
     git remote add upstream https://github.com/some_user/some_repo
     git fetch upstream
     git checkout master
     git reset --hard upstream/master

     # remote
     git push origin master --force
     #+END_SRC
* Errors
** Git Push Error: insufficient permission for adding an object to repository
     cd .git/objects
     ls -al
     sudo chown -R yourname:yourgroup *
** Fatal Corrupt loose object
#+begin_src shell
find .git/objects/ -size 0 -exec rm -f {} \;
git fetch origin
#+end_src

or force garbage collection

#+begin_src shell
git gc --aggressive --prune=now
#+end_src

