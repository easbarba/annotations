#+title: Kubernetes Apps

* etcd
** env vars
export ETCDCTL_API=3
* kubectl
** --options
|                 |   |
|-----------------+---|
| --namespace     |   |
| --all-namespace |   |
| --dry-run       |   |
| --output        |   |
** get
*** nodes
*-o*
#+begin_src shell
kubectl get nodes -o wide
#+end_src
*** all
*** pod
*-o*
#+begin_src shell
kubectl get pod -o "custom-columns=PodName:.metadata.name,Containers:.spec.containers[*].name,Image:.spec.containers[*].image"
#+end_src
*** pods
*-n*
#+begin_src shell
kubectl get pods -n apitada
#+end_src
*** deployment
*-n*

#+begin_src
#+end_src
*** logs
*** service / svc
*** port-forward
#+begin_src shell
kubectl port-forward meh-dpl-749f47f6d6-x7nlk 8080:8888
#+end_src
** apply
** exec
#+begin_src shell
kubectl exec etcd-master -n kube-system -- sh -c "ETCDCTL_API=3 etcdctl get / --prefix --keys-only --limit=10 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt  --key /etc/kubernetes/pki/etcd/server.key"
#+end_src

** edit
*** deployment / deploy

** create
*** deployment / deploy <NAME>
*--image=<IMAGE>*
#+begin_src shell
kubectl create deployment go-depl --image=golang:1.19-alpine
#+end_src

*--replicas=<N>*
#+begin_src shell
kubectl create deploy gofirst --image=first-go-image:v1.0 --replicas=1
#+end_src
*** namespace

** describe
*** deployment
#+begin_src shell
kubectl describe deployments.apps go-depl -n apitada
#+end_src
*** service
#+begin_src shell
kubectl describe service todo
#+end_src
** cluster-info
** config
*** get-contexts
** delete
*** pod
#+begin_src shell
kubectl delete pod todo-655ff549f8-qq8ff
#+end_src
** scale
*--replicas*
#+begin_src shell
kubectl scale --replicas=5 deployment todo
#+end_src

** autoscale
#+begin_src yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-deployment
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-deployment
  targetCPUUtilizationPercentage: 50
#+end_src

** create
*** --options
|                       |   |
|-----------------------+---|
| --namespace=NAMESPACE |   |
*** namespace
*** deployment
*** secret
**** generic
***** --options
|             |   |
|-------------+---|
| --from-file |   |
*** configmap
Create a config map based on a file, directory, or specified literal value.

*<name> <data>*

*--from-file*

#+begin_src sh
kubectl create configmap config-test --from-file=/apps/nginx-config/nginx.conf
#+end_src

*folder*

all files in folder

#+begin_src sh
ls myapp # config1 config2 config3

kubectl create configmap config-test --from-file=/apps/config/myapp
#+end_src

** config
*** set-context
Set a context entra in kubeconfig
#+begin_src shell
kubectl config set-context my-context --namespace=mystuff
#+end_src
*** use-contex
Set the current-context in a kubeconfig file

#+begin_src shell
kubectl config use-context my-context
#+end_src
*** current-context
Display the current-context
** cordon
** describe
*** nodes
#+begin_src sh
kubectl describe node
#+end_src
** edit
*** deployment
** explain
*** pods
|             |   |
|-------------+---|
| --recursive |   |
*** deployment
** expose
Expose a resource as a new Kubernetes service.

 Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that
resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a
service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only
the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all
will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the
resource it exposes.

 Possible resources include (case insensitive):

 pod (PO), service (svc), replicationcontroller (RC), deployment (deploy), replicaset (rs)
** exec
|       |   |
|-------+---|
| --tty |   |
| -t    |   |
| -i    |   |

** get
Display one or many resources.

Prints a table of the most important information about the specified resources.
You can filter the list using a label selector and the --selector flag. If the
desired resource type is namespaced you will only see results in your current
namespace unless you pass --all-namespaces.

By specifying the output as 'template' and providing a Go template as the value
of the --template flag, you can filter the attributes of the fetched resources.

*** all
|                  |   |
|------------------+---|
| --all-namespaces |   |

*** componentstatuses
*** containers
*** csinodes
*** clusterrolebinding
 cluster-admin -o yaml
*** deployments
*** deployment
*** endpoints
*** events
*** limitrange
*** namespaces
*** node
*** nodes
*** replicaset
*** services

*** secret

*** storageclasses
*** pods
|                                       |   |
|---------------------------------------+---|
| -n NAMESPACE or --namespace=NAMESPACE |   |
*** persistentvolume
pv

** taint

** top
** logs
** labels
** proxy
** patch
Update fields of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.
** replace
** rollout
*** status
*** history
** scale
*** deployment
|                  |   |
|------------------+---|
| --replicas <INT> |   |
** set
*** image
** uncordon
* kube-apiserver
* kubelet
* kube-proxy
* minikube
** start
*--container-runtime=<containerd|cri-o>*

#+begin_src shell
minikube start --container-runtime=containerd
#+end_src

*--driver=DRIVER*
#+begin_src shell
minikube start --driver=podman
#+end_src

** config
*** set
**** driver
To make podman the default driver:

#+begin_src  shell
minikube config set driver podman
#+end_src
* k3s
** tips
*** uninstall
 /usr/local/bin/k3s-uninstall.sh
* k3d
** commands
*** kubeconfig
#+begin_src shell
export KUBECONFIG=$(k3d kubeconfig write k3s-default)
#+end_src

**** get
*** cluster
**** list
**** delete
**** create
*--agents*
*--servers*
*--registry-use*
#+begin_src shell
k3d cluster create apito --registry-use k3d-apito-registry
#+end_src

*--k3s-arg*
#+begin_src shell
k3d cluster create apito --registry-use k3d-apito-registry \
 --k3s-arg'--kubelet-arg=feature-gates=KubeletInUserNamespace=true@server:*'
#+end_src
*--api-port*
*--volume*
*** config
*** node
*** registry
**** list
**** create
**** delete
*** image
**** import

** podman
XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$(id -u)}
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock
export DOCKER_SOCK=$XDG_RUNTIME_DIR/podman/podman.sock

k3d cluster create

# You can now use the registry like this (example):
# 1. create a new cluster that uses this registry
k3d cluster create --registry-use k3d-mycluster-registry:40385

# 2. tag an existing local image to be pushed to the registry
docker tag nginx:latest k3d-mycluster-registry:40385/mynginx:v0.1

# 3. push that image to the registry
docker push k3d-mycluster-registry:40385/mynginx:v0.1

# 4. run a pod that uses this image
kubectl run mynginx --image k3d-mycluster-registry:40385/mynginx:v0.1
** errors
*** Error response from daemon: container create: unable to find network configuration for podman: network not found
#+begin_src shell
podman system reset

k3d registry create --default-network podman apito-registry

k3d cluster create apito \
    -p "8082:30080@agent:0" --agents 2 \
    --registry-use k3d-apito-registry:40385 \
    --k3s-arg '--kubelet-arg=feature-gates=KubeletInUserNamespace=true@server:*'
#+end_src
*** failed to find cpuset cgroup (v2)
Enabling CPU, CPUSET, and I/O delegation

#+begin_src shell
$ sudo mkdir -p /etc/systemd/system/user@.service.d
$ cat <<EOF | sudo tee /etc/systemd/system/user@.service.d/delegate.conf
[Service]
Delegate=cpu cpuset io memory pids
EOF
$ sudo systemctl daemon-reload
#+end_src
