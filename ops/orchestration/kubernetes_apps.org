#+title: Kubernetes Apps

* etcd
** env vars
export ETCDCTL_API=3
* kubectl
** get
*** nodes
*-o*
#+begin_src shell
kubectl get nodes -o wide
#+end_src
*** pod
*-o*
#+begin_src shell
kubectl get pod -o "custom-columns=PodName:.metadata.name,Containers:.spec.containers[*].name,Image:.spec.containers[*].image"
#+end_src
*** pods
*-n*
#+begin_src shell
kubectl get pods -n apitada
#+end_src
*** deployment
*-n*

#+begin_src
#+end_src
*** logs
** exec
** edit
*** deployment / deploy

** create
*** deployment / deploy <NAME>
*--image=<IMAGE>*
#+begin_src shell
kubectl create deployment go-depl --image=golang:1.19-alpine
#+end_src

*--replicas=<N>*
#+begin_src shell
kubectl create deploy gofirst --image=first-go-image:v1.0 --replicas=1
#+end_src
*** namespace

** describe
*** deployment
#+begin_src shell
kubectl describe deployments.apps go-depl -n apitada
#+end_src
* kube-apiserver
* kubelet
* kube-proxy
* minikube
** start

*--container-runtime=<containerd|cri-o>*

#+begin_src shell
minikube start --container-runtime=containerd
#+end_src

*--driver=DRIVER*
#+begin_src shell
minikube start --driver=podman
#+end_src

** config
*** set
**** driver
To make podman the default driver:

#+begin_src  shell
minikube config set driver podman
#+end_src
* k3s
** tips
*** uninstall
 /usr/local/bin/k3s-uninstall.sh
* k3d
** commands
*** kubeconfig
#+begin_src shell
export KUBECONFIG=$(k3d kubeconfig write k3s-default)
#+end_src

**** get
** podman
XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$(id -u)}
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock
k3d cluster create

# You can now use the registry like this (example):
# 1. create a new cluster that uses this registry
k3d cluster create --registry-use k3d-mycluster-registry:40385

# 2. tag an existing local image to be pushed to the registry
docker tag nginx:latest k3d-mycluster-registry:40385/mynginx:v0.1

# 3. push that image to the registry
docker push k3d-mycluster-registry:40385/mynginx:v0.1

# 4. run a pod that uses this image
kubectl run mynginx --image k3d-mycluster-registry:40385/mynginx:v0.1
** errors
*** failed to find cpuset cgroup (v2)
Enabling CPU, CPUSET, and I/O delegation

#+begin_src shell
$ sudo mkdir -p /etc/systemd/system/user@.service.d
$ cat <<EOF | sudo tee /etc/systemd/system/user@.service.d/delegate.conf
[Service]
Delegate=cpu cpuset io memory pids
EOF
$ sudo systemctl daemon-reload
#+end_src
*** mmm
#+begin_src shell
 k3d cluster create apito \
    --registry-use k3d-apito-registry:40385 \
    --k3s-arg '--kubelet-arg=feature-gates=KubeletInUserNamespace=true@server:*'
#+end_src
