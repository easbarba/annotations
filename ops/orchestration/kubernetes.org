#+TITLE: Kubernetes

* Summary
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#summary][Summary]]
- [[#progress][Progress]]
  - [[#books][Books]]
- [[#base][Base]]
  - [[#container][Container]]
    - [[#lifecycle][lifecycle]]
      - [[#prestop][PreStop]]
      - [[#poststart][PostStart]]
  - [[#controllers][Controllers]]
    - [[#long-lived][Long-lived]]
      - [[#deployments][Deployments]]
      - [[#statefulsets][StatefulSets]]
      - [[#daemonsets][DaemonSets]]
    - [[#short-lived][Short-lived]]
      - [[#jobs][Jobs]]
      - [[#cronjobs][CronJobs]]
  - [[#control-plane][Control Plane]]
  - [[#cluster][Cluster]]
    - [[#cluster-master][Cluster master]]
    - [[#worker-nodes][Worker nodes]]
      - [[#components][components]]
        - [[#kubelet][kubelet]]
        - [[#kube-proxy][kube-proxy]]
        - [[#container-runtime][container runtime]]
  - [[#configmap][ConfigMap]]
  - [[#cronjob][Cronjob]]
  - [[#customresourcedefinitions][CustomResourceDefinitions]]
  - [[#daemonsets][DaemonSets]]
  - [[#deployments][Deployments]]
  - [[#endpoints][Endpoints]]
  - [[#events][Events]]
  - [[#healthchecks][HealthChecks]]
    - [[#livenessprobe][livenessProbe]]
    - [[#readinessprobe][readinessProbe]]
    - [[#startup][startup]]
  - [[#horizontalpodautoscalers][HorizontalPodAutoscalers]]
  - [[#jobs][Jobs]]
  - [[#ingress][Ingress]]
  - [[#master][Master]]
    - [[#api-server][API server]]
    - [[#etcd][etcd]]
    - [[#scheduler][scheduler]]
    - [[#kube-controller-manager][kube-controller-manager]]
    - [[#cloud-controller-manager][cloud-controller-manager]]
    - [[#contexts][Contexts]]
  - [[#namespaces][Namespaces]]
    - [[#kube-system][kube-system]]
    - [[#kube-public][kube-public]]
    - [[#default][default]]
  - [[#nodes][Nodes]]
  - [[#volumes][Volumes]]
  - [[#persistent-volume-claims][Persistent Volume Claims]]
  - [[#persistent-volume][Persistent Volume]]
  - [[#pods][Pods]]
    - [[#multi-container-pod][multi-container pod]]
      - [[#patterns][patterns]]
        - [[#sidecar-pattern][Sidecar pattern]]
        - [[#adapter-pattern][Adapter pattern]]
        - [[#ambassador-pattern][Ambassador pattern]]
        - [[#init-pattern][Init pattern]]
    - [[#single-container-pod][single-container pod]]
    - [[#state][state]]
      - [[#status][status]]
      - [[#condition][condition]]
      - [[#container][container]]
      - [[#pending][pending]]
      - [[#succeded][succeded]]
      - [[#failed][failed]]
      - [[#unknown][unknown]]
  - [[#replicaset][ReplicaSet]]
    - [[#replicacontroller-old-way][ReplicaController (old way)]]
  - [[#resource-quotas][Resource Quotas]]
  - [[#secrets][Secrets]]
    - [[#env-vars][Env Vars]]
    - [[#file][File]]
    - [[#vaults][Vaults]]
  - [[#service][Service]]
    - [[#nodeport][NodePort]]
      - [[#targetport][TargetPort]]
      - [[#port][Port]]
    - [[#clusterip][ClusterIP]]
    - [[#loadbalancer][LoadBalancer]]
    - [[#externalname][ExternalName]]
  - [[#service-account][Service Account]]
  - [[#statefulsets][StatefulSets]]
- [[#kubectl][kubectl]]
  - [[#--options][--options]]
  - [[#apply][apply]]
  - [[#autoscale][autoscale]]
  - [[#cluster-info][cluster-info]]
  - [[#create][create]]
    - [[#--options][--options]]
    - [[#namespace][namespace]]
    - [[#deployment][deployment]]
    - [[#secret][secret]]
      - [[#generic][generic]]
        - [[#--options][--options]]
    - [[#configmap][configmap]]
  - [[#config][config]]
    - [[#set-context][set-context]]
    - [[#use-contex][use-contex]]
    - [[#current-context][current-context]]
  - [[#cordon][cordon]]
  - [[#describe][describe]]
    - [[#nodes][nodes]]
  - [[#delete][delete]]
  - [[#edit][edit]]
    - [[#deployment][deployment]]
  - [[#explain][explain]]
    - [[#pods][pods]]
    - [[#deployment][deployment]]
  - [[#expose][expose]]
  - [[#exec][exec]]
  - [[#get][get]]
    - [[#all][all]]
    - [[#componentstatuses][componentstatuses]]
    - [[#containers][containers]]
    - [[#csinodes][csinodes]]
    - [[#clusterrolebinding][clusterrolebinding]]
    - [[#deployments][deployments]]
    - [[#deployment][deployment]]
    - [[#endpoints][endpoints]]
    - [[#events][events]]
    - [[#limitrange][limitrange]]
    - [[#namespaces][namespaces]]
    - [[#node][node]]
    - [[#nodes][nodes]]
    - [[#replicaset][replicaset]]
    - [[#services][services]]
    - [[#secret][secret]]
    - [[#storageclasses][storageclasses]]
    - [[#pods][pods]]
    - [[#persistentvolume][persistentvolume]]
  - [[#taint][taint]]
  - [[#top][top]]
  - [[#logs][logs]]
  - [[#labels][labels]]
  - [[#proxy][proxy]]
  - [[#patch][patch]]
  - [[#replace][replace]]
  - [[#rollout][rollout]]
    - [[#status][status]]
    - [[#history][history]]
  - [[#scale][scale]]
    - [[#deployment][deployment]]
  - [[#set][set]]
    - [[#image][image]]
  - [[#uncordon][uncordon]]
- [[#components][Components]]
  - [[#kube-apiserver][kube-apiserver]]
  - [[#kube-scheduler][kube-scheduler]]
  - [[#kube-controller-manager][kube-controller-manager]]
    - [[#node][node]]
    - [[#replication][replication]]
    - [[#endpoints][endpoints]]
    - [[#serviceaccounts][serviceaccounts]]
    - [[#namespace][namespace]]
  - [[#etcd][Etcd]]
  - [[#cloud-controller-manager][cloud-controller-manager]]
    - [[#node][node]]
    - [[#route][route]]
    - [[#service][service]]
    - [[#volume-controllers][volume controllers]]
  - [[#worker-nodes][worker nodes]]
    - [[#kubelet][kubelet]]
    - [[#kube-proxy][kube-proxy]]
  - [[#container-runtime][Container runtime]]
- [[#manifest][Manifest]]
  - [[#apiversion][apiVersion]]
    - [[#v1][v1]]
    - [[#apps][apps]]
  - [[#kind][kind]]
    - [[#deployment][Deployment]]
    - [[#namespace][Namespace]]
    - [[#pod][Pod]]
    - [[#persistentvolumeclaim][PersistentVolumeClaim]]
    - [[#replicaset][ReplicaSet]]
    - [[#replicacontroller][ReplicaController]]
    - [[#service][Service]]
    - [[#replicator][Replicator]]
  - [[#metadata][metadata]]
    - [[#name][name]]
    - [[#namespace][namespace]]
    - [[#labels][labels]]
      - [[#type][type]]
      - [[#app][app]]
  - [[#spec][spec]]
    - [[#labels][labels]]
    - [[#hard][hard]]
      - [[#pods][pods]]
    - [[#containers][containers]]
      - [[#name][name]]
        - [[#image][image]]
    - [[#initcontainers][initContainers]]
    - [[#nodeselector][NodeSelector]]
  - [[#object][Object]]
  - [[#status][Status]]
  - [[#example][example]]
- [[#config-file][Config File]]
  - [[#clusters][Clusters]]
  - [[#users][Users]]
- [[#challenges][Challenges]]
  - [[#on-premisses-1m2n][On premisses 1m/2n]]
:END:

* Progress
** Books
| Books                            | Chapters              | @        |
|----------------------------------+-----------------------+----------|
| Kubernetes â€“ An Enterprise Guide | 3 Kubernetes Bootcamp | Services |
* Base
** Container
*** lifecycle
**** PreStop
**** PostStart
** Controllers
*** Long-lived
**** Deployments
**** StatefulSets
**** DaemonSets
*** Short-lived
**** Jobs
**** CronJobs
** Control Plane
- suggested that you have at least three master nodes
** Cluster
*** Cluster master
*** Worker nodes
- machine or vm
**** components
***** kubelet
-
***** kube-proxy
***** container runtime
** ConfigMap
A ConfigMap is an API object used to store non-confidential data in key-value
pairs. Pods can consume ConfigMaps as environment variables, command-line
arguments, or as configuration files in a volume.

A ConfigMap allows you to decouple environment-specific configuration from your
container images, so that your applications are easily portable.
** Cronjob
#+begin_src yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "* * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - date; echo Hello from the Kubernetes cluster
          restartPolicy: OnFailure
#+end_src

** CustomResourceDefinitions
** DaemonSets
A DaemonSet ensures that all (or some) Nodes run a copy of a Pod. As nodes are
added to the cluster, Pods are added to them. As nodes are removed from the
cluster, those Pods are garbage collected. Deleting a DaemonSet will clean up
the Pods it created.
** Deployments
A Deployment provides declarative updates for Pods and ReplicaSets.

You describe a desired state in a Deployment, and the Deployment Controller
changes the actual state to the desired state at a controlled rate. You can
define Deployments to create new ReplicaSets, or to remove existing Deployments
and adopt all their resources with new Deployments.
** Endpoints
Maps a service to a Pod or Pods.
** Events
Displays any events for a namespace.
** HealthChecks
*** livenessProbe
*** readinessProbe
*** startup
** HorizontalPodAutoscalers
provide the ability to scale an application based on a set of criteria.
** Jobs
** Ingress
An API object that manages external access to the services in a cluster, typically HTTP.

Ingress exposes HTTP and HTTPS routes from outside the cluster to services
within the cluster. Traffic routing is controlled by rules defined on the
Ingress resource.
** Master
*** API server
*** etcd
*** scheduler
*** kube-controller-manager
*** cloud-controller-manager

*** Contexts
** Namespaces
is a resource to divide a cluster into logical units.

*** kube-system
 The namespace for objects created by the Kubernetes system
*** kube-public
This namespace is created automatically and is readable by all users (including
those not authenticated). This namespace is mostly reserved for cluster usage,
in case that some resources should be visible and readable publicly throughout
the whole cluster. The public aspect of this namespace is only a convention, not
a requirement.
*** default
The default namespace for objects with no other namespace
** Nodes
a cluster-level resource that is used to interact with the cluster's nodes.
** Volumes
** Persistent Volume Claims
used by a Pod to consume persistent storage.
** Persistent Volume
used by PVCs to create a link between the PVC and the underlying storage system.
** Pods
Pods are the smallest deployable units of computing that you can create and manage in Kubernetes.

A Pod (as in a pod of whales or pea pod) is a group of one or more containers,
with shared storage and network resources, and a specification for how to run
the containers.

- immutable objects
- single-container
- multi-container
- defined declaratively in manifest files
- deployed via higher-level controllers

*** multi-container pod
**** patterns
***** Sidecar pattern
- sidecar augments or performs a secondary task for the main application container.
***** Adapter pattern
the helper container translate output from the main container to a format required B an external system

- variation of the sidecar pattern

eg: translate NGINX logs to Prometheus.

***** Ambassador pattern
brokers connectivity to an external system.

- variation of the sidecar pattern
***** Init pattern
init container starts and completes before the main app container, only once.
*** single-container pod
*** state
**** status
**** condition
**** container
- running
- terminated
**** pending
**** succeded
**** failed
**** unknown
** ReplicaSet
A ReplicaSet's purpose is to maintain a stable set of replica Pods running at
any given time. As such, it is often used to guarantee the availability of a
specified number of identical Pods.

*** ReplicaController (old way)
A ReplicationController ensures that a specified number of pod replicas are
running at any one time. In other words, a ReplicationController makes sure that
a pod or a homogeneous set of pods is always up and available.
** Resource Quotas
When several users or teams share a cluster with a fixed number of nodes, there
is a concern that one team could use more than its fair share of resources.

Resource quotas are a tool for administrators to address this concern.

A resource quota, defined by a ResourceQuota object, provides constraints that
limit aggregate resource consumption per namespace. It can limit the quantity of
objects that can be created in a namespace by type, as well as the total amount
of compute resources that may be consumed by resources in that namespace.

#+begin_src yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: base-memory-cpu
spec:
  hard:
    requests.cpu: "2"
    requests.memory: 8Gi
    limits.cpu: "4"
    limits.memory: 16Gi
#+end_src

** Secrets
- Base64-encoded strings

*** Env Vars
*** File
- dotenv
- yaml files

*** Vaults
** Service
An abstract way to expose an application running on a set of Pods as a network service.

- defaults to ClusterIP.

#+begin_src yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-web-frontend
  name: nginx-web
spec:
ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: nginx-web
#+end_src

*** NodePort

**** TargetPort

**** Port

*** ClusterIP
*** LoadBalancer
*** ExternalName
** Service Account
A service account provides an identity for processes that run in a Pod.

#+begin_src yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
#+end_src
** StatefulSets
* kubectl
** --options
|                 |   |
|-----------------+---|
| --namespace     |   |
| --all-namespace |   |
| --dry-run       |   |
| --output        |   |
** apply
** autoscale
#+begin_src yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-deployment
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-deployment
  targetCPUUtilizationPercentage: 50
#+end_src

** cluster-info
** create
*** --options
|                       |   |
|-----------------------+---|
| --namespace=NAMESPACE |   |
*** namespace
*** deployment
*** secret
**** generic
***** --options
|             |   |
|-------------+---|
| --from-file |   |
*** configmap
Create a config map based on a file, directory, or specified literal value.

*<name> <data>*

*--from-file*

#+begin_src sh
kubectl create configmap config-test --from-file=/apps/nginx-config/nginx.conf
#+end_src

*folder*

all files in folder

#+begin_src sh
ls myapp # config1 config2 config3

kubectl create configmap config-test --from-file=/apps/config/myapp
#+end_src

** config
*** set-context
Set a context entra in kubeconfig
#+begin_src shell
kubectl config set-context my-context --namespace=mystuff
#+end_src
*** use-contex
Set the current-context in a kubeconfig file

#+begin_src shell
kubectl config use-context my-context
#+end_src
*** current-context
Display the current-context
** cordon
** describe
*** nodes
#+begin_src sh
kubectl describe node
#+end_src
** delete
** edit
*** deployment
** explain
*** pods
|             |   |
|-------------+---|
| --recursive |   |
*** deployment
** expose
Expose a resource as a new Kubernetes service.

 Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that
resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a
service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only
the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all
will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the
resource it exposes.

 Possible resources include (case insensitive):

 pod (PO), service (svc), replicationcontroller (RC), deployment (deploy), replicaset (rs)
** exec
|       |   |
|-------+---|
| --tty |   |
| -t    |   |
| -i    |   |

** get
Display one or many resources.

Prints a table of the most important information about the specified resources.
You can filter the list using a label selector and the --selector flag. If the
desired resource type is namespaced you will only see results in your current
namespace unless you pass --all-namespaces.

By specifying the output as 'template' and providing a Go template as the value
of the --template flag, you can filter the attributes of the fetched resources.

*** all
|                  |   |
|------------------+---|
| --all-namespaces |   |

*** componentstatuses
*** containers
*** csinodes
*** clusterrolebinding
 cluster-admin -o yaml
*** deployments
*** deployment
*** endpoints
*** events
*** limitrange
*** namespaces
*** node
*** nodes
*** replicaset
*** services

*** secret

*** storageclasses
*** pods
|                                       |   |
|---------------------------------------+---|
| -n NAMESPACE or --namespace=NAMESPACE |   |
*** persistentvolume
pv

** taint

** top
** logs
** labels
** proxy
** patch
Update fields of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.
** replace
** rollout
*** status
*** history
** scale
*** deployment
|                  |   |
|------------------+---|
| --replicas <INT> |   |
** set
*** image
** uncordon
* Components
** kube-apiserver
** kube-scheduler
** kube-controller-manager
*** node
*** replication
*** endpoints
*** serviceaccounts
*** namespace
** Etcd
** cloud-controller-manager
*** node
*** route
*** service
*** volume controllers
** worker nodes
*** kubelet
- responsible for running the actual containers
*** kube-proxy
- responsible for routing network communication between a Pod and the network
** Container runtime
* Manifest
** apiVersion
*** v1
*** apps
** kind
*** Deployment
*** Namespace
*** Pod
*** PersistentVolumeClaim
*** ReplicaSet
*** ReplicaController
*** Service
*** Replicator
** metadata
*** name
*** namespace
*** labels
**** type
**** app
** spec
*** labels
*** hard
**** pods
*** containers
**** name
***** image
*** initContainers
specialized containers that run before app containers in a Pod. Init containers
can contain utilities or setup scripts not present in an app image.
*** NodeSelector
** Object
** Status

** example

#+BEGIN_SRC yaml
apiVersion: apps/v1
Kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: monitoring
#+END_SRC
* Config File
** Clusters
** Users
* Challenges
** On premisses 1m/2n
Tenta instalar um k8s onprime Com 2 nodes E 1 Master
