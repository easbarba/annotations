#+TITLE: Kubernetes

* Summary
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#summary][Summary]]
- [[#progress][Progress]]
  - [[#books][Books]]
- [[#base][Base]]
  - [[#namespace][Namespace]]
    - [[#kube-system][kube-system]]
    - [[#kube-public][kube-public]]
    - [[#default][default]]
  - [[#replicaset][ReplicaSet]]
    - [[#replicacontroller-old-way][ReplicaController (old way)]]
  - [[#deployment][Deployment]]
  - [[#cluster][Cluster]]
    - [[#cluster-master][Cluster master]]
    - [[#worker-nodes][Worker nodes]]
      - [[#components][components]]
        - [[#kubelet][kubelet]]
        - [[#kube-proxy][kube-proxy]]
        - [[#container-runtime][container runtime]]
  - [[#node][Node]]
  - [[#secrets][Secrets]]
    - [[#env-vars][Env Vars]]
    - [[#file][File]]
    - [[#vaults][Vaults]]
  - [[#configmap][ConfigMap]]
  - [[#endpoints][Endpoints]]
  - [[#service][Service]]
    - [[#nodeport][NodePort]]
      - [[#targetport][TargetPort]]
      - [[#port][Port]]
    - [[#clusterip][ClusterIP]]
    - [[#loadbalancer][LoadBalancer]]
  - [[#jobs--cronjobs][Jobs & CronJobs]]
  - [[#volumes][Volumes]]
  - [[#container][Container]]
    - [[#lifecycle][lifecycle]]
      - [[#prestop][PreStop]]
      - [[#poststart][PostStart]]
  - [[#master][Master]]
    - [[#api-server][API server]]
    - [[#etcd][etcd]]
    - [[#scheduler][scheduler]]
    - [[#kube-controller-manager][kube-controller-manager]]
    - [[#cloud-controller-manager][cloud-controller-manager]]
    - [[#contexts][Contexts]]
  - [[#pods][Pods]]
    - [[#multi-container-pod][multi-container pod]]
      - [[#patterns][patterns]]
        - [[#sidecar-pattern][Sidecar pattern]]
        - [[#adapter-pattern][Adapter pattern]]
        - [[#ambassador-pattern][Ambassador pattern]]
        - [[#init-pattern][Init pattern]]
    - [[#single-container-pod][single-container pod]]
    - [[#state][state]]
      - [[#status][status]]
      - [[#condition][condition]]
      - [[#container][container]]
      - [[#pending][pending]]
      - [[#succeded][succeded]]
      - [[#failed][failed]]
      - [[#unknown][unknown]]
  - [[#controllers][Controllers]]
    - [[#long-lived][Long-lived]]
      - [[#deployments][Deployments]]
      - [[#statefulsets][StatefulSets]]
      - [[#daemonsets][DaemonSets]]
    - [[#short-lived][Short-lived]]
      - [[#jobs][Jobs]]
      - [[#cronjobs][CronJobs]]
  - [[#healthchecks][HealthChecks]]
    - [[#livenessprobe][livenessProbe]]
    - [[#readinessprobe][readinessProbe]]
    - [[#startup][startup]]
  - [[#ingress][Ingress]]
- [[#commands][Commands]]
  - [[#apply][apply]]
  - [[#cluster-info][cluster-info]]
  - [[#create][create]]
    - [[#options][options]]
    - [[#namespace][namespace]]
    - [[#deployment][deployment]]
    - [[#secret][secret]]
      - [[#generic][generic]]
        - [[#db-user-pass][db-user-pass]]
  - [[#config][config]]
    - [[#set-context][set-context]]
    - [[#use-contex][use-contex]]
    - [[#current-context][current-context]]
  - [[#cordon][cordon]]
  - [[#describe][describe]]
    - [[#nodes][nodes]]
  - [[#delete][delete]]
  - [[#edit][edit]]
    - [[#deployment][deployment]]
  - [[#explain][explain]]
    - [[#pods][pods]]
    - [[#deployment][deployment]]
  - [[#expose][expose]]
  - [[#exec][exec]]
  - [[#get][get]]
    - [[#all][all]]
    - [[#componentstatuses][componentstatuses]]
    - [[#containers][containers]]
    - [[#deployments][deployments]]
    - [[#deployment][deployment]]
    - [[#endpoint][endpoint]]
    - [[#limitrange][limitrange]]
    - [[#namespaces][namespaces]]
    - [[#replicaset][replicaset]]
    - [[#services][services]]
    - [[#secret][secret]]
    - [[#pods][pods]]
  - [[#taint][taint]]
  - [[#top][top]]
  - [[#logs][logs]]
  - [[#labels][labels]]
  - [[#proxy][proxy]]
  - [[#replace][replace]]
  - [[#rollout][rollout]]
    - [[#status][status]]
    - [[#history][history]]
  - [[#scale][scale]]
    - [[#deployment][deployment]]
  - [[#set][set]]
    - [[#image][image]]
  - [[#uncordon][uncordon]]
  - [[#--options][--options]]
- [[#manifest][Manifest]]
  - [[#apiversion][apiVersion]]
    - [[#v1][v1]]
    - [[#apps][apps]]
  - [[#kind][kind]]
    - [[#deployment][Deployment]]
    - [[#namespace][Namespace]]
    - [[#pod][Pod]]
    - [[#replicaset][ReplicaSet]]
    - [[#replicacontroller][ReplicaController]]
    - [[#service][Service]]
    - [[#replicator][Replicator]]
  - [[#metadata][metadata]]
    - [[#name][name]]
    - [[#namespace][namespace]]
    - [[#labels][labels]]
      - [[#type][type]]
      - [[#app][app]]
  - [[#spec][spec]]
    - [[#labels][labels]]
    - [[#hard][hard]]
      - [[#pods][pods]]
    - [[#containers][containers]]
      - [[#name][name]]
        - [[#image][image]]
    - [[#initcontainers][initContainers]]
    - [[#nodeselector][NodeSelector]]
  - [[#object][Object]]
  - [[#status][Status]]
  - [[#example][example]]
- [[#config-file][Config File]]
  - [[#clusters][Clusters]]
  - [[#users][Users]]
- [[#challenges][Challenges]]
  - [[#on-premisses-1m2n][On premisses 1m/2n]]
:END:

* Progress
** Books
| Books                            | Chapters | @ |
|----------------------------------+----------+---|
| Kubernetes â€“ An Enterprise Guide |        1 |   |

* Base
** Namespace
*** kube-system
 The namespace for objects created by the Kubernetes system
*** kube-public
This namespace is created automatically and is readable by all users (including
those not authenticated). This namespace is mostly reserved for cluster usage,
in case that some resources should be visible and readable publicly throughout
the whole cluster. The public aspect of this namespace is only a convention, not
a requirement.
*** default
The default namespace for objects with no other namespace
** ReplicaSet
A ReplicaSet's purpose is to maintain a stable set of replica Pods running at
any given time. As such, it is often used to guarantee the availability of a
specified number of identical Pods.

*** ReplicaController (old way)
A ReplicationController ensures that a specified number of pod replicas are
running at any one time. In other words, a ReplicationController makes sure that
a pod or a homogeneous set of pods is always up and available.
** Deployment
A Deployment provides declarative updates for Pods and ReplicaSets.

You describe a desired state in a Deployment, and the Deployment Controller
changes the actual state to the desired state at a controlled rate. You can
define Deployments to create new ReplicaSets, or to remove existing Deployments
and adopt all their resources with new Deployments.
** Cluster
*** Cluster master
*** Worker nodes
- machine or vm
**** components
***** kubelet
-
***** kube-proxy
***** container runtime
** Node
** Secrets
*** Env Vars
*** File
- dotenv
- yaml files

*** Vaults
** ConfigMap
** Endpoints
** Service
An abstract way to expose an application running on a set of Pods as a network service.

*** NodePort

**** TargetPort

**** Port

*** ClusterIP
*** LoadBalancer
** Jobs & CronJobs
** Volumes
** Container
*** lifecycle
**** PreStop
**** PostStart
** Master
*** API server
*** etcd
*** scheduler
*** kube-controller-manager
*** cloud-controller-manager

*** Contexts
** Pods
Pods are the smallest deployable units of computing that you can create and manage in Kubernetes.

A Pod (as in a pod of whales or pea pod) is a group of one or more containers,
with shared storage and network resources, and a specification for how to run
the containers.

- immutable objects
- single-container
- multi-container
- defined declaratively in manifest files
- deployed via higher-level controllers

*** multi-container pod
**** patterns
***** Sidecar pattern
- sidecar augments or performs a secondary task for the main application container.
***** Adapter pattern
the helper container translate output from the main container to a format required B an external system

- variation of the sidecar pattern

eg: translate NGINX logs to Prometheus.

***** Ambassador pattern
brokers connectivity to an external system.

- variation of the sidecar pattern
***** Init pattern
init container starts and completes before the main app container, only once.
*** single-container pod
*** state
**** status
**** condition
**** container
- running
- terminated
**** pending
**** succeded
**** failed
**** unknown
** Controllers
*** Long-lived
**** Deployments
**** StatefulSets
**** DaemonSets
*** Short-lived
**** Jobs
**** CronJobs
** HealthChecks
*** livenessProbe
*** readinessProbe
*** startup
** Ingress
An API object that manages external access to the services in a cluster, typically HTTP.

Ingress exposes HTTP and HTTPS routes from outside the cluster to services
within the cluster. Traffic routing is controlled by rules defined on the
Ingress resource.
* Commands
** apply
** cluster-info
** create
*** options
|                       |   |
|-----------------------+---|
| --namespace=NAMESPACE |   |
*** namespace
*** deployment
*** secret
**** generic
***** db-user-pass
|             |   |
|-------------+---|
| --from-file |   |
** config
*** set-context
Set a context entra in kubeconfig
#+begin_src shell
kubectl config set-context my-context --namespace=mystuff
#+end_src
*** use-contex
Set the current-context in a kubeconfig file

#+begin_src shell
kubectl config use-context my-context
#+end_src
*** current-context
Display the current-context
** cordon
** describe
*** nodes
#+begin_src sh
kubectl describe node
#+end_src
** delete
** edit
*** deployment
** explain
*** pods
|             |   |
|-------------+---|
| --recursive |   |
*** deployment
** expose
Expose a resource as a new Kubernetes service.

 Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that
resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a
service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only
the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all
will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the
resource it exposes.

 Possible resources include (case insensitive):

 pod (PO), service (svc), replicationcontroller (RC), deployment (deploy), replicaset (rs)
** exec
|       |   |
|-------+---|
| --tty |   |
| -t    |   |
| -i    |   |

** get
Display one or many resources.

Prints a table of the most important information about the specified resources.
You can filter the list using a label selector and the --selector flag. If the
desired resource type is namespaced you will only see results in your current
namespace unless you pass --all-namespaces.

By specifying the output as 'template' and providing a Go template as the value
of the --template flag, you can filter the attributes of the fetched resources.

*** all
|                  |   |
|------------------+---|
| --all-namespaces |   |

*** componentstatuses
*** containers
*** deployments
*** deployment
*** endpoint
*** limitrange
*** namespaces
*** replicaset
*** services

*** secret

*** pods
|                       |   |
|-----------------------+---|
| --namespace=NAMESPACE |   |

** taint

** top
** logs
** labels
** proxy
** replace
** rollout
*** status
*** history
** scale
*** deployment
|                  |   |
|------------------+---|
| --replicas <INT> |   |
** set
*** image
** uncordon
** --options
|                 |   |
|-----------------+---|
| --namespace     |   |
| --all-namespace |   |
| --dry-run       |   |
| --output        |   |
* Manifest
** apiVersion
*** v1
*** apps
** kind
*** Deployment
*** Namespace
*** Pod
*** ReplicaSet
*** ReplicaController
*** Service
*** Replicator

** metadata
*** name
*** namespace
*** labels
**** type
**** app
** spec
*** labels
*** hard
**** pods
*** containers
**** name
***** image
*** initContainers
specialized containers that run before app containers in a Pod. Init containers
can contain utilities or setup scripts not present in an app image.
*** NodeSelector
** Object
** Status

** example

#+BEGIN_SRC yaml
apiVersion: apps/v1
Kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: monitoring
#+END_SRC
* Config File
** Clusters
** Users
* Challenges
** On premisses 1m/2n
Tenta instalar um k8s onprime Com 2 nodes E 1 Master
