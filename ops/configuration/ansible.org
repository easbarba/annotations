#+TITLE: Ansible

* TOC
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
  :CONTENTS:
  - [[#fortschritt][Fortschritt]]
    - [[#buch][Buch]]
  - [[#infra-provisioning][Infra Provisioning]]
    - [[#cloudformation][CloudFormation]]
    - [[#pulumi][Pulumi]]
    - [[#terraform][Terraform]]
  - [[#configuration-management][Configuration Management]]
    - [[#terms][terms]]
    - [[#alternatives][alternatives]]
  - [[#containers][Containers]]
    - [[#images][Images]]
  - [[#orchestration][Orchestration]]
    - [[#kubernetes-k8s][Kubernetes (k8s)]]
  - [[#cloud-providers][Cloud Providers]]
    - [[#heroku][Heroku]]
    - [[#azure][Azure]]
    - [[#aws][AWS]]
  - [[#linux][Linux]]
    - [[#progresso][Progresso]]
    - [[#text-manipulation][Text Manipulation]]
    - [[#process-monitoring][Process Monitoring]]
    - [[#df][Df]]
    - [[#strace][strace]]
    - [[#dstrace][dstrace]]
    - [[#multiplexers][Multiplexers]]
    - [[#firewall][Firewall]]
    - [[#lvm][LVM]]
    - [[#swap][Swap]]
    - [[#systemd][SystemD]]
    - [[#disk-space-and-partition][Disk Space and Partition]]
    - [[#sync][Sync]]
    - [[#laptop][Laptop]]
    - [[#steam][Steam]]
    - [[#boot][Boot]]
    - [[#xorg][X.org]]
    - [[#network][Network]]
    - [[#containers-virtualization][Containers, Virtualization]]
    - [[#terminal][Terminal]]
    - [[#home][$HOME]]
    - [[#commands][Commands]]
    - [[#packages][Packages]]
    - [[#udev-rules-udevrulesd][Udev rules (udev/rules.d)]]
  - [[#cicd][CI/CD]]
    - [[#gitlab][Gitlab]]
    - [[#github-actions][Github Actions]]
    - [[#circle-ci][Circle CI]]
    - [[#jenkins][Jenkins]]
  - [[#virtual-machine][Virtual Machine]]
  - [[#web-server][Web Server]]
    - [[#apache][Apache]]
    - [[#nginx][Nginx]]
  - [[#toolings][Toolings]]
    - [[#hcl][Hcl]]
  - [[#version-control][Version Control]]
    - [[#git][Git]]
  - [[#shell][Shell]]
    - [[#gnu-bash][GNU Bash]]
    - [[#bash-resources][Bash resources]]
    - [[#fish][Fish]]
    - [[#zsh][Zsh]]
    - [[#tcsh][TCSH]]
    - [[#posix][Posix]]
  - [[#compilers][Compilers]]
    - [[#gnu-gcc][GNU GCC]]
    - [[#clang][Clang]]
  - [[#editors][Editors]]
    - [[#nano][Nano]]
    - [[#vimneovim][Vim/NeoVim]]
    - [[#emacs][Emacs]]
  - [[#network][Network]]
    - [[#protocols][Protocols]]
    - [[#terms][Terms]]
  - [[#concepts][Concepts]]
  - [[#skills][Skills]]
  - [[#concepts][Concepts]]
  - [[#sites][Sites]]
  - [[#distros][Distros]]
    - [[#apt][APT]]
    - [[#rpm][RPM]]
    - [[#gentoo][Gentoo]]
    - [[#functional][Functional]]
  - [[#yet-to-learn][Yet to learn]]
  - [[#software][Software]]
    - [[#onlines][Onlines]]
    - [[#media][Media]]
    - [[#browser][Browser]]
  :END:
* Progress
** Livros
| Livros             | Capitulo                             | em                                                  |
|--------------------+--------------------------------------+-----------------------------------------------------|
| Ansible for DevOps | 2 - Local Infrastructure Development | Prototyping and testing with local virtual machines |
|                    |                                      |                                                     |

* Defition
Tool to automate IT tasks
* Traits
- requires python
- agentless
- support os, cloud
- reusable file configuration for different env
- yaml
- configuration
- mainly configuration
- deployment
- install/update software
- better in configuring
- procedural
* commands
|                           |                           |
|---------------------------+---------------------------|
| -m <MODULE> -a <OPT_ARGS> | use module with arguments |
| --ask-become-pass         | run command as sudo       |
| --ask-pass                | still require pass        |
| -a                        | module arguments          |
| -k                        | ask pass                  |
** ansible-galaxy
*** list
*** collection install

** ansible-playboy
|                      |   |
|----------------------+---|
| --connection=<LOCAL> |   |
| --inventory <IP>     |   |
| --limit <IP>         |   |

*** run local
#+begin_src shell
ansible-playbook \
    --connection=local \
    --inventory 127.0.0.1, \
    --limit 127.0.0.1 ~/Documents/Ansible/local_playbook.yml
#+end_src

** ansible-inventory

*** from ini to yaml
#+begin_src shell
ansible-inventory -i hosts.ini -y --list > inventory.yaml
#+end_src

** ansible
Define and run a single task 'playbook' against a set of hosts

*** <HOST>

*** options
**** -b or --become
**** -K or --ask-become-pass
**** -a or --argument
**** -i
**** -m
**** -f
**** --limit
- reserve the --limit option for running commands on single servers

#+begin_src shell
ansible app -b -a "service ntpd restart" --limit "192.168.60.4"

# Limit hosts with a simple pattern (asterisk is a wildcard).
ansible app -b -a "service ntpd restart" --limit "*.4"

# Limit hosts with a regular expression (prefix with a tilde).
ansible app -b -a "service ntpd restart" --limit ~".*\.4"
#+end_src
**** -m setup
****

* Modules
** services

#+begin_src shell
ansible multi -b -m service -a "name=ntpd state=started enabled=yes"
#+end_src
** commands
** shell
** groups

#+begin_src shell
ansible app -b -m group -a "name=admin state=present"
#+end_src

- name
- state
- gid=[gid]
- system=[yes|no]
** user
#+begin_src shell
ansible app -b -m user -a "name=johndoe group=admin createhome=yes"
#+end_src

- createhome=[yes|no]
- group=[group]
** easy_install
** mysql_*
** package
#+begin_src shell
ansible app -b -m package -a "name=git state=present"
#+end_src
** stat
#+begin_src shell
ansible multi -m stat -a "path=/etc/environment"
#+end_src
** copy
#+begin_src shell
ansible multi -m copy -a "src=/etc/hosts dest=/tmp/hosts"
#+end_src
** rsync
** unarchive
** synchronize
** fetch
Fetch files from remote nodes

#+begin_src shell
ansible multi -b -m fetch -a "src=/etc/hosts dest=/tmp"
#+end_src
** file
#+begin_src shell
ansible multi -m file -a "dest=/tmp/test mode=644 state=directory"
ansible multi -m file -a "src=/src/file dest=/dest/symlink state=link"
#+end_src
** yum
#+begin_src shell
ansible multi -b -m yum -a "name=ntp state=present"
#+end_src
** apt
- name=string
- update_cache=[yes|no]
- state=[present|absent]
* Invetory
- list of the hosts that you wish to run the automation commands against
- Ip addres or hostname
- webservers: groups multiple ip addresses or hosts names
- databases
- can dynamic inventories
- invetory location: /etc/ansible/hosts

** inventory example
#+begin_src conf
[example]
ubuntu ansible_host=18.1 ansible_connection=ssh ansible_user=ubuntu ansible_ssh_private_key_file=/home/meh/Documents/meh.pem
#+end_src

* Tower
- ui dashboard from redhat
- centrally automate tools
- across teams
- configure permissions
- manage inventory
* Playbooks
** usage
      - docker container
      - vagrant container
      - cloud instance
      - bare metal
** tips
*** running ansible command locally
       ansible-playbook --connection=local --inventory 127.0.0.1, playbook.yml
** good practices
      - naming plays
** traits
      - hosts: execute tasks
      - execute multiple modules in sequence
      - organized in tasks
      - arguments
      - modules name

* Vars
** ansible_env.HOME
      get remote home
** ANSIBLE_HOST_KEY_CHECKING
** ANSIBLE_INVENTORY

* Modules
** Trais
      - lots of modules avaiable: https://docs.ansible.com/ansible/2.8/modules/modules_by_category.html
      - grouped together
      - one action may require multiple module
      - applied in sequences
** packages
      https://docs.ansible.com/ansible/latest/collections/ansible/builtin/package_module.html
** Small specific taks
      - create file
      - install nginx
      - start docker container
      - create cloud instance
** Perform one action
      -
